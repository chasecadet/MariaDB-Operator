Name:         mariadbs.k8s.mariadb.com
Namespace:    
Labels:       <none>
Annotations:  controller-g.en.kubebuilder.io/version: v0.14.0
API Version:  apiextensions.k8s.io/v1
Kind:         CustomResourceDefinition
Metadata:
  Creation Timestamp:  2024-06-04T16:40:17Z
  Generation:          1
  Resource Version:    25694977
  UID:                 52686934-b981-43fb-b429-474366e4e084
Spec:
  Conversion:
    Strategy:  None
  Group:       k8s.mariadb.com
  Names:
    Kind:       MariaDB
    List Kind:  MariaDBList
    Plural:     mariadbs
    Short Names:
      mdb
    Singular:  mariadb
  Scope:       Namespaced
  Versions:
    Additional Printer Columns:
      Json Path:  .status.conditions[?(@.type=="Ready")].status
      Name:       Ready
      Type:       string
      Json Path:  .status.conditions[?(@.type=="Ready")].message
      Name:       Status
      Type:       string
      Json Path:  .status.currentPrimary
      Name:       Primary Pod
      Type:       string
      Json Path:  .metadata.creationTimestamp
      Name:       Age
      Type:       date
    Name:         v1alpha1
    Schema:
      openAPIV3Schema:
        Description:  MariaDB is the Schema for the mariadbs API. It is used to define MariaDB clusters.
        Properties:
          API Version:
            Description:  APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            Type:  string
          Kind:
            Description:  Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            Type:  string
          Metadata:
            Type:  object
          Spec:
            Description:  MariaDBSpec defines the desired state of MariaDB
            Properties:
              Affinity:
                Description:  Affinity to be used in the Pod.
                Properties:
                  Anti Affinity Enabled:
                    Description:  AntiAffinityEnabled configures PodAntiAffinity so each Pod is scheduled in a different Node, enabling HA.
Make sure you have at least as many Nodes available as the replicas to not end up with unscheduled Pods.
                    Type:  boolean
                  Node Affinity:
                    Description:  Describes node affinity scheduling rules for the pod.
                    Properties:
                      Preferred During Scheduling Ignored During Execution:
                        Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node matches the corresponding matchExpressions; the
node(s) with the highest sum are the most preferred.
                        Items:
                          Description:  An empty preferred scheduling term matches all objects with implicit weight 0
(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                          Properties:
                            Preference:
                              Description:  A node selector term, associated with the corresponding weight.
                              Properties:
                                Match Expressions:
                                  Description:  A list of node selector requirements by node's labels.
                                  Items:
                                    Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                    Properties:
                                      Key:
                                        Description:  The label key that the selector applies to.
                                        Type:         string
                                      Operator:
                                        Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        Type:  string
                                      Values:
                                        Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                        Items:
                                          Type:  string
                                        Type:    array
                                    Required:
                                      key
                                      operator
                                    Type:  object
                                  Type:    array
                                Match Fields:
                                  Description:  A list of node selector requirements by node's fields.
                                  Items:
                                    Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                    Properties:
                                      Key:
                                        Description:  The label key that the selector applies to.
                                        Type:         string
                                      Operator:
                                        Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        Type:  string
                                      Values:
                                        Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                        Items:
                                          Type:  string
                                        Type:    array
                                    Required:
                                      key
                                      operator
                                    Type:                   object
                                  Type:                     array
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                            Weight:
                              Description:  Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                              Format:       int32
                              Type:         integer
                          Required:
                            preference
                            weight
                          Type:  object
                        Type:    array
                      Required During Scheduling Ignored During Execution:
                        Description:  If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to an update), the system
may or may not try to eventually evict the pod from its node.
                        Properties:
                          Node Selector Terms:
                            Description:  Required. A list of node selector terms. The terms are ORed.
                            Items:
                              Description:  A null or empty node selector term matches no objects. The requirements of
them are ANDed.
The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                              Properties:
                                Match Expressions:
                                  Description:  A list of node selector requirements by node's labels.
                                  Items:
                                    Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                    Properties:
                                      Key:
                                        Description:  The label key that the selector applies to.
                                        Type:         string
                                      Operator:
                                        Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        Type:  string
                                      Values:
                                        Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                        Items:
                                          Type:  string
                                        Type:    array
                                    Required:
                                      key
                                      operator
                                    Type:  object
                                  Type:    array
                                Match Fields:
                                  Description:  A list of node selector requirements by node's fields.
                                  Items:
                                    Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                    Properties:
                                      Key:
                                        Description:  The label key that the selector applies to.
                                        Type:         string
                                      Operator:
                                        Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        Type:  string
                                      Values:
                                        Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                        Items:
                                          Type:  string
                                        Type:    array
                                    Required:
                                      key
                                      operator
                                    Type:                   object
                                  Type:                     array
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                            Type:                           array
                        Required:
                          nodeSelectorTerms
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                    Type:                             object
                  Pod Affinity:
                    Description:  Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                    Properties:
                      Preferred During Scheduling Ignored During Execution:
                        Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
                        Items:
                          Description:  The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                          Properties:
                            Pod Affinity Term:
                              Description:  Required. A pod affinity term, associated with the corresponding weight.
                              Properties:
                                Label Selector:
                                  Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                  Properties:
                                    Match Expressions:
                                      Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      Items:
                                        Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                        Properties:
                                          Key:
                                            Description:  key is the label key that the selector applies to.
                                            Type:         string
                                          Operator:
                                            Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                            Type:  string
                                          Values:
                                            Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                            Items:
                                              Type:  string
                                            Type:    array
                                        Required:
                                          key
                                          operator
                                        Type:  object
                                      Type:    array
                                    Match Labels:
                                      Additional Properties:
                                        Type:       string
                                      Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      Type:                     object
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Match Label Keys:
                                  Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                  Items:
                                    Type:                        string
                                  Type:                          array
                                  X - Kubernetes - List - Type:  atomic
                                Mismatch Label Keys:
                                  Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                  Items:
                                    Type:                        string
                                  Type:                          array
                                  X - Kubernetes - List - Type:  atomic
                                Namespace Selector:
                                  Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                  Properties:
                                    Match Expressions:
                                      Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      Items:
                                        Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                        Properties:
                                          Key:
                                            Description:  key is the label key that the selector applies to.
                                            Type:         string
                                          Operator:
                                            Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                            Type:  string
                                          Values:
                                            Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                            Items:
                                              Type:  string
                                            Type:    array
                                        Required:
                                          key
                                          operator
                                        Type:  object
                                      Type:    array
                                    Match Labels:
                                      Additional Properties:
                                        Type:       string
                                      Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      Type:                     object
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Namespaces:
                                  Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                  Items:
                                    Type:  string
                                  Type:    array
                                Topology Key:
                                  Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                  Type:  string
                              Required:
                                topologyKey
                              Type:  object
                            Weight:
                              Description:  weight associated with matching the corresponding podAffinityTerm,
in the range 1-100.
                              Format:  int32
                              Type:    integer
                          Required:
                            podAffinityTerm
                            weight
                          Type:  object
                        Type:    array
                      Required During Scheduling Ignored During Execution:
                        Description:  If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
                        Items:
                          Description:  Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
                          Properties:
                            Label Selector:
                              Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                              Properties:
                                Match Expressions:
                                  Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  Items:
                                    Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                    Properties:
                                      Key:
                                        Description:  key is the label key that the selector applies to.
                                        Type:         string
                                      Operator:
                                        Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                        Type:  string
                                      Values:
                                        Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                        Items:
                                          Type:  string
                                        Type:    array
                                    Required:
                                      key
                                      operator
                                    Type:  object
                                  Type:    array
                                Match Labels:
                                  Additional Properties:
                                    Type:       string
                                  Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  Type:                     object
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                            Match Label Keys:
                              Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                              Items:
                                Type:                        string
                              Type:                          array
                              X - Kubernetes - List - Type:  atomic
                            Mismatch Label Keys:
                              Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                              Items:
                                Type:                        string
                              Type:                          array
                              X - Kubernetes - List - Type:  atomic
                            Namespace Selector:
                              Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                              Properties:
                                Match Expressions:
                                  Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  Items:
                                    Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                    Properties:
                                      Key:
                                        Description:  key is the label key that the selector applies to.
                                        Type:         string
                                      Operator:
                                        Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                        Type:  string
                                      Values:
                                        Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                        Items:
                                          Type:  string
                                        Type:    array
                                    Required:
                                      key
                                      operator
                                    Type:  object
                                  Type:    array
                                Match Labels:
                                  Additional Properties:
                                    Type:       string
                                  Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  Type:                     object
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                            Namespaces:
                              Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                              Items:
                                Type:  string
                              Type:    array
                            Topology Key:
                              Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                              Type:  string
                          Required:
                            topologyKey
                          Type:  object
                        Type:    array
                    Type:        object
                  Pod Anti Affinity:
                    Description:  Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                    Properties:
                      Preferred During Scheduling Ignored During Execution:
                        Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the anti-affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling anti-affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
                        Items:
                          Description:  The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                          Properties:
                            Pod Affinity Term:
                              Description:  Required. A pod affinity term, associated with the corresponding weight.
                              Properties:
                                Label Selector:
                                  Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                  Properties:
                                    Match Expressions:
                                      Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      Items:
                                        Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                        Properties:
                                          Key:
                                            Description:  key is the label key that the selector applies to.
                                            Type:         string
                                          Operator:
                                            Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                            Type:  string
                                          Values:
                                            Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                            Items:
                                              Type:  string
                                            Type:    array
                                        Required:
                                          key
                                          operator
                                        Type:  object
                                      Type:    array
                                    Match Labels:
                                      Additional Properties:
                                        Type:       string
                                      Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      Type:                     object
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Match Label Keys:
                                  Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                  Items:
                                    Type:                        string
                                  Type:                          array
                                  X - Kubernetes - List - Type:  atomic
                                Mismatch Label Keys:
                                  Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                  Items:
                                    Type:                        string
                                  Type:                          array
                                  X - Kubernetes - List - Type:  atomic
                                Namespace Selector:
                                  Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                  Properties:
                                    Match Expressions:
                                      Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      Items:
                                        Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                        Properties:
                                          Key:
                                            Description:  key is the label key that the selector applies to.
                                            Type:         string
                                          Operator:
                                            Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                            Type:  string
                                          Values:
                                            Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                            Items:
                                              Type:  string
                                            Type:    array
                                        Required:
                                          key
                                          operator
                                        Type:  object
                                      Type:    array
                                    Match Labels:
                                      Additional Properties:
                                        Type:       string
                                      Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      Type:                     object
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Namespaces:
                                  Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                  Items:
                                    Type:  string
                                  Type:    array
                                Topology Key:
                                  Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                  Type:  string
                              Required:
                                topologyKey
                              Type:  object
                            Weight:
                              Description:  weight associated with matching the corresponding podAffinityTerm,
in the range 1-100.
                              Format:  int32
                              Type:    integer
                          Required:
                            podAffinityTerm
                            weight
                          Type:  object
                        Type:    array
                      Required During Scheduling Ignored During Execution:
                        Description:  If the anti-affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the anti-affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
                        Items:
                          Description:  Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
                          Properties:
                            Label Selector:
                              Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                              Properties:
                                Match Expressions:
                                  Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  Items:
                                    Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                    Properties:
                                      Key:
                                        Description:  key is the label key that the selector applies to.
                                        Type:         string
                                      Operator:
                                        Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                        Type:  string
                                      Values:
                                        Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                        Items:
                                          Type:  string
                                        Type:    array
                                    Required:
                                      key
                                      operator
                                    Type:  object
                                  Type:    array
                                Match Labels:
                                  Additional Properties:
                                    Type:       string
                                  Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  Type:                     object
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                            Match Label Keys:
                              Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                              Items:
                                Type:                        string
                              Type:                          array
                              X - Kubernetes - List - Type:  atomic
                            Mismatch Label Keys:
                              Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                              Items:
                                Type:                        string
                              Type:                          array
                              X - Kubernetes - List - Type:  atomic
                            Namespace Selector:
                              Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                              Properties:
                                Match Expressions:
                                  Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  Items:
                                    Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                    Properties:
                                      Key:
                                        Description:  key is the label key that the selector applies to.
                                        Type:         string
                                      Operator:
                                        Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                        Type:  string
                                      Values:
                                        Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                        Items:
                                          Type:  string
                                        Type:    array
                                    Required:
                                      key
                                      operator
                                    Type:  object
                                  Type:    array
                                Match Labels:
                                  Additional Properties:
                                    Type:       string
                                  Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  Type:                     object
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                            Namespaces:
                              Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                              Items:
                                Type:  string
                              Type:    array
                            Topology Key:
                              Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                              Type:  string
                          Required:
                            topologyKey
                          Type:  object
                        Type:    array
                    Type:        object
                Type:            object
              Args:
                Description:  Args to be used in the Container.
                Items:
                  Type:  string
                Type:    array
              Bootstrap From:
                Description:  BootstrapFrom defines a source to bootstrap from.
                Properties:
                  Backup Ref:
                    Description:  BackupRef is a reference to a Backup object. It has priority over S3 and Volume.
                    Properties:
                      Name:
                        Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                        Type:                     string
                    Type:                         object
                    X - Kubernetes - Map - Type:  atomic
                  Restore Job:
                    Description:  RestoreJob defines additional properties for the Job used to perform the Restore.
                    Properties:
                      Affinity:
                        Description:  Affinity to be used in the Pod.
                        Properties:
                          Anti Affinity Enabled:
                            Description:  AntiAffinityEnabled configures PodAntiAffinity so each Pod is scheduled in a different Node, enabling HA.
Make sure you have at least as many Nodes available as the replicas to not end up with unscheduled Pods.
                            Type:  boolean
                          Node Affinity:
                            Description:  Describes node affinity scheduling rules for the pod.
                            Properties:
                              Preferred During Scheduling Ignored During Execution:
                                Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node matches the corresponding matchExpressions; the
node(s) with the highest sum are the most preferred.
                                Items:
                                  Description:  An empty preferred scheduling term matches all objects with implicit weight 0
(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                                  Properties:
                                    Preference:
                                      Description:  A node selector term, associated with the corresponding weight.
                                      Properties:
                                        Match Expressions:
                                          Description:  A list of node selector requirements by node's labels.
                                          Items:
                                            Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  The label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                Type:  string
                                              Values:
                                                Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Fields:
                                          Description:  A list of node selector requirements by node's fields.
                                          Items:
                                            Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  The label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                Type:  string
                                              Values:
                                                Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:                   object
                                          Type:                     array
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Weight:
                                      Description:  Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                                      Format:       int32
                                      Type:         integer
                                  Required:
                                    preference
                                    weight
                                  Type:  object
                                Type:    array
                              Required During Scheduling Ignored During Execution:
                                Description:  If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to an update), the system
may or may not try to eventually evict the pod from its node.
                                Properties:
                                  Node Selector Terms:
                                    Description:  Required. A list of node selector terms. The terms are ORed.
                                    Items:
                                      Description:  A null or empty node selector term matches no objects. The requirements of
them are ANDed.
The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                                      Properties:
                                        Match Expressions:
                                          Description:  A list of node selector requirements by node's labels.
                                          Items:
                                            Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  The label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                Type:  string
                                              Values:
                                                Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Fields:
                                          Description:  A list of node selector requirements by node's fields.
                                          Items:
                                            Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  The label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                Type:  string
                                              Values:
                                                Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:                   object
                                          Type:                     array
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Type:                           array
                                Required:
                                  nodeSelectorTerms
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                            Type:                             object
                          Pod Affinity:
                            Description:  Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                            Properties:
                              Preferred During Scheduling Ignored During Execution:
                                Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
                                Items:
                                  Description:  The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                  Properties:
                                    Pod Affinity Term:
                                      Description:  Required. A pod affinity term, associated with the corresponding weight.
                                      Properties:
                                        Label Selector:
                                          Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Match Label Keys:
                                          Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Mismatch Label Keys:
                                          Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Namespace Selector:
                                          Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Namespaces:
                                          Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                          Items:
                                            Type:  string
                                          Type:    array
                                        Topology Key:
                                          Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                          Type:  string
                                      Required:
                                        topologyKey
                                      Type:  object
                                    Weight:
                                      Description:  weight associated with matching the corresponding podAffinityTerm,
in the range 1-100.
                                      Format:  int32
                                      Type:    integer
                                  Required:
                                    podAffinityTerm
                                    weight
                                  Type:  object
                                Type:    array
                              Required During Scheduling Ignored During Execution:
                                Description:  If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                Items:
                                  Description:  Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
                                  Properties:
                                    Label Selector:
                                      Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                      Properties:
                                        Match Expressions:
                                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          Items:
                                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  key is the label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                Type:  string
                                              Values:
                                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Labels:
                                          Additional Properties:
                                            Type:       string
                                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          Type:                     object
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Match Label Keys:
                                      Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                      Items:
                                        Type:                        string
                                      Type:                          array
                                      X - Kubernetes - List - Type:  atomic
                                    Mismatch Label Keys:
                                      Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                      Items:
                                        Type:                        string
                                      Type:                          array
                                      X - Kubernetes - List - Type:  atomic
                                    Namespace Selector:
                                      Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                      Properties:
                                        Match Expressions:
                                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          Items:
                                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  key is the label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                Type:  string
                                              Values:
                                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Labels:
                                          Additional Properties:
                                            Type:       string
                                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          Type:                     object
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Namespaces:
                                      Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                      Items:
                                        Type:  string
                                      Type:    array
                                    Topology Key:
                                      Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                      Type:  string
                                  Required:
                                    topologyKey
                                  Type:  object
                                Type:    array
                            Type:        object
                          Pod Anti Affinity:
                            Description:  Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                            Properties:
                              Preferred During Scheduling Ignored During Execution:
                                Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the anti-affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling anti-affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
                                Items:
                                  Description:  The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                  Properties:
                                    Pod Affinity Term:
                                      Description:  Required. A pod affinity term, associated with the corresponding weight.
                                      Properties:
                                        Label Selector:
                                          Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Match Label Keys:
                                          Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Mismatch Label Keys:
                                          Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Namespace Selector:
                                          Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Namespaces:
                                          Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                          Items:
                                            Type:  string
                                          Type:    array
                                        Topology Key:
                                          Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                          Type:  string
                                      Required:
                                        topologyKey
                                      Type:  object
                                    Weight:
                                      Description:  weight associated with matching the corresponding podAffinityTerm,
in the range 1-100.
                                      Format:  int32
                                      Type:    integer
                                  Required:
                                    podAffinityTerm
                                    weight
                                  Type:  object
                                Type:    array
                              Required During Scheduling Ignored During Execution:
                                Description:  If the anti-affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the anti-affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                Items:
                                  Description:  Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
                                  Properties:
                                    Label Selector:
                                      Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                      Properties:
                                        Match Expressions:
                                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          Items:
                                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  key is the label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                Type:  string
                                              Values:
                                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Labels:
                                          Additional Properties:
                                            Type:       string
                                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          Type:                     object
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Match Label Keys:
                                      Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                      Items:
                                        Type:                        string
                                      Type:                          array
                                      X - Kubernetes - List - Type:  atomic
                                    Mismatch Label Keys:
                                      Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                      Items:
                                        Type:                        string
                                      Type:                          array
                                      X - Kubernetes - List - Type:  atomic
                                    Namespace Selector:
                                      Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                      Properties:
                                        Match Expressions:
                                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          Items:
                                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  key is the label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                Type:  string
                                              Values:
                                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Labels:
                                          Additional Properties:
                                            Type:       string
                                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          Type:                     object
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Namespaces:
                                      Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                      Items:
                                        Type:  string
                                      Type:    array
                                    Topology Key:
                                      Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                      Type:  string
                                  Required:
                                    topologyKey
                                  Type:  object
                                Type:    array
                            Type:        object
                        Type:            object
                      Args:
                        Description:  Args to be used in the Container.
                        Items:
                          Type:  string
                        Type:    array
                      Metadata:
                        Description:  Metadata defines additional metadata for the bootstrap Jobs.
                        Properties:
                          Annotations:
                            Additional Properties:
                              Type:       string
                            Description:  Annotations to be added to children resources.
                            Type:         object
                          Labels:
                            Additional Properties:
                              Type:       string
                            Description:  Labels to be added to children resources.
                            Type:         object
                        Type:             object
                      Resources:
                        Description:  Resouces describes the compute resource requirements.
                        Properties:
                          Claims:
                            Description:  Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.


This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.


This field is immutable. It can only be set for containers.
                            Items:
                              Description:  ResourceClaim references one entry in PodSpec.ResourceClaims.
                              Properties:
                                Name:
                                  Description:  Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container.
                                  Type:  string
                              Required:
                                name
                              Type:  object
                            Type:    array
                            X - Kubernetes - List - Map - Keys:
                              name
                            X - Kubernetes - List - Type:  map
                          Limits:
                            Additional Properties:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            Type:  object
                          Requests:
                            Additional Properties:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            Type:  object
                        Type:      object
                    Type:          object
                  s3:
                    Description:  S3 defines the configuration to restore backups from a S3 compatible storage. It has priority over Volume.
                    Properties:
                      Access Key Id Secret Key Ref:
                        Description:  AccessKeyIdSecretKeyRef is a reference to a Secret key containing the S3 access key id.
                        Properties:
                          Key:
                            Description:  The key of the secret to select from.  Must be a valid secret key.
                            Type:         string
                          Name:
                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                            Type:  string
                          Optional:
                            Description:  Specify whether the Secret or its key must be defined
                            Type:         boolean
                        Required:
                          key
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Bucket:
                        Description:  Bucket is the name Name of the bucket to store backups.
                        Type:         string
                      Endpoint:
                        Description:  Endpoint is the S3 API endpoint without scheme.
                        Type:         string
                      Prefix:
                        Description:  Prefix indicates a folder/subfolder in the bucket. For example: mariadb/ or mariadb/backups. A trailing slash '/' is added if not provided.
                        Type:         string
                      Region:
                        Description:  Region is the S3 region name to use.
                        Type:         string
                      Secret Access Key Secret Key Ref:
                        Description:  AccessKeyIdSecretKeyRef is a reference to a Secret key containing the S3 secret key.
                        Properties:
                          Key:
                            Description:  The key of the secret to select from.  Must be a valid secret key.
                            Type:         string
                          Name:
                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                            Type:  string
                          Optional:
                            Description:  Specify whether the Secret or its key must be defined
                            Type:         boolean
                        Required:
                          key
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Session Token Secret Key Ref:
                        Description:  SessionTokenSecretKeyRef is a reference to a Secret key containing the S3 session token.
                        Properties:
                          Key:
                            Description:  The key of the secret to select from.  Must be a valid secret key.
                            Type:         string
                          Name:
                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                            Type:  string
                          Optional:
                            Description:  Specify whether the Secret or its key must be defined
                            Type:         boolean
                        Required:
                          key
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Tls:
                        Description:  TLS provides the configuration required to establish TLS connections with S3.
                        Properties:
                          Ca Secret Key Ref:
                            Description:  CASecretKeyRef is a reference to a Secret key containing a CA bundle in PEM format used to establish TLS connections with S3.
By default, the system trust chain will be used, but you can use this field to add more CAs to the bundle.
                            Properties:
                              Key:
                                Description:  The key of the secret to select from.  Must be a valid secret key.
                                Type:         string
                              Name:
                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                Type:  string
                              Optional:
                                Description:  Specify whether the Secret or its key must be defined
                                Type:         boolean
                            Required:
                              key
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Enabled:
                            Description:  Enabled is a flag to enable TLS.
                            Type:         boolean
                        Type:             object
                    Required:
                      accessKeyIdSecretKeyRef
                      bucket
                      endpoint
                      secretAccessKeySecretKeyRef
                    Type:  object
                  Target Recovery Time:
                    Description:  TargetRecoveryTime is a RFC3339 (1970-01-01T00:00:00Z) date and time that defines the point in time recovery objective.
It is used to determine the closest restoration source in time.
                    Format:  date-time
                    Type:    string
                  Volume:
                    Description:  Volume is a Kubernetes Volume object that contains a backup.
                    Properties:
                      Aws Elastic Block Store:
                        Description:  awsElasticBlockStore represents an AWS Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                        Properties:
                          Fs Type:
                            Description:  fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
TODO: how do we prevent errors in the filesystem from compromising the machine
                            Type:  string
                          Partition:
                            Description:  partition is the partition in the volume that you want to mount.
If omitted, the default is to mount by volume name.
Examples: For volume /dev/sda1, you specify the partition as "1".
Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
                            Format:  int32
                            Type:    integer
                          Read Only:
                            Description:  readOnly value true will force the readOnly setting in VolumeMounts.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                            Type:  boolean
                          Volume ID:
                            Description:  volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                            Type:  string
                        Required:
                          volumeID
                        Type:  object
                      Azure Disk:
                        Description:  azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
                        Properties:
                          Caching Mode:
                            Description:  cachingMode is the Host Caching mode: None, Read Only, Read Write.
                            Type:         string
                          Disk Name:
                            Description:  diskName is the Name of the data disk in the blob storage
                            Type:         string
                          Disk URI:
                            Description:  diskURI is the URI of data disk in the blob storage
                            Type:         string
                          Fs Type:
                            Description:  fsType is Filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                            Type:  string
                          Kind:
                            Description:  kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
                            Type:         string
                          Read Only:
                            Description:  readOnly Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                            Type:  boolean
                        Required:
                          diskName
                          diskURI
                        Type:  object
                      Azure File:
                        Description:  azureFile represents an Azure File Service mount on the host and bind mount to the pod.
                        Properties:
                          Read Only:
                            Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                            Type:  boolean
                          Secret Name:
                            Description:  secretName is the  name of secret that contains Azure Storage Account Name and Key
                            Type:         string
                          Share Name:
                            Description:  shareName is the azure share Name
                            Type:         string
                        Required:
                          secretName
                          shareName
                        Type:  object
                      Cephfs:
                        Description:  cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
                        Properties:
                          Monitors:
                            Description:  monitors is Required: Monitors is a collection of Ceph monitors
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                            Items:
                              Type:  string
                            Type:    array
                          Path:
                            Description:  path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
                            Type:         string
                          Read Only:
                            Description:  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                            Type:  boolean
                          Secret File:
                            Description:  secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                            Type:  string
                          Secret Ref:
                            Description:  secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                            Properties:
                              Name:
                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                Type:                     string
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          User:
                            Description:  user is optional: User is the rados user name, default is admin
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                            Type:  string
                        Required:
                          monitors
                        Type:  object
                      Cinder:
                        Description:  cinder represents a cinder volume attached and mounted on kubelets host machine.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                        Properties:
                          Fs Type:
                            Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                            Type:  string
                          Read Only:
                            Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                            Type:  boolean
                          Secret Ref:
                            Description:  secretRef is optional: points to a secret object containing parameters used to connect
to OpenStack.
                            Properties:
                              Name:
                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                Type:                     string
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Volume ID:
                            Description:  volumeID used to identify the volume in cinder.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                            Type:  string
                        Required:
                          volumeID
                        Type:  object
                      Config Map:
                        Description:  configMap represents a configMap that should populate this volume
                        Properties:
                          Default Mode:
                            Description:  defaultMode is optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                            Format:  int32
                            Type:    integer
                          Items:
                            Description:  items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                            Items:
                              Description:  Maps a string key to a path within a volume.
                              Properties:
                                Key:
                                  Description:  key is the key to project.
                                  Type:         string
                                Mode:
                                  Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                  Format:  int32
                                  Type:    integer
                                Path:
                                  Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                  Type:  string
                              Required:
                                key
                                path
                              Type:  object
                            Type:    array
                          Name:
                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                            Type:  string
                          Optional:
                            Description:              optional specify whether the ConfigMap or its keys must be defined
                            Type:                     boolean
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Csi:
                        Description:  csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
                        Properties:
                          Driver:
                            Description:  driver is the name of the CSI driver that handles this volume.
Consult with your admin for the correct name as registered in the cluster.
                            Type:  string
                          Fs Type:
                            Description:  fsType to mount. Ex. "ext4", "xfs", "ntfs".
If not provided, the empty value is passed to the associated CSI driver
which will determine the default filesystem to apply.
                            Type:  string
                          Node Publish Secret Ref:
                            Description:  nodePublishSecretRef is a reference to the secret object containing
sensitive information to pass to the CSI driver to complete the CSI
NodePublishVolume and NodeUnpublishVolume calls.
This field is optional, and  may be empty if no secret is required. If the
secret object contains more than one secret, all secret references are passed.
                            Properties:
                              Name:
                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                Type:                     string
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Read Only:
                            Description:  readOnly specifies a read-only configuration for the volume.
Defaults to false (read/write).
                            Type:  boolean
                          Volume Attributes:
                            Additional Properties:
                              Type:       string
                            Description:  volumeAttributes stores driver-specific properties that are passed to the CSI
driver. Consult your driver's documentation for supported values.
                            Type:  object
                        Required:
                          driver
                        Type:  object
                      Downward API:
                        Description:  downwardAPI represents downward API about the pod that should populate this volume
                        Properties:
                          Default Mode:
                            Description:  Optional: mode bits to use on created files by default. Must be a
Optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                            Format:  int32
                            Type:    integer
                          Items:
                            Description:  Items is a list of downward API volume file
                            Items:
                              Description:  DownwardAPIVolumeFile represents information to create the file containing the pod field
                              Properties:
                                Field Ref:
                                  Description:  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
                                  Properties:
                                    API Version:
                                      Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                      Type:         string
                                    Field Path:
                                      Description:  Path of the field to select in the specified API version.
                                      Type:         string
                                  Required:
                                    fieldPath
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Mode:
                                  Description:  Optional: mode bits used to set permissions on this file, must be an octal value
between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                  Format:  int32
                                  Type:    integer
                                Path:
                                  Description:  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
                                  Type:         string
                                Resource Field Ref:
                                  Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                                  Properties:
                                    Container Name:
                                      Description:  Container name: required for volumes, optional for env vars
                                      Type:         string
                                    Divisor:
                                      Any Of:
                                        Type:                              integer
                                        Type:                              string
                                      Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                      Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      X - Kubernetes - Int - Or - String:  true
                                    Resource:
                                      Description:  Required: resource to select
                                      Type:         string
                                  Required:
                                    resource
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                              Required:
                                path
                              Type:  object
                            Type:    array
                        Type:        object
                      Empty Dir:
                        Description:  emptyDir represents a temporary directory that shares a pod's lifetime.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                        Properties:
                          Medium:
                            Description:  medium represents what type of storage medium should back this directory.
The default is "" which means to use the node's default medium.
Must be an empty string (default) or Memory.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                            Type:  string
                          Size Limit:
                            Any Of:
                              Type:       integer
                              Type:       string
                            Description:  sizeLimit is the total amount of local storage required for this EmptyDir volume.
The size limit is also applicable for memory medium.
The maximum usage on memory medium EmptyDir would be the minimum value between
the SizeLimit specified here and the sum of memory limits of all containers in a pod.
The default is nil which means that the limit is undefined.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                            Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            X - Kubernetes - Int - Or - String:  true
                        Type:                                    object
                      Ephemeral:
                        Description:  ephemeral represents a volume that is handled by a cluster storage driver.
The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
and deleted when the pod is removed.


Use this if:
a) the volume is only needed while the pod runs,
b) features of normal volumes like restoring from snapshot or capacity
   tracking are needed,
c) the storage driver is specified through a storage class, and
d) the storage driver supports dynamic volume provisioning through
   a PersistentVolumeClaim (see EphemeralVolumeSource for more
   information on the connection between this volume type
   and PersistentVolumeClaim).


Use PersistentVolumeClaim or one of the vendor-specific
APIs for volumes that persist for longer than the lifecycle
of an individual pod.


Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
be used that way - see the documentation of the driver for
more information.


A pod can use both types of ephemeral volumes and
persistent volumes at the same time.
                        Properties:
                          Volume Claim Template:
                            Description:  Will be used to create a stand-alone PVC to provision the volume.
The pod in which this EphemeralVolumeSource is embedded will be the
owner of the PVC, i.e. the PVC will be deleted together with the
pod.  The name of the PVC will be `<pod name>-<volume name>` where
`<volume name>` is the name from the `PodSpec.Volumes` array
entry. Pod validation will reject the pod if the concatenated name
is not valid for a PVC (for example, too long).


An existing PVC with that name that is not owned by the pod
will *not* be used for the pod to avoid using an unrelated
volume by mistake. Starting the pod is then blocked until
the unrelated PVC is removed. If such a pre-created PVC is
meant to be used by the pod, the PVC has to updated with an
owner reference to the pod once the pod exists. Normally
this should not be necessary, but it may be useful when
manually reconstructing a broken cluster.


This field is read-only and no changes will be made by Kubernetes
to the PVC after it has been created.


Required, must not be nil.
                            Properties:
                              Metadata:
                                Description:  May contain labels and annotations that will be copied into the PVC
when creating it. No other fields are allowed and will be rejected during
validation.
                                Type:  object
                              Spec:
                                Description:  The specification for the PersistentVolumeClaim. The entire content is
copied unchanged into the PVC that gets created from this
template. The same fields as in a PersistentVolumeClaim
are also valid here.
                                Properties:
                                  Access Modes:
                                    Description:  accessModes contains the desired access modes the volume should have.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                                    Items:
                                      Type:  string
                                    Type:    array
                                  Data Source:
                                    Description:  dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                                    Properties:
                                      API Group:
                                        Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                        Type:  string
                                      Kind:
                                        Description:  Kind is the type of resource being referenced
                                        Type:         string
                                      Name:
                                        Description:  Name is the name of resource being referenced
                                        Type:         string
                                    Required:
                                      kind
                                      name
                                    Type:                         object
                                    X - Kubernetes - Map - Type:  atomic
                                  Data Source Ref:
                                    Description:  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                    Properties:
                                      API Group:
                                        Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                        Type:  string
                                      Kind:
                                        Description:  Kind is the type of resource being referenced
                                        Type:         string
                                      Name:
                                        Description:  Name is the name of resource being referenced
                                        Type:         string
                                      Namespace:
                                        Description:  Namespace is the namespace of resource being referenced
Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                        Type:  string
                                    Required:
                                      kind
                                      name
                                    Type:  object
                                  Resources:
                                    Description:  resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                                    Properties:
                                      Limits:
                                        Additional Properties:
                                          Any Of:
                                            Type:                              integer
                                            Type:                              string
                                          Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                          X - Kubernetes - Int - Or - String:  true
                                        Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                        Type:  object
                                      Requests:
                                        Additional Properties:
                                          Any Of:
                                            Type:                              integer
                                            Type:                              string
                                          Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                          X - Kubernetes - Int - Or - String:  true
                                        Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                        Type:  object
                                    Type:      object
                                  Selector:
                                    Description:  selector is a label query over volumes to consider for binding.
                                    Properties:
                                      Match Expressions:
                                        Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                        Items:
                                          Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                          Properties:
                                            Key:
                                              Description:  key is the label key that the selector applies to.
                                              Type:         string
                                            Operator:
                                              Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                              Type:  string
                                            Values:
                                              Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                              Items:
                                                Type:  string
                                              Type:    array
                                          Required:
                                            key
                                            operator
                                          Type:  object
                                        Type:    array
                                      Match Labels:
                                        Additional Properties:
                                          Type:       string
                                        Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                        Type:                     object
                                    Type:                         object
                                    X - Kubernetes - Map - Type:  atomic
                                  Storage Class Name:
                                    Description:  storageClassName is the name of the StorageClass required by the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                                    Type:  string
                                  Volume Attributes Class Name:
                                    Description:  volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
If specified, the CSI driver will create or update the volume with the attributes defined
in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
will be set by the persistentvolume controller if it exists.
If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
exists.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
                                    Type:  string
                                  Volume Mode:
                                    Description:  volumeMode defines what type of volume is required by the claim.
Value of Filesystem is implied when not included in claim spec.
                                    Type:  string
                                  Volume Name:
                                    Description:  volumeName is the binding reference to the PersistentVolume backing this claim.
                                    Type:         string
                                Type:             object
                            Required:
                              spec
                            Type:  object
                        Type:      object
                      Fc:
                        Description:  fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
                        Properties:
                          Fs Type:
                            Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
TODO: how do we prevent errors in the filesystem from compromising the machine
                            Type:  string
                          Lun:
                            Description:  lun is Optional: FC target lun number
                            Format:       int32
                            Type:         integer
                          Read Only:
                            Description:  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                            Type:  boolean
                          Target WW Ns:
                            Description:  targetWWNs is Optional: FC target worldwide names (WWNs)
                            Items:
                              Type:  string
                            Type:    array
                          Wwids:
                            Description:  wwids Optional: FC volume world wide identifiers (wwids)
Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
                            Items:
                              Type:  string
                            Type:    array
                        Type:        object
                      Flex Volume:
                        Description:  flexVolume represents a generic volume resource that is
provisioned/attached using an exec based plugin.
                        Properties:
                          Driver:
                            Description:  driver is the name of the driver to use for this volume.
                            Type:         string
                          Fs Type:
                            Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
                            Type:  string
                          Options:
                            Additional Properties:
                              Type:       string
                            Description:  options is Optional: this field holds extra command options if any.
                            Type:         object
                          Read Only:
                            Description:  readOnly is Optional: defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                            Type:  boolean
                          Secret Ref:
                            Description:  secretRef is Optional: secretRef is reference to the secret object containing
sensitive information to pass to the plugin scripts. This may be
empty if no secret object is specified. If the secret object
contains more than one secret, all secrets are passed to the plugin
scripts.
                            Properties:
                              Name:
                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                Type:                     string
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                        Required:
                          driver
                        Type:  object
                      Flocker:
                        Description:  flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
                        Properties:
                          Dataset Name:
                            Description:  datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
should be considered as deprecated
                            Type:  string
                          Dataset UUID:
                            Description:  datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
                            Type:         string
                        Type:             object
                      Gce Persistent Disk:
                        Description:  gcePersistentDisk represents a GCE Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                        Properties:
                          Fs Type:
                            Description:  fsType is filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
TODO: how do we prevent errors in the filesystem from compromising the machine
                            Type:  string
                          Partition:
                            Description:  partition is the partition in the volume that you want to mount.
If omitted, the default is to mount by volume name.
Examples: For volume /dev/sda1, you specify the partition as "1".
Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                            Format:  int32
                            Type:    integer
                          Pd Name:
                            Description:  pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                            Type:  string
                          Read Only:
                            Description:  readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                            Type:  boolean
                        Required:
                          pdName
                        Type:  object
                      Git Repo:
                        Description:  gitRepo represents a git repository at a particular revision.
DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
into the Pod's container.
                        Properties:
                          Directory:
                            Description:  directory is the target directory name.
Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
git repository.  Otherwise, if specified, the volume will contain the git repository in
the subdirectory with the given name.
                            Type:  string
                          Repository:
                            Description:  repository is the URL
                            Type:         string
                          Revision:
                            Description:  revision is the commit hash for the specified revision.
                            Type:         string
                        Required:
                          repository
                        Type:  object
                      Glusterfs:
                        Description:  glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
More info: https://examples.k8s.io/volumes/glusterfs/README.md
                        Properties:
                          Endpoints:
                            Description:  endpoints is the endpoint name that details Glusterfs topology.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                            Type:  string
                          Path:
                            Description:  path is the Glusterfs volume path.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                            Type:  string
                          Read Only:
                            Description:  readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
Defaults to false.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                            Type:  boolean
                        Required:
                          endpoints
                          path
                        Type:  object
                      Host Path:
                        Description:  hostPath represents a pre-existing file or directory on the host
machine that is directly exposed to the container. This is generally
used for system agents or other privileged things that are allowed
to see the host machine. Most containers will NOT need this.
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
---
TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not
mount host directories as read/write.
                        Properties:
                          Path:
                            Description:  path of the directory on the host.
If the path is a symlink, it will follow the link to the real path.
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                            Type:  string
                          Type:
                            Description:  type for HostPath Volume
Defaults to ""
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                            Type:  string
                        Required:
                          path
                        Type:  object
                      Iscsi:
                        Description:  iscsi represents an ISCSI Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://examples.k8s.io/volumes/iscsi/README.md
                        Properties:
                          Chap Auth Discovery:
                            Description:  chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
                            Type:         boolean
                          Chap Auth Session:
                            Description:  chapAuthSession defines whether support iSCSI Session CHAP authentication
                            Type:         boolean
                          Fs Type:
                            Description:  fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
TODO: how do we prevent errors in the filesystem from compromising the machine
                            Type:  string
                          Initiator Name:
                            Description:  initiatorName is the custom iSCSI Initiator Name.
If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
<target portal>:<volume name> will be created for the connection.
                            Type:  string
                          Iqn:
                            Description:  iqn is the target iSCSI Qualified Name.
                            Type:         string
                          Iscsi Interface:
                            Description:  iscsiInterface is the interface Name that uses an iSCSI transport.
Defaults to 'default' (tcp).
                            Type:  string
                          Lun:
                            Description:  lun represents iSCSI Target Lun number.
                            Format:       int32
                            Type:         integer
                          Portals:
                            Description:  portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
is other than default (typically TCP ports 860 and 3260).
                            Items:
                              Type:  string
                            Type:    array
                          Read Only:
                            Description:  readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
                            Type:  boolean
                          Secret Ref:
                            Description:  secretRef is the CHAP Secret for iSCSI target and initiator authentication
                            Properties:
                              Name:
                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                Type:                     string
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Target Portal:
                            Description:  targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
is other than default (typically TCP ports 860 and 3260).
                            Type:  string
                        Required:
                          iqn
                          lun
                          targetPortal
                        Type:  object
                      Nfs:
                        Description:  nfs represents an NFS mount on the host that shares a pod's lifetime
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                        Properties:
                          Path:
                            Description:  path that is exported by the NFS server.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                            Type:  string
                          Read Only:
                            Description:  readOnly here will force the NFS export to be mounted with read-only permissions.
Defaults to false.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                            Type:  boolean
                          Server:
                            Description:  server is the hostname or IP address of the NFS server.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                            Type:  string
                        Required:
                          path
                          server
                        Type:  object
                      Persistent Volume Claim:
                        Description:  persistentVolumeClaimVolumeSource represents a reference to a
PersistentVolumeClaim in the same namespace.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                        Properties:
                          Claim Name:
                            Description:  claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                            Type:  string
                          Read Only:
                            Description:  readOnly Will force the ReadOnly setting in VolumeMounts.
Default false.
                            Type:  boolean
                        Required:
                          claimName
                        Type:  object
                      Photon Persistent Disk:
                        Description:  photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
                        Properties:
                          Fs Type:
                            Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                            Type:  string
                          Pd ID:
                            Description:  pdID is the ID that identifies Photon Controller persistent disk
                            Type:         string
                        Required:
                          pdID
                        Type:  object
                      Portworx Volume:
                        Description:  portworxVolume represents a portworx volume attached and mounted on kubelets host machine
                        Properties:
                          Fs Type:
                            Description:  fSType represents the filesystem type to mount
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
                            Type:  string
                          Read Only:
                            Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                            Type:  boolean
                          Volume ID:
                            Description:  volumeID uniquely identifies a Portworx volume
                            Type:         string
                        Required:
                          volumeID
                        Type:  object
                      Projected:
                        Description:  projected items for all in one resources secrets, configmaps, and downward API
                        Properties:
                          Default Mode:
                            Description:  defaultMode are the mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                            Format:  int32
                            Type:    integer
                          Sources:
                            Description:  sources is the list of volume projections
                            Items:
                              Description:  Projection that may be projected along with other supported volume types
                              Properties:
                                Cluster Trust Bundle:
                                  Description:  ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
of ClusterTrustBundle objects in an auto-updating file.


Alpha, gated by the ClusterTrustBundleProjection feature gate.


ClusterTrustBundle objects can either be selected by name, or by the
combination of signer name and a label selector.


Kubelet performs aggressive normalization of the PEM contents written
into the pod filesystem.  Esoteric PEM features such as inter-block
comments and block headers are stripped.  Certificates are deduplicated.
The ordering of certificates within the file is arbitrary, and Kubelet
may change the order over time.
                                  Properties:
                                    Label Selector:
                                      Description:  Select all ClusterTrustBundles that match this label selector.  Only has
effect if signerName is set.  Mutually-exclusive with name.  If unset,
interpreted as "match nothing".  If set but empty, interpreted as "match
everything".
                                      Properties:
                                        Match Expressions:
                                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          Items:
                                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  key is the label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                Type:  string
                                              Values:
                                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Labels:
                                          Additional Properties:
                                            Type:       string
                                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          Type:                     object
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Name:
                                      Description:  Select a single ClusterTrustBundle by object name.  Mutually-exclusive
with signerName and labelSelector.
                                      Type:  string
                                    Optional:
                                      Description:  If true, don't block pod startup if the referenced ClusterTrustBundle(s)
aren't available.  If using name, then the named ClusterTrustBundle is
allowed not to exist.  If using signerName, then the combination of
signerName and labelSelector is allowed to match zero
ClusterTrustBundles.
                                      Type:  boolean
                                    Path:
                                      Description:  Relative path from the volume root to write the bundle.
                                      Type:         string
                                    Signer Name:
                                      Description:  Select all ClusterTrustBundles that match this signer name.
Mutually-exclusive with name.  The contents of all selected
ClusterTrustBundles will be unified and deduplicated.
                                      Type:  string
                                  Required:
                                    path
                                  Type:  object
                                Config Map:
                                  Description:  configMap information about the configMap data to project
                                  Properties:
                                    Items:
                                      Description:  items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                                      Items:
                                        Description:  Maps a string key to a path within a volume.
                                        Properties:
                                          Key:
                                            Description:  key is the key to project.
                                            Type:         string
                                          Mode:
                                            Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                            Format:  int32
                                            Type:    integer
                                          Path:
                                            Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                            Type:  string
                                        Required:
                                          key
                                          path
                                        Type:  object
                                      Type:    array
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:  string
                                    Optional:
                                      Description:              optional specify whether the ConfigMap or its keys must be defined
                                      Type:                     boolean
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Downward API:
                                  Description:  downwardAPI information about the downwardAPI data to project
                                  Properties:
                                    Items:
                                      Description:  Items is a list of DownwardAPIVolume file
                                      Items:
                                        Description:  DownwardAPIVolumeFile represents information to create the file containing the pod field
                                        Properties:
                                          Field Ref:
                                            Description:  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
                                            Properties:
                                              API Version:
                                                Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                                Type:         string
                                              Field Path:
                                                Description:  Path of the field to select in the specified API version.
                                                Type:         string
                                            Required:
                                              fieldPath
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                          Mode:
                                            Description:  Optional: mode bits used to set permissions on this file, must be an octal value
between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                            Format:  int32
                                            Type:    integer
                                          Path:
                                            Description:  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
                                            Type:         string
                                          Resource Field Ref:
                                            Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                                            Properties:
                                              Container Name:
                                                Description:  Container name: required for volumes, optional for env vars
                                                Type:         string
                                              Divisor:
                                                Any Of:
                                                  Type:                              integer
                                                  Type:                              string
                                                Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                                Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                X - Kubernetes - Int - Or - String:  true
                                              Resource:
                                                Description:  Required: resource to select
                                                Type:         string
                                            Required:
                                              resource
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                        Required:
                                          path
                                        Type:  object
                                      Type:    array
                                  Type:        object
                                Secret:
                                  Description:  secret information about the secret data to project
                                  Properties:
                                    Items:
                                      Description:  items if unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                                      Items:
                                        Description:  Maps a string key to a path within a volume.
                                        Properties:
                                          Key:
                                            Description:  key is the key to project.
                                            Type:         string
                                          Mode:
                                            Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                            Format:  int32
                                            Type:    integer
                                          Path:
                                            Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                            Type:  string
                                        Required:
                                          key
                                          path
                                        Type:  object
                                      Type:    array
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:  string
                                    Optional:
                                      Description:              optional field specify whether the Secret or its key must be defined
                                      Type:                     boolean
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Service Account Token:
                                  Description:  serviceAccountToken is information about the serviceAccountToken data to project
                                  Properties:
                                    Audience:
                                      Description:  audience is the intended audience of the token. A recipient of a token
must identify itself with an identifier specified in the audience of the
token, and otherwise should reject the token. The audience defaults to the
identifier of the apiserver.
                                      Type:  string
                                    Expiration Seconds:
                                      Description:  expirationSeconds is the requested duration of validity of the service
account token. As the token approaches expiration, the kubelet volume
plugin will proactively rotate the service account token. The kubelet will
start trying to rotate the token if the token is older than 80 percent of
its time to live or if the token is older than 24 hours.Defaults to 1 hour
and must be at least 10 minutes.
                                      Format:  int64
                                      Type:    integer
                                    Path:
                                      Description:  path is the path relative to the mount point of the file to project the
token into.
                                      Type:  string
                                  Required:
                                    path
                                  Type:  object
                              Type:      object
                            Type:        array
                        Type:            object
                      Quobyte:
                        Description:  quobyte represents a Quobyte mount on the host that shares a pod's lifetime
                        Properties:
                          Group:
                            Description:  group to map volume access to
Default is no group
                            Type:  string
                          Read Only:
                            Description:  readOnly here will force the Quobyte volume to be mounted with read-only permissions.
Defaults to false.
                            Type:  boolean
                          Registry:
                            Description:  registry represents a single or multiple Quobyte Registry services
specified as a string as host:port pair (multiple entries are separated with commas)
which acts as the central registry for volumes
                            Type:  string
                          Tenant:
                            Description:  tenant owning the given Quobyte volume in the Backend
Used with dynamically provisioned Quobyte volumes, value is set by the plugin
                            Type:  string
                          User:
                            Description:  user to map volume access to
Defaults to serivceaccount user
                            Type:  string
                          Volume:
                            Description:  volume is a string that references an already created Quobyte volume by name.
                            Type:         string
                        Required:
                          registry
                          volume
                        Type:  object
                      Rbd:
                        Description:  rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
More info: https://examples.k8s.io/volumes/rbd/README.md
                        Properties:
                          Fs Type:
                            Description:  fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
TODO: how do we prevent errors in the filesystem from compromising the machine
                            Type:  string
                          Image:
                            Description:  image is the rados image name.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                            Type:  string
                          Keyring:
                            Description:  keyring is the path to key ring for RBDUser.
Default is /etc/ceph/keyring.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                            Type:  string
                          Monitors:
                            Description:  monitors is a collection of Ceph monitors.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                            Items:
                              Type:  string
                            Type:    array
                          Pool:
                            Description:  pool is the rados pool name.
Default is rbd.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                            Type:  string
                          Read Only:
                            Description:  readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                            Type:  boolean
                          Secret Ref:
                            Description:  secretRef is name of the authentication secret for RBDUser. If provided
overrides keyring.
Default is nil.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                            Properties:
                              Name:
                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                Type:                     string
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          User:
                            Description:  user is the rados user name.
Default is admin.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                            Type:  string
                        Required:
                          image
                          monitors
                        Type:  object
                      Scale IO:
                        Description:  scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
                        Properties:
                          Fs Type:
                            Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs".
Default is "xfs".
                            Type:  string
                          Gateway:
                            Description:  gateway is the host address of the ScaleIO API Gateway.
                            Type:         string
                          Protection Domain:
                            Description:  protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
                            Type:         string
                          Read Only:
                            Description:  readOnly Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                            Type:  boolean
                          Secret Ref:
                            Description:  secretRef references to the secret for ScaleIO user and other
sensitive information. If this is not provided, Login operation will fail.
                            Properties:
                              Name:
                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                Type:                     string
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Ssl Enabled:
                            Description:  sslEnabled Flag enable/disable SSL communication with Gateway, default false
                            Type:         boolean
                          Storage Mode:
                            Description:  storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
Default is ThinProvisioned.
                            Type:  string
                          Storage Pool:
                            Description:  storagePool is the ScaleIO Storage Pool associated with the protection domain.
                            Type:         string
                          System:
                            Description:  system is the name of the storage system as configured in ScaleIO.
                            Type:         string
                          Volume Name:
                            Description:  volumeName is the name of a volume already created in the ScaleIO system
that is associated with this volume source.
                            Type:  string
                        Required:
                          gateway
                          secretRef
                          system
                        Type:  object
                      Secret:
                        Description:  secret represents a secret that should populate this volume.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
                        Properties:
                          Default Mode:
                            Description:  defaultMode is Optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values
for mode bits. Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                            Format:  int32
                            Type:    integer
                          Items:
                            Description:  items If unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                            Items:
                              Description:  Maps a string key to a path within a volume.
                              Properties:
                                Key:
                                  Description:  key is the key to project.
                                  Type:         string
                                Mode:
                                  Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                  Format:  int32
                                  Type:    integer
                                Path:
                                  Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                  Type:  string
                              Required:
                                key
                                path
                              Type:  object
                            Type:    array
                          Optional:
                            Description:  optional field specify whether the Secret or its keys must be defined
                            Type:         boolean
                          Secret Name:
                            Description:  secretName is the name of the secret in the pod's namespace to use.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
                            Type:  string
                        Type:      object
                      Storageos:
                        Description:  storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
                        Properties:
                          Fs Type:
                            Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                            Type:  string
                          Read Only:
                            Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                            Type:  boolean
                          Secret Ref:
                            Description:  secretRef specifies the secret to use for obtaining the StorageOS API
credentials.  If not specified, default values will be attempted.
                            Properties:
                              Name:
                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                Type:                     string
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Volume Name:
                            Description:  volumeName is the human-readable name of the StorageOS volume.  Volume
names are only unique within a namespace.
                            Type:  string
                          Volume Namespace:
                            Description:  volumeNamespace specifies the scope of the volume within StorageOS.  If no
namespace is specified then the Pod's namespace will be used.  This allows the
Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
Set VolumeName to any name to override the default behaviour.
Set to "default" if you are not using namespaces within StorageOS.
Namespaces that do not pre-exist within StorageOS will be created.
                            Type:  string
                        Type:      object
                      Vsphere Volume:
                        Description:  vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
                        Properties:
                          Fs Type:
                            Description:  fsType is filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                            Type:  string
                          Storage Policy ID:
                            Description:  storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
                            Type:         string
                          Storage Policy Name:
                            Description:  storagePolicyName is the storage Policy Based Management (SPBM) profile name.
                            Type:         string
                          Volume Path:
                            Description:  volumePath is the path that identifies vSphere volume vmdk
                            Type:         string
                        Required:
                          volumePath
                        Type:  object
                    Type:      object
                Type:          object
              Command:
                Description:  Command to be used in the Container.
                Items:
                  Type:  string
                Type:    array
              Connection:
                Description:  Connection defines templates to configure the general Connection object.
                Properties:
                  Health Check:
                    Description:  HealthCheck to be used in the Connection.
                    Properties:
                      Interval:
                        Description:  Interval used to perform health checks.
                        Type:         string
                      Retry Interval:
                        Description:  RetryInterval is the interval used to perform health check retries.
                        Type:         string
                    Type:             object
                  Params:
                    Additional Properties:
                      Type:       string
                    Description:  Params to be used in the Connection.
                    Type:         object
                  Port:
                    Description:  Port to connect to. If not provided, it defaults to the MariaDB port or to the first MaxScale listener.
                    Format:       int32
                    Type:         integer
                  Secret Name:
                    Description:  SecretName to be used in the Connection.
                    Type:         string
                  Secret Template:
                    Description:  SecretTemplate to be used in the Connection.
                    Properties:
                      Database Key:
                        Description:  DatabaseKey to be used in the Secret.
                        Type:         string
                      Format:
                        Description:  Format to be used in the Secret.
                        Type:         string
                      Host Key:
                        Description:  HostKey to be used in the Secret.
                        Type:         string
                      Key:
                        Description:  Key to be used in the Secret.
                        Type:         string
                      Metadata:
                        Description:  Metadata to be added to the Secret object.
                        Properties:
                          Annotations:
                            Additional Properties:
                              Type:       string
                            Description:  Annotations to be added to children resources.
                            Type:         object
                          Labels:
                            Additional Properties:
                              Type:       string
                            Description:  Labels to be added to children resources.
                            Type:         object
                        Type:             object
                      Password Key:
                        Description:  PasswordKey to be used in the Secret.
                        Type:         string
                      Port Key:
                        Description:  PortKey to be used in the Secret.
                        Type:         string
                      Username Key:
                        Description:  UsernameKey to be used in the Secret.
                        Type:         string
                    Type:             object
                  Service Name:
                    Description:  ServiceName to be used in the Connection.
                    Type:         string
                Type:             object
              Database:
                Description:  Database is the database to be created on bootstrap.
                Type:         string
              Env:
                Description:  Env represents the environment variables to be injected in a container.
                Items:
                  Description:  EnvVar represents an environment variable present in a Container.
                  Properties:
                    Name:
                      Description:  Name of the environment variable. Must be a C_IDENTIFIER.
                      Type:         string
                    Value:
                      Description:  Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".
                      Type:  string
                    Value From:
                      Description:  Source for the environment variable's value. Cannot be used if value is not empty.
                      Properties:
                        Config Map Key Ref:
                          Description:  Selects a key of a ConfigMap.
                          Properties:
                            Key:
                              Description:  The key to select.
                              Type:         string
                            Name:
                              Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                              Type:  string
                            Optional:
                              Description:  Specify whether the ConfigMap or its key must be defined
                              Type:         boolean
                          Required:
                            key
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                        Field Ref:
                          Description:  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                          Properties:
                            API Version:
                              Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                              Type:         string
                            Field Path:
                              Description:  Path of the field to select in the specified API version.
                              Type:         string
                          Required:
                            fieldPath
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                        Resource Field Ref:
                          Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                          Properties:
                            Container Name:
                              Description:  Container name: required for volumes, optional for env vars
                              Type:         string
                            Divisor:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Description:                         Specifies the output format of the exposed resources, defaults to "1"
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Resource:
                              Description:  Required: resource to select
                              Type:         string
                          Required:
                            resource
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                        Secret Key Ref:
                          Description:  Selects a key of a secret in the pod's namespace
                          Properties:
                            Key:
                              Description:  The key of the secret to select from.  Must be a valid secret key.
                              Type:         string
                            Name:
                              Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                              Type:  string
                            Optional:
                              Description:  Specify whether the Secret or its key must be defined
                              Type:         boolean
                          Required:
                            key
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                      Type:                             object
                  Required:
                    name
                  Type:  object
                Type:    array
              Env From:
                Description:  EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
                Items:
                  Description:  EnvFromSource represents the source of a set of ConfigMaps
                  Properties:
                    Config Map Ref:
                      Description:  The ConfigMap to select from
                      Properties:
                        Name:
                          Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                          Type:  string
                        Optional:
                          Description:              Specify whether the ConfigMap must be defined
                          Type:                     boolean
                      Type:                         object
                      X - Kubernetes - Map - Type:  atomic
                    Prefix:
                      Description:  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                      Type:         string
                    Secret Ref:
                      Description:  The Secret to select from
                      Properties:
                        Name:
                          Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                          Type:  string
                        Optional:
                          Description:              Specify whether the Secret must be defined
                          Type:                     boolean
                      Type:                         object
                      X - Kubernetes - Map - Type:  atomic
                  Type:                             object
                Type:                               array
              Galera:
                Description:  Replication configures high availability via Galera.
                Properties:
                  Agent:
                    Description:  GaleraAgent is a sidecar agent that co-operates with mariadb-operator.
                    Properties:
                      Args:
                        Description:  Args to be used in the Container.
                        Items:
                          Type:  string
                        Type:    array
                      Command:
                        Description:  Command to be used in the Container.
                        Items:
                          Type:  string
                        Type:    array
                      Env:
                        Description:  Env represents the environment variables to be injected in a container.
                        Items:
                          Description:  EnvVar represents an environment variable present in a Container.
                          Properties:
                            Name:
                              Description:  Name of the environment variable. Must be a C_IDENTIFIER.
                              Type:         string
                            Value:
                              Description:  Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".
                              Type:  string
                            Value From:
                              Description:  Source for the environment variable's value. Cannot be used if value is not empty.
                              Properties:
                                Config Map Key Ref:
                                  Description:  Selects a key of a ConfigMap.
                                  Properties:
                                    Key:
                                      Description:  The key to select.
                                      Type:         string
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:  string
                                    Optional:
                                      Description:  Specify whether the ConfigMap or its key must be defined
                                      Type:         boolean
                                  Required:
                                    key
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Field Ref:
                                  Description:  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                                  Properties:
                                    API Version:
                                      Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                      Type:         string
                                    Field Path:
                                      Description:  Path of the field to select in the specified API version.
                                      Type:         string
                                  Required:
                                    fieldPath
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Resource Field Ref:
                                  Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                                  Properties:
                                    Container Name:
                                      Description:  Container name: required for volumes, optional for env vars
                                      Type:         string
                                    Divisor:
                                      Any Of:
                                        Type:                              integer
                                        Type:                              string
                                      Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                      Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      X - Kubernetes - Int - Or - String:  true
                                    Resource:
                                      Description:  Required: resource to select
                                      Type:         string
                                  Required:
                                    resource
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Secret Key Ref:
                                  Description:  Selects a key of a secret in the pod's namespace
                                  Properties:
                                    Key:
                                      Description:  The key of the secret to select from.  Must be a valid secret key.
                                      Type:         string
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:  string
                                    Optional:
                                      Description:  Specify whether the Secret or its key must be defined
                                      Type:         boolean
                                  Required:
                                    key
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                              Type:                             object
                          Required:
                            name
                          Type:  object
                        Type:    array
                      Env From:
                        Description:  EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
                        Items:
                          Description:  EnvFromSource represents the source of a set of ConfigMaps
                          Properties:
                            Config Map Ref:
                              Description:  The ConfigMap to select from
                              Properties:
                                Name:
                                  Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                  Type:  string
                                Optional:
                                  Description:              Specify whether the ConfigMap must be defined
                                  Type:                     boolean
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                            Prefix:
                              Description:  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                              Type:         string
                            Secret Ref:
                              Description:  The Secret to select from
                              Properties:
                                Name:
                                  Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                  Type:  string
                                Optional:
                                  Description:              Specify whether the Secret must be defined
                                  Type:                     boolean
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                          Type:                             object
                        Type:                               array
                      Graceful Shutdown Timeout:
                        Description:  GracefulShutdownTimeout is the time we give to the agent container in order to gracefully terminate in-flight requests.
                        Type:         string
                      Image:
                        Description:  Image name to be used by the MariaDB instances. The supported format is `<image>:<tag>`.
                        Type:         string
                      Image Pull Policy:
                        Description:  ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
                        Enum:
                          Always
                          Never
                          IfNotPresent
                        Type:  string
                      Kubernetes Auth:
                        Description:  KubernetesAuth to be used by the agent container
                        Properties:
                          Auth Delegator Role Name:
                            Description:  AuthDelegatorRoleName is the name of the ClusterRoleBinding that is associated with the "system:auth-delegator" ClusterRole.
It is necessary for creating TokenReview objects in order for the agent to validate the service account token.
                            Type:  string
                          Enabled:
                            Description:  Enabled is a flag to enable KubernetesAuth
                            Type:         boolean
                        Type:             object
                      Liveness Probe:
                        Description:  LivenessProbe to be used in the Container.
                        Properties:
                          Exec:
                            Description:  Exec specifies the action to take.
                            Properties:
                              Command:
                                Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                Items:
                                  Type:  string
                                Type:    array
                            Type:        object
                          Failure Threshold:
                            Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Grpc:
                            Description:  GRPC specifies an action involving a GRPC port.
                            Properties:
                              Port:
                                Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                Format:       int32
                                Type:         integer
                              Service:
                                Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                Type:  string
                            Required:
                              port
                            Type:  object
                          Http Get:
                            Description:  HTTPGet specifies the http request to perform.
                            Properties:
                              Host:
                                Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                Type:  string
                              Http Headers:
                                Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                Items:
                                  Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                  Properties:
                                    Name:
                                      Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                      Type:  string
                                    Value:
                                      Description:  The header field value
                                      Type:         string
                                  Required:
                                    name
                                    value
                                  Type:  object
                                Type:    array
                              Path:
                                Description:  Path to access on the HTTP server.
                                Type:         string
                              Port:
                                Any Of:
                                  Type:       integer
                                  Type:       string
                                Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                X - Kubernetes - Int - Or - String:  true
                              Scheme:
                                Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                Type:  string
                            Required:
                              port
                            Type:  object
                          Initial Delay Seconds:
                            Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                            Format:  int32
                            Type:    integer
                          Period Seconds:
                            Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Success Threshold:
                            Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Tcp Socket:
                            Description:  TCPSocket specifies an action involving a TCP port.
                            Properties:
                              Host:
                                Description:  Optional: Host name to connect to, defaults to the pod IP.
                                Type:         string
                              Port:
                                Any Of:
                                  Type:       integer
                                  Type:       string
                                Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                X - Kubernetes - Int - Or - String:  true
                            Required:
                              port
                            Type:  object
                          Termination Grace Period Seconds:
                            Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                            Format:  int64
                            Type:    integer
                          Timeout Seconds:
                            Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                            Format:  int32
                            Type:    integer
                        Type:        object
                      Port:
                        Description:  Port where the agent will be listening for connections.
                        Format:       int32
                        Type:         integer
                      Readiness Probe:
                        Description:  ReadinessProbe to be used in the Container.
                        Properties:
                          Exec:
                            Description:  Exec specifies the action to take.
                            Properties:
                              Command:
                                Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                Items:
                                  Type:  string
                                Type:    array
                            Type:        object
                          Failure Threshold:
                            Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Grpc:
                            Description:  GRPC specifies an action involving a GRPC port.
                            Properties:
                              Port:
                                Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                Format:       int32
                                Type:         integer
                              Service:
                                Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                Type:  string
                            Required:
                              port
                            Type:  object
                          Http Get:
                            Description:  HTTPGet specifies the http request to perform.
                            Properties:
                              Host:
                                Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                Type:  string
                              Http Headers:
                                Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                Items:
                                  Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                  Properties:
                                    Name:
                                      Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                      Type:  string
                                    Value:
                                      Description:  The header field value
                                      Type:         string
                                  Required:
                                    name
                                    value
                                  Type:  object
                                Type:    array
                              Path:
                                Description:  Path to access on the HTTP server.
                                Type:         string
                              Port:
                                Any Of:
                                  Type:       integer
                                  Type:       string
                                Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                X - Kubernetes - Int - Or - String:  true
                              Scheme:
                                Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                Type:  string
                            Required:
                              port
                            Type:  object
                          Initial Delay Seconds:
                            Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                            Format:  int32
                            Type:    integer
                          Period Seconds:
                            Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Success Threshold:
                            Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Tcp Socket:
                            Description:  TCPSocket specifies an action involving a TCP port.
                            Properties:
                              Host:
                                Description:  Optional: Host name to connect to, defaults to the pod IP.
                                Type:         string
                              Port:
                                Any Of:
                                  Type:       integer
                                  Type:       string
                                Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                X - Kubernetes - Int - Or - String:  true
                            Required:
                              port
                            Type:  object
                          Termination Grace Period Seconds:
                            Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                            Format:  int64
                            Type:    integer
                          Timeout Seconds:
                            Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                            Format:  int32
                            Type:    integer
                        Type:        object
                      Resources:
                        Description:  Resouces describes the compute resource requirements.
                        Properties:
                          Claims:
                            Description:  Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.


This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.


This field is immutable. It can only be set for containers.
                            Items:
                              Description:  ResourceClaim references one entry in PodSpec.ResourceClaims.
                              Properties:
                                Name:
                                  Description:  Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container.
                                  Type:  string
                              Required:
                                name
                              Type:  object
                            Type:    array
                            X - Kubernetes - List - Map - Keys:
                              name
                            X - Kubernetes - List - Type:  map
                          Limits:
                            Additional Properties:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            Type:  object
                          Requests:
                            Additional Properties:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            Type:  object
                        Type:      object
                      Security Context:
                        Description:  SecurityContext holds security configuration that will be applied to a container.
                        Properties:
                          Allow Privilege Escalation:
                            Description:  AllowPrivilegeEscalation controls whether a process can gain more
privileges than its parent process. This bool directly controls if
the no_new_privs flag will be set on the container process.
AllowPrivilegeEscalation is true always when the container is:
1) run as Privileged
2) has CAP_SYS_ADMIN
Note that this field cannot be set when spec.os.name is windows.
                            Type:  boolean
                          Capabilities:
                            Description:  The capabilities to add/drop when running containers.
Defaults to the default set of capabilities granted by the container runtime.
Note that this field cannot be set when spec.os.name is windows.
                            Properties:
                              Add:
                                Description:  Added capabilities
                                Items:
                                  Description:  Capability represent POSIX capabilities type
                                  Type:         string
                                Type:           array
                              Drop:
                                Description:  Removed capabilities
                                Items:
                                  Description:  Capability represent POSIX capabilities type
                                  Type:         string
                                Type:           array
                            Type:               object
                          Privileged:
                            Description:  Run container in privileged mode.
Processes in privileged containers are essentially equivalent to root on the host.
Defaults to false.
Note that this field cannot be set when spec.os.name is windows.
                            Type:  boolean
                          Proc Mount:
                            Description:  procMount denotes the type of proc mount to use for the containers.
The default is DefaultProcMount which uses the container runtime defaults for
readonly paths and masked paths.
This requires the ProcMountType feature flag to be enabled.
Note that this field cannot be set when spec.os.name is windows.
                            Type:  string
                          Read Only Root Filesystem:
                            Description:  Whether this container has a read-only root filesystem.
Default is false.
Note that this field cannot be set when spec.os.name is windows.
                            Type:  boolean
                          Run As Group:
                            Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                            Format:  int64
                            Type:    integer
                          Run As Non Root:
                            Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                            Type:  boolean
                          Run As User:
                            Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                            Format:  int64
                            Type:    integer
                          Se Linux Options:
                            Description:  The SELinux context to be applied to the container.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                            Properties:
                              Level:
                                Description:  Level is SELinux level label that applies to the container.
                                Type:         string
                              Role:
                                Description:  Role is a SELinux role label that applies to the container.
                                Type:         string
                              Type:
                                Description:  Type is a SELinux type label that applies to the container.
                                Type:         string
                              User:
                                Description:  User is a SELinux user label that applies to the container.
                                Type:         string
                            Type:             object
                          Seccomp Profile:
                            Description:  The seccomp options to use by this container. If seccomp options are
provided at both the pod & container level, the container options
override the pod options.
Note that this field cannot be set when spec.os.name is windows.
                            Properties:
                              Localhost Profile:
                                Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                                Type:  string
                              Type:
                                Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                                Type:  string
                            Required:
                              type
                            Type:  object
                          Windows Options:
                            Description:  The Windows specific settings applied to all containers.
If unspecified, the options from the PodSecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                            Properties:
                              Gmsa Credential Spec:
                                Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                                Type:  string
                              Gmsa Credential Spec Name:
                                Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                                Type:         string
                              Host Process:
                                Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                                Type:  boolean
                              Run As User Name:
                                Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                Type:  string
                            Type:      object
                        Type:          object
                      Volume Mounts:
                        Description:  VolumeMounts to be used in the Container.
                        Items:
                          Description:  VolumeMount describes a mounting of a Volume within a container.
                          Properties:
                            Mount Path:
                              Description:  Path within the container at which the volume should be mounted.  Must
not contain ':'.
                              Type:  string
                            Mount Propagation:
                              Description:  mountPropagation determines how mounts are propagated from the host
to container and the other way around.
When not set, MountPropagationNone is used.
This field is beta in 1.10.
                              Type:  string
                            Name:
                              Description:  This must match the Name of a Volume.
                              Type:         string
                            Read Only:
                              Description:  Mounted read-only if true, read-write otherwise (false or unspecified).
Defaults to false.
                              Type:  boolean
                            Sub Path:
                              Description:  Path within the volume from which the container's volume should be mounted.
Defaults to "" (volume's root).
                              Type:  string
                            Sub Path Expr:
                              Description:  Expanded path within the volume from which the container's volume should be mounted.
Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
Defaults to "" (volume's root).
SubPathExpr and SubPath are mutually exclusive.
                              Type:  string
                          Required:
                            mountPath
                            name
                          Type:  object
                        Type:    array
                    Type:        object
                  Available When Donor:
                    Description:  AvailableWhenDonor indicates whether a donor node should be responding to queries. It defaults to false.
                    Type:         boolean
                  Config:
                    Description:  GaleraConfig defines storage options for the Galera configuration files.
                    Properties:
                      Reuse Storage Volume:
                        Description:  ReuseStorageVolume indicates that storage volume used by MariaDB should be reused to store the Galera configuration files.
It defaults to false, which implies that a dedicated volume for the Galera configuration files is provisioned.
                        Type:  boolean
                      Volume Claim Template:
                        Description:  VolumeClaimTemplate is a template for the PVC that will contain the Galera configuration files shared between the InitContainer, Agent and MariaDB.
                        Properties:
                          Access Modes:
                            Description:  accessModes contains the desired access modes the volume should have.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                            Items:
                              Type:  string
                            Type:    array
                          Data Source:
                            Description:  dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                            Properties:
                              API Group:
                                Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                Type:  string
                              Kind:
                                Description:  Kind is the type of resource being referenced
                                Type:         string
                              Name:
                                Description:  Name is the name of resource being referenced
                                Type:         string
                            Required:
                              kind
                              name
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Data Source Ref:
                            Description:  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                            Properties:
                              API Group:
                                Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                Type:  string
                              Kind:
                                Description:  Kind is the type of resource being referenced
                                Type:         string
                              Name:
                                Description:  Name is the name of resource being referenced
                                Type:         string
                              Namespace:
                                Description:  Namespace is the namespace of resource being referenced
Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                Type:  string
                            Required:
                              kind
                              name
                            Type:  object
                          Metadata:
                            Description:  Metadata to be added to the PVC metadata.
                            Properties:
                              Annotations:
                                Additional Properties:
                                  Type:       string
                                Description:  Annotations to be added to children resources.
                                Type:         object
                              Labels:
                                Additional Properties:
                                  Type:       string
                                Description:  Labels to be added to children resources.
                                Type:         object
                            Type:             object
                          Resources:
                            Description:  resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                            Properties:
                              Limits:
                                Additional Properties:
                                  Any Of:
                                    Type:                              integer
                                    Type:                              string
                                  Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  X - Kubernetes - Int - Or - String:  true
                                Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                Type:  object
                              Requests:
                                Additional Properties:
                                  Any Of:
                                    Type:                              integer
                                    Type:                              string
                                  Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  X - Kubernetes - Int - Or - String:  true
                                Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                Type:  object
                            Type:      object
                          Selector:
                            Description:  selector is a label query over volumes to consider for binding.
                            Properties:
                              Match Expressions:
                                Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                Items:
                                  Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                  Properties:
                                    Key:
                                      Description:  key is the label key that the selector applies to.
                                      Type:         string
                                    Operator:
                                      Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                      Type:  string
                                    Values:
                                      Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                      Items:
                                        Type:  string
                                      Type:    array
                                  Required:
                                    key
                                    operator
                                  Type:  object
                                Type:    array
                              Match Labels:
                                Additional Properties:
                                  Type:       string
                                Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                Type:                     object
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Storage Class Name:
                            Description:  storageClassName is the name of the StorageClass required by the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                            Type:  string
                          Volume Attributes Class Name:
                            Description:  volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
If specified, the CSI driver will create or update the volume with the attributes defined
in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
will be set by the persistentvolume controller if it exists.
If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
exists.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
                            Type:  string
                          Volume Mode:
                            Description:  volumeMode defines what type of volume is required by the claim.
Value of Filesystem is implied when not included in claim spec.
                            Type:  string
                          Volume Name:
                            Description:  volumeName is the binding reference to the PersistentVolume backing this claim.
                            Type:         string
                        Type:             object
                    Type:                 object
                  Enabled:
                    Description:  Enabled is a flag to enable Galera.
                    Type:         boolean
                  Galera Lib Path:
                    Description:  GaleraLibPath is a path inside the MariaDB image to the wsrep provider plugin. It is defaulted if not provided.
More info: https://galeracluster.com/library/documentation/mysql-wsrep-options.html#wsrep-provider.
                    Type:  string
                  Init Container:
                    Description:  InitContainer is an init container that co-operates with mariadb-operator.
                    Properties:
                      Args:
                        Description:  Args to be used in the Container.
                        Items:
                          Type:  string
                        Type:    array
                      Command:
                        Description:  Command to be used in the Container.
                        Items:
                          Type:  string
                        Type:    array
                      Env:
                        Description:  Env represents the environment variables to be injected in a container.
                        Items:
                          Description:  EnvVar represents an environment variable present in a Container.
                          Properties:
                            Name:
                              Description:  Name of the environment variable. Must be a C_IDENTIFIER.
                              Type:         string
                            Value:
                              Description:  Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".
                              Type:  string
                            Value From:
                              Description:  Source for the environment variable's value. Cannot be used if value is not empty.
                              Properties:
                                Config Map Key Ref:
                                  Description:  Selects a key of a ConfigMap.
                                  Properties:
                                    Key:
                                      Description:  The key to select.
                                      Type:         string
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:  string
                                    Optional:
                                      Description:  Specify whether the ConfigMap or its key must be defined
                                      Type:         boolean
                                  Required:
                                    key
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Field Ref:
                                  Description:  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                                  Properties:
                                    API Version:
                                      Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                      Type:         string
                                    Field Path:
                                      Description:  Path of the field to select in the specified API version.
                                      Type:         string
                                  Required:
                                    fieldPath
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Resource Field Ref:
                                  Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                                  Properties:
                                    Container Name:
                                      Description:  Container name: required for volumes, optional for env vars
                                      Type:         string
                                    Divisor:
                                      Any Of:
                                        Type:                              integer
                                        Type:                              string
                                      Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                      Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      X - Kubernetes - Int - Or - String:  true
                                    Resource:
                                      Description:  Required: resource to select
                                      Type:         string
                                  Required:
                                    resource
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Secret Key Ref:
                                  Description:  Selects a key of a secret in the pod's namespace
                                  Properties:
                                    Key:
                                      Description:  The key of the secret to select from.  Must be a valid secret key.
                                      Type:         string
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:  string
                                    Optional:
                                      Description:  Specify whether the Secret or its key must be defined
                                      Type:         boolean
                                  Required:
                                    key
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                              Type:                             object
                          Required:
                            name
                          Type:  object
                        Type:    array
                      Env From:
                        Description:  EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
                        Items:
                          Description:  EnvFromSource represents the source of a set of ConfigMaps
                          Properties:
                            Config Map Ref:
                              Description:  The ConfigMap to select from
                              Properties:
                                Name:
                                  Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                  Type:  string
                                Optional:
                                  Description:              Specify whether the ConfigMap must be defined
                                  Type:                     boolean
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                            Prefix:
                              Description:  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                              Type:         string
                            Secret Ref:
                              Description:  The Secret to select from
                              Properties:
                                Name:
                                  Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                  Type:  string
                                Optional:
                                  Description:              Specify whether the Secret must be defined
                                  Type:                     boolean
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                          Type:                             object
                        Type:                               array
                      Image:
                        Description:  Image name to be used by the MariaDB instances. The supported format is `<image>:<tag>`.
                        Type:         string
                      Image Pull Policy:
                        Description:  ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
                        Enum:
                          Always
                          Never
                          IfNotPresent
                        Type:  string
                      Liveness Probe:
                        Description:  LivenessProbe to be used in the Container.
                        Properties:
                          Exec:
                            Description:  Exec specifies the action to take.
                            Properties:
                              Command:
                                Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                Items:
                                  Type:  string
                                Type:    array
                            Type:        object
                          Failure Threshold:
                            Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Grpc:
                            Description:  GRPC specifies an action involving a GRPC port.
                            Properties:
                              Port:
                                Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                Format:       int32
                                Type:         integer
                              Service:
                                Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                Type:  string
                            Required:
                              port
                            Type:  object
                          Http Get:
                            Description:  HTTPGet specifies the http request to perform.
                            Properties:
                              Host:
                                Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                Type:  string
                              Http Headers:
                                Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                Items:
                                  Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                  Properties:
                                    Name:
                                      Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                      Type:  string
                                    Value:
                                      Description:  The header field value
                                      Type:         string
                                  Required:
                                    name
                                    value
                                  Type:  object
                                Type:    array
                              Path:
                                Description:  Path to access on the HTTP server.
                                Type:         string
                              Port:
                                Any Of:
                                  Type:       integer
                                  Type:       string
                                Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                X - Kubernetes - Int - Or - String:  true
                              Scheme:
                                Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                Type:  string
                            Required:
                              port
                            Type:  object
                          Initial Delay Seconds:
                            Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                            Format:  int32
                            Type:    integer
                          Period Seconds:
                            Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Success Threshold:
                            Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Tcp Socket:
                            Description:  TCPSocket specifies an action involving a TCP port.
                            Properties:
                              Host:
                                Description:  Optional: Host name to connect to, defaults to the pod IP.
                                Type:         string
                              Port:
                                Any Of:
                                  Type:       integer
                                  Type:       string
                                Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                X - Kubernetes - Int - Or - String:  true
                            Required:
                              port
                            Type:  object
                          Termination Grace Period Seconds:
                            Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                            Format:  int64
                            Type:    integer
                          Timeout Seconds:
                            Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                            Format:  int32
                            Type:    integer
                        Type:        object
                      Readiness Probe:
                        Description:  ReadinessProbe to be used in the Container.
                        Properties:
                          Exec:
                            Description:  Exec specifies the action to take.
                            Properties:
                              Command:
                                Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                Items:
                                  Type:  string
                                Type:    array
                            Type:        object
                          Failure Threshold:
                            Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Grpc:
                            Description:  GRPC specifies an action involving a GRPC port.
                            Properties:
                              Port:
                                Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                Format:       int32
                                Type:         integer
                              Service:
                                Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                Type:  string
                            Required:
                              port
                            Type:  object
                          Http Get:
                            Description:  HTTPGet specifies the http request to perform.
                            Properties:
                              Host:
                                Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                Type:  string
                              Http Headers:
                                Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                Items:
                                  Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                  Properties:
                                    Name:
                                      Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                      Type:  string
                                    Value:
                                      Description:  The header field value
                                      Type:         string
                                  Required:
                                    name
                                    value
                                  Type:  object
                                Type:    array
                              Path:
                                Description:  Path to access on the HTTP server.
                                Type:         string
                              Port:
                                Any Of:
                                  Type:       integer
                                  Type:       string
                                Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                X - Kubernetes - Int - Or - String:  true
                              Scheme:
                                Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                Type:  string
                            Required:
                              port
                            Type:  object
                          Initial Delay Seconds:
                            Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                            Format:  int32
                            Type:    integer
                          Period Seconds:
                            Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Success Threshold:
                            Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Tcp Socket:
                            Description:  TCPSocket specifies an action involving a TCP port.
                            Properties:
                              Host:
                                Description:  Optional: Host name to connect to, defaults to the pod IP.
                                Type:         string
                              Port:
                                Any Of:
                                  Type:       integer
                                  Type:       string
                                Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                X - Kubernetes - Int - Or - String:  true
                            Required:
                              port
                            Type:  object
                          Termination Grace Period Seconds:
                            Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                            Format:  int64
                            Type:    integer
                          Timeout Seconds:
                            Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                            Format:  int32
                            Type:    integer
                        Type:        object
                      Resources:
                        Description:  Resouces describes the compute resource requirements.
                        Properties:
                          Claims:
                            Description:  Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.


This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.


This field is immutable. It can only be set for containers.
                            Items:
                              Description:  ResourceClaim references one entry in PodSpec.ResourceClaims.
                              Properties:
                                Name:
                                  Description:  Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container.
                                  Type:  string
                              Required:
                                name
                              Type:  object
                            Type:    array
                            X - Kubernetes - List - Map - Keys:
                              name
                            X - Kubernetes - List - Type:  map
                          Limits:
                            Additional Properties:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            Type:  object
                          Requests:
                            Additional Properties:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            Type:  object
                        Type:      object
                      Security Context:
                        Description:  SecurityContext holds security configuration that will be applied to a container.
                        Properties:
                          Allow Privilege Escalation:
                            Description:  AllowPrivilegeEscalation controls whether a process can gain more
privileges than its parent process. This bool directly controls if
the no_new_privs flag will be set on the container process.
AllowPrivilegeEscalation is true always when the container is:
1) run as Privileged
2) has CAP_SYS_ADMIN
Note that this field cannot be set when spec.os.name is windows.
                            Type:  boolean
                          Capabilities:
                            Description:  The capabilities to add/drop when running containers.
Defaults to the default set of capabilities granted by the container runtime.
Note that this field cannot be set when spec.os.name is windows.
                            Properties:
                              Add:
                                Description:  Added capabilities
                                Items:
                                  Description:  Capability represent POSIX capabilities type
                                  Type:         string
                                Type:           array
                              Drop:
                                Description:  Removed capabilities
                                Items:
                                  Description:  Capability represent POSIX capabilities type
                                  Type:         string
                                Type:           array
                            Type:               object
                          Privileged:
                            Description:  Run container in privileged mode.
Processes in privileged containers are essentially equivalent to root on the host.
Defaults to false.
Note that this field cannot be set when spec.os.name is windows.
                            Type:  boolean
                          Proc Mount:
                            Description:  procMount denotes the type of proc mount to use for the containers.
The default is DefaultProcMount which uses the container runtime defaults for
readonly paths and masked paths.
This requires the ProcMountType feature flag to be enabled.
Note that this field cannot be set when spec.os.name is windows.
                            Type:  string
                          Read Only Root Filesystem:
                            Description:  Whether this container has a read-only root filesystem.
Default is false.
Note that this field cannot be set when spec.os.name is windows.
                            Type:  boolean
                          Run As Group:
                            Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                            Format:  int64
                            Type:    integer
                          Run As Non Root:
                            Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                            Type:  boolean
                          Run As User:
                            Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                            Format:  int64
                            Type:    integer
                          Se Linux Options:
                            Description:  The SELinux context to be applied to the container.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                            Properties:
                              Level:
                                Description:  Level is SELinux level label that applies to the container.
                                Type:         string
                              Role:
                                Description:  Role is a SELinux role label that applies to the container.
                                Type:         string
                              Type:
                                Description:  Type is a SELinux type label that applies to the container.
                                Type:         string
                              User:
                                Description:  User is a SELinux user label that applies to the container.
                                Type:         string
                            Type:             object
                          Seccomp Profile:
                            Description:  The seccomp options to use by this container. If seccomp options are
provided at both the pod & container level, the container options
override the pod options.
Note that this field cannot be set when spec.os.name is windows.
                            Properties:
                              Localhost Profile:
                                Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                                Type:  string
                              Type:
                                Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                                Type:  string
                            Required:
                              type
                            Type:  object
                          Windows Options:
                            Description:  The Windows specific settings applied to all containers.
If unspecified, the options from the PodSecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                            Properties:
                              Gmsa Credential Spec:
                                Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                                Type:  string
                              Gmsa Credential Spec Name:
                                Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                                Type:         string
                              Host Process:
                                Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                                Type:  boolean
                              Run As User Name:
                                Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                Type:  string
                            Type:      object
                        Type:          object
                      Volume Mounts:
                        Description:  VolumeMounts to be used in the Container.
                        Items:
                          Description:  VolumeMount describes a mounting of a Volume within a container.
                          Properties:
                            Mount Path:
                              Description:  Path within the container at which the volume should be mounted.  Must
not contain ':'.
                              Type:  string
                            Mount Propagation:
                              Description:  mountPropagation determines how mounts are propagated from the host
to container and the other way around.
When not set, MountPropagationNone is used.
This field is beta in 1.10.
                              Type:  string
                            Name:
                              Description:  This must match the Name of a Volume.
                              Type:         string
                            Read Only:
                              Description:  Mounted read-only if true, read-write otherwise (false or unspecified).
Defaults to false.
                              Type:  boolean
                            Sub Path:
                              Description:  Path within the volume from which the container's volume should be mounted.
Defaults to "" (volume's root).
                              Type:  string
                            Sub Path Expr:
                              Description:  Expanded path within the volume from which the container's volume should be mounted.
Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
Defaults to "" (volume's root).
SubPathExpr and SubPath are mutually exclusive.
                              Type:  string
                          Required:
                            mountPath
                            name
                          Type:  object
                        Type:    array
                    Required:
                      image
                    Type:  object
                  Init Job:
                    Description:  InitJob defines additional properties for the Job used to perform the initialization.
                    Properties:
                      Affinity:
                        Description:  Affinity to be used in the Pod.
                        Properties:
                          Anti Affinity Enabled:
                            Description:  AntiAffinityEnabled configures PodAntiAffinity so each Pod is scheduled in a different Node, enabling HA.
Make sure you have at least as many Nodes available as the replicas to not end up with unscheduled Pods.
                            Type:  boolean
                          Node Affinity:
                            Description:  Describes node affinity scheduling rules for the pod.
                            Properties:
                              Preferred During Scheduling Ignored During Execution:
                                Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node matches the corresponding matchExpressions; the
node(s) with the highest sum are the most preferred.
                                Items:
                                  Description:  An empty preferred scheduling term matches all objects with implicit weight 0
(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                                  Properties:
                                    Preference:
                                      Description:  A node selector term, associated with the corresponding weight.
                                      Properties:
                                        Match Expressions:
                                          Description:  A list of node selector requirements by node's labels.
                                          Items:
                                            Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  The label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                Type:  string
                                              Values:
                                                Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Fields:
                                          Description:  A list of node selector requirements by node's fields.
                                          Items:
                                            Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  The label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                Type:  string
                                              Values:
                                                Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:                   object
                                          Type:                     array
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Weight:
                                      Description:  Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                                      Format:       int32
                                      Type:         integer
                                  Required:
                                    preference
                                    weight
                                  Type:  object
                                Type:    array
                              Required During Scheduling Ignored During Execution:
                                Description:  If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to an update), the system
may or may not try to eventually evict the pod from its node.
                                Properties:
                                  Node Selector Terms:
                                    Description:  Required. A list of node selector terms. The terms are ORed.
                                    Items:
                                      Description:  A null or empty node selector term matches no objects. The requirements of
them are ANDed.
The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                                      Properties:
                                        Match Expressions:
                                          Description:  A list of node selector requirements by node's labels.
                                          Items:
                                            Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  The label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                Type:  string
                                              Values:
                                                Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Fields:
                                          Description:  A list of node selector requirements by node's fields.
                                          Items:
                                            Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  The label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                Type:  string
                                              Values:
                                                Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:                   object
                                          Type:                     array
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Type:                           array
                                Required:
                                  nodeSelectorTerms
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                            Type:                             object
                          Pod Affinity:
                            Description:  Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                            Properties:
                              Preferred During Scheduling Ignored During Execution:
                                Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
                                Items:
                                  Description:  The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                  Properties:
                                    Pod Affinity Term:
                                      Description:  Required. A pod affinity term, associated with the corresponding weight.
                                      Properties:
                                        Label Selector:
                                          Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Match Label Keys:
                                          Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Mismatch Label Keys:
                                          Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Namespace Selector:
                                          Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Namespaces:
                                          Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                          Items:
                                            Type:  string
                                          Type:    array
                                        Topology Key:
                                          Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                          Type:  string
                                      Required:
                                        topologyKey
                                      Type:  object
                                    Weight:
                                      Description:  weight associated with matching the corresponding podAffinityTerm,
in the range 1-100.
                                      Format:  int32
                                      Type:    integer
                                  Required:
                                    podAffinityTerm
                                    weight
                                  Type:  object
                                Type:    array
                              Required During Scheduling Ignored During Execution:
                                Description:  If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                Items:
                                  Description:  Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
                                  Properties:
                                    Label Selector:
                                      Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                      Properties:
                                        Match Expressions:
                                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          Items:
                                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  key is the label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                Type:  string
                                              Values:
                                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Labels:
                                          Additional Properties:
                                            Type:       string
                                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          Type:                     object
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Match Label Keys:
                                      Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                      Items:
                                        Type:                        string
                                      Type:                          array
                                      X - Kubernetes - List - Type:  atomic
                                    Mismatch Label Keys:
                                      Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                      Items:
                                        Type:                        string
                                      Type:                          array
                                      X - Kubernetes - List - Type:  atomic
                                    Namespace Selector:
                                      Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                      Properties:
                                        Match Expressions:
                                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          Items:
                                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  key is the label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                Type:  string
                                              Values:
                                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Labels:
                                          Additional Properties:
                                            Type:       string
                                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          Type:                     object
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Namespaces:
                                      Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                      Items:
                                        Type:  string
                                      Type:    array
                                    Topology Key:
                                      Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                      Type:  string
                                  Required:
                                    topologyKey
                                  Type:  object
                                Type:    array
                            Type:        object
                          Pod Anti Affinity:
                            Description:  Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                            Properties:
                              Preferred During Scheduling Ignored During Execution:
                                Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the anti-affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling anti-affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
                                Items:
                                  Description:  The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                  Properties:
                                    Pod Affinity Term:
                                      Description:  Required. A pod affinity term, associated with the corresponding weight.
                                      Properties:
                                        Label Selector:
                                          Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Match Label Keys:
                                          Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Mismatch Label Keys:
                                          Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Namespace Selector:
                                          Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Namespaces:
                                          Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                          Items:
                                            Type:  string
                                          Type:    array
                                        Topology Key:
                                          Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                          Type:  string
                                      Required:
                                        topologyKey
                                      Type:  object
                                    Weight:
                                      Description:  weight associated with matching the corresponding podAffinityTerm,
in the range 1-100.
                                      Format:  int32
                                      Type:    integer
                                  Required:
                                    podAffinityTerm
                                    weight
                                  Type:  object
                                Type:    array
                              Required During Scheduling Ignored During Execution:
                                Description:  If the anti-affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the anti-affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                Items:
                                  Description:  Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
                                  Properties:
                                    Label Selector:
                                      Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                      Properties:
                                        Match Expressions:
                                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          Items:
                                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  key is the label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                Type:  string
                                              Values:
                                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Labels:
                                          Additional Properties:
                                            Type:       string
                                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          Type:                     object
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Match Label Keys:
                                      Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                      Items:
                                        Type:                        string
                                      Type:                          array
                                      X - Kubernetes - List - Type:  atomic
                                    Mismatch Label Keys:
                                      Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                      Items:
                                        Type:                        string
                                      Type:                          array
                                      X - Kubernetes - List - Type:  atomic
                                    Namespace Selector:
                                      Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                      Properties:
                                        Match Expressions:
                                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          Items:
                                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  key is the label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                Type:  string
                                              Values:
                                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Labels:
                                          Additional Properties:
                                            Type:       string
                                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          Type:                     object
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Namespaces:
                                      Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                      Items:
                                        Type:  string
                                      Type:    array
                                    Topology Key:
                                      Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                      Type:  string
                                  Required:
                                    topologyKey
                                  Type:  object
                                Type:    array
                            Type:        object
                        Type:            object
                      Args:
                        Description:  Args to be used in the Container.
                        Items:
                          Type:  string
                        Type:    array
                      Metadata:
                        Description:  Metadata defines additional metadata for the bootstrap Jobs.
                        Properties:
                          Annotations:
                            Additional Properties:
                              Type:       string
                            Description:  Annotations to be added to children resources.
                            Type:         object
                          Labels:
                            Additional Properties:
                              Type:       string
                            Description:  Labels to be added to children resources.
                            Type:         object
                        Type:             object
                      Resources:
                        Description:  Resouces describes the compute resource requirements.
                        Properties:
                          Claims:
                            Description:  Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.


This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.


This field is immutable. It can only be set for containers.
                            Items:
                              Description:  ResourceClaim references one entry in PodSpec.ResourceClaims.
                              Properties:
                                Name:
                                  Description:  Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container.
                                  Type:  string
                              Required:
                                name
                              Type:  object
                            Type:    array
                            X - Kubernetes - List - Map - Keys:
                              name
                            X - Kubernetes - List - Type:  map
                          Limits:
                            Additional Properties:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            Type:  object
                          Requests:
                            Additional Properties:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            Type:  object
                        Type:      object
                    Type:          object
                  Primary:
                    Description:  Primary is the Galera configuration for the primary node.
                    Properties:
                      Automatic Failover:
                        Description:  AutomaticFailover indicates whether the operator should automatically update PodIndex to perform an automatic primary failover.
                        Type:         boolean
                      Pod Index:
                        Description:  PodIndex is the StatefulSet index of the primary node. The user may change this field to perform a manual switchover.
                        Type:         integer
                    Type:             object
                  Provider Options:
                    Additional Properties:
                      Type:       string
                    Description:  ProviderOptions is map of Galera configuration parameters.
More info: https://mariadb.com/kb/en/galera-cluster-system-variables/#wsrep_provider_options.
                    Type:  object
                  Recovery:
                    Description:  GaleraRecovery is the recovery process performed by the operator whenever the Galera cluster is not healthy.
More info: https://galeracluster.com/library/documentation/crash-recovery.html.
                    Properties:
                      Cluster Bootstrap Timeout:
                        Description:  ClusterBootstrapTimeout is the time limit for bootstrapping a cluster.
Once this timeout is reached, the Galera recovery state is reset and a new cluster bootstrap will be attempted.
                        Type:  string
                      Cluster Healthy Timeout:
                        Description:  ClusterHealthyTimeout represents the duration at which a Galera cluster, that consistently failed health checks,
is considered unhealthy, and consequently the Galera recovery process will be initiated by the operator.
                        Type:  string
                      Cluster Monitor Interval:
                        Description:  ClusterMonitorInterval represents the interval used to monitor the Galera cluster health.
                        Type:         string
                      Enabled:
                        Description:  Enabled is a flag to enable GaleraRecovery.
                        Type:         boolean
                      Min Cluster Size:
                        Any Of:
                          Type:       integer
                          Type:       string
                        Description:  MinClusterSize is the minimum number of replicas to consider the cluster healthy. It can be either a number of replicas (3) or a percentage (50%).
If Galera consistently reports less replicas than this value for the given 'ClusterHealthyTimeout' interval, a cluster recovery is iniated.
It defaults to '50%' of the replicas specified by the MariaDB object.
                        X - Kubernetes - Int - Or - String:  true
                      Pod Recovery Timeout:
                        Description:  PodRecoveryTimeout is the time limit for recevorying the sequence of a Pod during the cluster recovery.
Once this timeout is reached, the Pod is restarted.
                        Type:  string
                      Pod Sync Timeout:
                        Description:  PodSyncTimeout is the time limit for a Pod to join the cluster after having performed a cluster bootstrap during the cluster recovery.
Once this timeout is reached, the Pod is restarted.
                        Type:  string
                    Type:      object
                  Replica Threads:
                    Description:  ReplicaThreads is the number of replica threads used to apply Galera write sets in parallel.
More info: https://mariadb.com/kb/en/galera-cluster-system-variables/#wsrep_slave_threads.
                    Type:  integer
                  Sst:
                    Description:  SST is the Snapshot State Transfer used when new Pods join the cluster.
More info: https://galeracluster.com/library/documentation/sst.html.
                    Enum:
                      rsync
                      mariabackup
                      mysqldump
                    Type:  string
                Type:      object
              Image:
                Description:  Image name to be used by the MariaDB instances. The supported format is `<image>:<tag>`.
Only MariaDB official images are supported.
                Type:  string
              Image Pull Policy:
                Description:  ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
                Enum:
                  Always
                  Never
                  IfNotPresent
                Type:  string
              Image Pull Secrets:
                Description:  ImagePullSecrets is the list of pull Secrets to be used to pull the image.
                Items:
                  Description:  LocalObjectReference contains enough information to let you locate the
referenced object inside the same namespace.
                  Properties:
                    Name:
                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                      Type:                     string
                  Type:                         object
                  X - Kubernetes - Map - Type:  atomic
                Type:                           array
              Inherit Metadata:
                Description:  InheritMetadata defines the metadata to be inherited by children resources.
                Properties:
                  Annotations:
                    Additional Properties:
                      Type:       string
                    Description:  Annotations to be added to children resources.
                    Type:         object
                  Labels:
                    Additional Properties:
                      Type:       string
                    Description:  Labels to be added to children resources.
                    Type:         object
                Type:             object
              Init Containers:
                Description:  InitContainers to be used in the Pod.
                Items:
                  Description:  Container object definition.
                  Properties:
                    Args:
                      Description:  Args to be used in the Container.
                      Items:
                        Type:  string
                      Type:    array
                    Command:
                      Description:  Command to be used in the Container.
                      Items:
                        Type:  string
                      Type:    array
                    Env:
                      Description:  Env represents the environment variables to be injected in a container.
                      Items:
                        Description:  EnvVar represents an environment variable present in a Container.
                        Properties:
                          Name:
                            Description:  Name of the environment variable. Must be a C_IDENTIFIER.
                            Type:         string
                          Value:
                            Description:  Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".
                            Type:  string
                          Value From:
                            Description:  Source for the environment variable's value. Cannot be used if value is not empty.
                            Properties:
                              Config Map Key Ref:
                                Description:  Selects a key of a ConfigMap.
                                Properties:
                                  Key:
                                    Description:  The key to select.
                                    Type:         string
                                  Name:
                                    Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                    Type:  string
                                  Optional:
                                    Description:  Specify whether the ConfigMap or its key must be defined
                                    Type:         boolean
                                Required:
                                  key
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                              Field Ref:
                                Description:  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                                Properties:
                                  API Version:
                                    Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                    Type:         string
                                  Field Path:
                                    Description:  Path of the field to select in the specified API version.
                                    Type:         string
                                Required:
                                  fieldPath
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                              Resource Field Ref:
                                Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                                Properties:
                                  Container Name:
                                    Description:  Container name: required for volumes, optional for env vars
                                    Type:         string
                                  Divisor:
                                    Any Of:
                                      Type:                              integer
                                      Type:                              string
                                    Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                    Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    X - Kubernetes - Int - Or - String:  true
                                  Resource:
                                    Description:  Required: resource to select
                                    Type:         string
                                Required:
                                  resource
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                              Secret Key Ref:
                                Description:  Selects a key of a secret in the pod's namespace
                                Properties:
                                  Key:
                                    Description:  The key of the secret to select from.  Must be a valid secret key.
                                    Type:         string
                                  Name:
                                    Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                    Type:  string
                                  Optional:
                                    Description:  Specify whether the Secret or its key must be defined
                                    Type:         boolean
                                Required:
                                  key
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                            Type:                             object
                        Required:
                          name
                        Type:  object
                      Type:    array
                    Env From:
                      Description:  EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
                      Items:
                        Description:  EnvFromSource represents the source of a set of ConfigMaps
                        Properties:
                          Config Map Ref:
                            Description:  The ConfigMap to select from
                            Properties:
                              Name:
                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                Type:  string
                              Optional:
                                Description:              Specify whether the ConfigMap must be defined
                                Type:                     boolean
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Prefix:
                            Description:  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                            Type:         string
                          Secret Ref:
                            Description:  The Secret to select from
                            Properties:
                              Name:
                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                Type:  string
                              Optional:
                                Description:              Specify whether the Secret must be defined
                                Type:                     boolean
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                        Type:                             object
                      Type:                               array
                    Image:
                      Description:  Image name to be used by the MariaDB instances. The supported format is `<image>:<tag>`.
                      Type:         string
                    Image Pull Policy:
                      Description:  ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
                      Enum:
                        Always
                        Never
                        IfNotPresent
                      Type:  string
                    Liveness Probe:
                      Description:  LivenessProbe to be used in the Container.
                      Properties:
                        Exec:
                          Description:  Exec specifies the action to take.
                          Properties:
                            Command:
                              Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                              Items:
                                Type:  string
                              Type:    array
                          Type:        object
                        Failure Threshold:
                          Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                          Format:  int32
                          Type:    integer
                        Grpc:
                          Description:  GRPC specifies an action involving a GRPC port.
                          Properties:
                            Port:
                              Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                              Format:       int32
                              Type:         integer
                            Service:
                              Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                              Type:  string
                          Required:
                            port
                          Type:  object
                        Http Get:
                          Description:  HTTPGet specifies the http request to perform.
                          Properties:
                            Host:
                              Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                              Type:  string
                            Http Headers:
                              Description:  Custom headers to set in the request. HTTP allows repeated headers.
                              Items:
                                Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                Properties:
                                  Name:
                                    Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                    Type:  string
                                  Value:
                                    Description:  The header field value
                                    Type:         string
                                Required:
                                  name
                                  value
                                Type:  object
                              Type:    array
                            Path:
                              Description:  Path to access on the HTTP server.
                              Type:         string
                            Port:
                              Any Of:
                                Type:       integer
                                Type:       string
                              Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                              X - Kubernetes - Int - Or - String:  true
                            Scheme:
                              Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                              Type:  string
                          Required:
                            port
                          Type:  object
                        Initial Delay Seconds:
                          Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                          Format:  int32
                          Type:    integer
                        Period Seconds:
                          Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                          Format:  int32
                          Type:    integer
                        Success Threshold:
                          Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                          Format:  int32
                          Type:    integer
                        Tcp Socket:
                          Description:  TCPSocket specifies an action involving a TCP port.
                          Properties:
                            Host:
                              Description:  Optional: Host name to connect to, defaults to the pod IP.
                              Type:         string
                            Port:
                              Any Of:
                                Type:       integer
                                Type:       string
                              Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                              X - Kubernetes - Int - Or - String:  true
                          Required:
                            port
                          Type:  object
                        Termination Grace Period Seconds:
                          Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                          Format:  int64
                          Type:    integer
                        Timeout Seconds:
                          Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                          Format:  int32
                          Type:    integer
                      Type:        object
                    Readiness Probe:
                      Description:  ReadinessProbe to be used in the Container.
                      Properties:
                        Exec:
                          Description:  Exec specifies the action to take.
                          Properties:
                            Command:
                              Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                              Items:
                                Type:  string
                              Type:    array
                          Type:        object
                        Failure Threshold:
                          Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                          Format:  int32
                          Type:    integer
                        Grpc:
                          Description:  GRPC specifies an action involving a GRPC port.
                          Properties:
                            Port:
                              Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                              Format:       int32
                              Type:         integer
                            Service:
                              Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                              Type:  string
                          Required:
                            port
                          Type:  object
                        Http Get:
                          Description:  HTTPGet specifies the http request to perform.
                          Properties:
                            Host:
                              Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                              Type:  string
                            Http Headers:
                              Description:  Custom headers to set in the request. HTTP allows repeated headers.
                              Items:
                                Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                Properties:
                                  Name:
                                    Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                    Type:  string
                                  Value:
                                    Description:  The header field value
                                    Type:         string
                                Required:
                                  name
                                  value
                                Type:  object
                              Type:    array
                            Path:
                              Description:  Path to access on the HTTP server.
                              Type:         string
                            Port:
                              Any Of:
                                Type:       integer
                                Type:       string
                              Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                              X - Kubernetes - Int - Or - String:  true
                            Scheme:
                              Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                              Type:  string
                          Required:
                            port
                          Type:  object
                        Initial Delay Seconds:
                          Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                          Format:  int32
                          Type:    integer
                        Period Seconds:
                          Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                          Format:  int32
                          Type:    integer
                        Success Threshold:
                          Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                          Format:  int32
                          Type:    integer
                        Tcp Socket:
                          Description:  TCPSocket specifies an action involving a TCP port.
                          Properties:
                            Host:
                              Description:  Optional: Host name to connect to, defaults to the pod IP.
                              Type:         string
                            Port:
                              Any Of:
                                Type:       integer
                                Type:       string
                              Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                              X - Kubernetes - Int - Or - String:  true
                          Required:
                            port
                          Type:  object
                        Termination Grace Period Seconds:
                          Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                          Format:  int64
                          Type:    integer
                        Timeout Seconds:
                          Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                          Format:  int32
                          Type:    integer
                      Type:        object
                    Resources:
                      Description:  Resouces describes the compute resource requirements.
                      Properties:
                        Claims:
                          Description:  Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.


This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.


This field is immutable. It can only be set for containers.
                          Items:
                            Description:  ResourceClaim references one entry in PodSpec.ResourceClaims.
                            Properties:
                              Name:
                                Description:  Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container.
                                Type:  string
                            Required:
                              name
                            Type:  object
                          Type:    array
                          X - Kubernetes - List - Map - Keys:
                            name
                          X - Kubernetes - List - Type:  map
                        Limits:
                          Additional Properties:
                            Any Of:
                              Type:                              integer
                              Type:                              string
                            Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            X - Kubernetes - Int - Or - String:  true
                          Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                          Type:  object
                        Requests:
                          Additional Properties:
                            Any Of:
                              Type:                              integer
                              Type:                              string
                            Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            X - Kubernetes - Int - Or - String:  true
                          Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                          Type:  object
                      Type:      object
                    Security Context:
                      Description:  SecurityContext holds security configuration that will be applied to a container.
                      Properties:
                        Allow Privilege Escalation:
                          Description:  AllowPrivilegeEscalation controls whether a process can gain more
privileges than its parent process. This bool directly controls if
the no_new_privs flag will be set on the container process.
AllowPrivilegeEscalation is true always when the container is:
1) run as Privileged
2) has CAP_SYS_ADMIN
Note that this field cannot be set when spec.os.name is windows.
                          Type:  boolean
                        Capabilities:
                          Description:  The capabilities to add/drop when running containers.
Defaults to the default set of capabilities granted by the container runtime.
Note that this field cannot be set when spec.os.name is windows.
                          Properties:
                            Add:
                              Description:  Added capabilities
                              Items:
                                Description:  Capability represent POSIX capabilities type
                                Type:         string
                              Type:           array
                            Drop:
                              Description:  Removed capabilities
                              Items:
                                Description:  Capability represent POSIX capabilities type
                                Type:         string
                              Type:           array
                          Type:               object
                        Privileged:
                          Description:  Run container in privileged mode.
Processes in privileged containers are essentially equivalent to root on the host.
Defaults to false.
Note that this field cannot be set when spec.os.name is windows.
                          Type:  boolean
                        Proc Mount:
                          Description:  procMount denotes the type of proc mount to use for the containers.
The default is DefaultProcMount which uses the container runtime defaults for
readonly paths and masked paths.
This requires the ProcMountType feature flag to be enabled.
Note that this field cannot be set when spec.os.name is windows.
                          Type:  string
                        Read Only Root Filesystem:
                          Description:  Whether this container has a read-only root filesystem.
Default is false.
Note that this field cannot be set when spec.os.name is windows.
                          Type:  boolean
                        Run As Group:
                          Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                          Format:  int64
                          Type:    integer
                        Run As Non Root:
                          Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                          Type:  boolean
                        Run As User:
                          Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                          Format:  int64
                          Type:    integer
                        Se Linux Options:
                          Description:  The SELinux context to be applied to the container.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                          Properties:
                            Level:
                              Description:  Level is SELinux level label that applies to the container.
                              Type:         string
                            Role:
                              Description:  Role is a SELinux role label that applies to the container.
                              Type:         string
                            Type:
                              Description:  Type is a SELinux type label that applies to the container.
                              Type:         string
                            User:
                              Description:  User is a SELinux user label that applies to the container.
                              Type:         string
                          Type:             object
                        Seccomp Profile:
                          Description:  The seccomp options to use by this container. If seccomp options are
provided at both the pod & container level, the container options
override the pod options.
Note that this field cannot be set when spec.os.name is windows.
                          Properties:
                            Localhost Profile:
                              Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                              Type:  string
                            Type:
                              Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                              Type:  string
                          Required:
                            type
                          Type:  object
                        Windows Options:
                          Description:  The Windows specific settings applied to all containers.
If unspecified, the options from the PodSecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                          Properties:
                            Gmsa Credential Spec:
                              Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                              Type:  string
                            Gmsa Credential Spec Name:
                              Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                              Type:         string
                            Host Process:
                              Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                              Type:  boolean
                            Run As User Name:
                              Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                              Type:  string
                          Type:      object
                      Type:          object
                    Volume Mounts:
                      Description:  VolumeMounts to be used in the Container.
                      Items:
                        Description:  VolumeMount describes a mounting of a Volume within a container.
                        Properties:
                          Mount Path:
                            Description:  Path within the container at which the volume should be mounted.  Must
not contain ':'.
                            Type:  string
                          Mount Propagation:
                            Description:  mountPropagation determines how mounts are propagated from the host
to container and the other way around.
When not set, MountPropagationNone is used.
This field is beta in 1.10.
                            Type:  string
                          Name:
                            Description:  This must match the Name of a Volume.
                            Type:         string
                          Read Only:
                            Description:  Mounted read-only if true, read-write otherwise (false or unspecified).
Defaults to false.
                            Type:  boolean
                          Sub Path:
                            Description:  Path within the volume from which the container's volume should be mounted.
Defaults to "" (volume's root).
                            Type:  string
                          Sub Path Expr:
                            Description:  Expanded path within the volume from which the container's volume should be mounted.
Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
Defaults to "" (volume's root).
SubPathExpr and SubPath are mutually exclusive.
                            Type:  string
                        Required:
                          mountPath
                          name
                        Type:  object
                      Type:    array
                  Required:
                    image
                  Type:  object
                Type:    array
              Liveness Probe:
                Description:  LivenessProbe to be used in the Container.
                Properties:
                  Exec:
                    Description:  Exec specifies the action to take.
                    Properties:
                      Command:
                        Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                        Items:
                          Type:  string
                        Type:    array
                    Type:        object
                  Failure Threshold:
                    Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                    Format:  int32
                    Type:    integer
                  Grpc:
                    Description:  GRPC specifies an action involving a GRPC port.
                    Properties:
                      Port:
                        Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                        Format:       int32
                        Type:         integer
                      Service:
                        Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                        Type:  string
                    Required:
                      port
                    Type:  object
                  Http Get:
                    Description:  HTTPGet specifies the http request to perform.
                    Properties:
                      Host:
                        Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                        Type:  string
                      Http Headers:
                        Description:  Custom headers to set in the request. HTTP allows repeated headers.
                        Items:
                          Description:  HTTPHeader describes a custom header to be used in HTTP probes
                          Properties:
                            Name:
                              Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                              Type:  string
                            Value:
                              Description:  The header field value
                              Type:         string
                          Required:
                            name
                            value
                          Type:  object
                        Type:    array
                      Path:
                        Description:  Path to access on the HTTP server.
                        Type:         string
                      Port:
                        Any Of:
                          Type:       integer
                          Type:       string
                        Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                        X - Kubernetes - Int - Or - String:  true
                      Scheme:
                        Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                        Type:  string
                    Required:
                      port
                    Type:  object
                  Initial Delay Seconds:
                    Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                    Format:  int32
                    Type:    integer
                  Period Seconds:
                    Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                    Format:  int32
                    Type:    integer
                  Success Threshold:
                    Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                    Format:  int32
                    Type:    integer
                  Tcp Socket:
                    Description:  TCPSocket specifies an action involving a TCP port.
                    Properties:
                      Host:
                        Description:  Optional: Host name to connect to, defaults to the pod IP.
                        Type:         string
                      Port:
                        Any Of:
                          Type:       integer
                          Type:       string
                        Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                        X - Kubernetes - Int - Or - String:  true
                    Required:
                      port
                    Type:  object
                  Termination Grace Period Seconds:
                    Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                    Format:  int64
                    Type:    integer
                  Timeout Seconds:
                    Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                    Format:  int32
                    Type:    integer
                Type:        object
              Max Scale:
                Description:  MaxScale is the MaxScale specification that defines the MaxScale resource to be used with the current MariaDB.
When enabling this field, MaxScaleRef is automatically set.
                Properties:
                  Admin:
                    Description:  Admin configures the admin REST API and GUI.
                    Properties:
                      Gui Enabled:
                        Description:  GuiEnabled indicates whether the admin GUI should be enabled.
                        Type:         boolean
                      Port:
                        Description:  Port where the admin REST API and GUI will be exposed.
                        Format:       int32
                        Type:         integer
                    Type:             object
                  Auth:
                    Description:  Auth defines the credentials required for MaxScale to connect to MariaDB.
                    Properties:
                      Admin Password Secret Key Ref:
                        Description:  AdminPasswordSecretKeyRef is Secret key reference to the admin password to call the admin REST API. It is defaulted if not provided.
                        Properties:
                          Generate:
                            Default:      false
                            Description:  Generate indicates whether the Secret should be generated if the Secret referenced is not present.
                            Type:         boolean
                          Key:
                            Description:  The key of the secret to select from.  Must be a valid secret key.
                            Type:         string
                          Name:
                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                            Type:  string
                          Optional:
                            Description:  Specify whether the Secret or its key must be defined
                            Type:         boolean
                        Required:
                          key
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Admin Username:
                        Description:  AdminUsername is an admin username to call the admin REST API. It is defaulted if not provided.
                        Type:         string
                      Client Max Connections:
                        Description:  ClientMaxConnections defines the maximum number of connections that the client can establish.
If HA is enabled, make sure to increase this value, as more MaxScale replicas implies more connections.
It defaults to 30 times the number of MaxScale replicas.
                        Format:  int32
                        Type:    integer
                      Client Password Secret Key Ref:
                        Description:  ClientPasswordSecretKeyRef is Secret key reference to the password to connect to MaxScale. It is defaulted if not provided.
                        Properties:
                          Generate:
                            Default:      false
                            Description:  Generate indicates whether the Secret should be generated if the Secret referenced is not present.
                            Type:         boolean
                          Key:
                            Description:  The key of the secret to select from.  Must be a valid secret key.
                            Type:         string
                          Name:
                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                            Type:  string
                          Optional:
                            Description:  Specify whether the Secret or its key must be defined
                            Type:         boolean
                        Required:
                          key
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Client Username:
                        Description:  ClientUsername is the user to connect to MaxScale. It is defaulted if not provided.
                        Type:         string
                      Delete Default Admin:
                        Description:  DeleteDefaultAdmin determines whether the default admin user should be deleted after the initial configuration. If not provided, it defaults to true.
                        Type:         boolean
                      Generate:
                        Description:  Generate  defies whether the operator should generate users and grants for MaxScale to work.
It only supports MariaDBs specified via spec.mariaDbRef.
                        Type:  boolean
                      Metrics Password Secret Key Ref:
                        Description:  MetricsPasswordSecretKeyRef is Secret key reference to the metrics password to call the admib REST API. It is defaulted if metrics are enabled.
                        Properties:
                          Generate:
                            Default:      false
                            Description:  Generate indicates whether the Secret should be generated if the Secret referenced is not present.
                            Type:         boolean
                          Key:
                            Description:  The key of the secret to select from.  Must be a valid secret key.
                            Type:         string
                          Name:
                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                            Type:  string
                          Optional:
                            Description:  Specify whether the Secret or its key must be defined
                            Type:         boolean
                        Required:
                          key
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Metrics Username:
                        Description:  MetricsUsername is an metrics username to call the REST API. It is defaulted if metrics are enabled.
                        Type:         string
                      Monitor Max Connections:
                        Description:  MonitorMaxConnections defines the maximum number of connections that the monitor can establish.
If HA is enabled, make sure to increase this value, as more MaxScale replicas implies more connections.
It defaults to 30 times the number of MaxScale replicas.
                        Format:  int32
                        Type:    integer
                      Monitor Password Secret Key Ref:
                        Description:  MonitorPasswordSecretKeyRef is Secret key reference to the password used by MaxScale monitor to connect to MariaDB server. It is defaulted if not provided.
                        Properties:
                          Generate:
                            Default:      false
                            Description:  Generate indicates whether the Secret should be generated if the Secret referenced is not present.
                            Type:         boolean
                          Key:
                            Description:  The key of the secret to select from.  Must be a valid secret key.
                            Type:         string
                          Name:
                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                            Type:  string
                          Optional:
                            Description:  Specify whether the Secret or its key must be defined
                            Type:         boolean
                        Required:
                          key
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Monitor Username:
                        Description:  MonitorUsername is the user used by MaxScale monitor to connect to MariaDB server. It is defaulted if not provided.
                        Type:         string
                      Server Max Connections:
                        Description:  ServerMaxConnections defines the maximum number of connections that the server can establish.
If HA is enabled, make sure to increase this value, as more MaxScale replicas implies more connections.
It defaults to 30 times the number of MaxScale replicas.
                        Format:  int32
                        Type:    integer
                      Server Password Secret Key Ref:
                        Description:  ServerPasswordSecretKeyRef is Secret key reference to the password used by MaxScale to connect to MariaDB server. It is defaulted if not provided.
                        Properties:
                          Generate:
                            Default:      false
                            Description:  Generate indicates whether the Secret should be generated if the Secret referenced is not present.
                            Type:         boolean
                          Key:
                            Description:  The key of the secret to select from.  Must be a valid secret key.
                            Type:         string
                          Name:
                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                            Type:  string
                          Optional:
                            Description:  Specify whether the Secret or its key must be defined
                            Type:         boolean
                        Required:
                          key
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Server Username:
                        Description:  ServerUsername is the user used by MaxScale to connect to MariaDB server. It is defaulted if not provided.
                        Type:         string
                      Sync Max Connections:
                        Description:  SyncMaxConnections defines the maximum number of connections that the sync can establish.
If HA is enabled, make sure to increase this value, as more MaxScale replicas implies more connections.
It defaults to 30 times the number of MaxScale replicas.
                        Format:  int32
                        Type:    integer
                      Sync Password Secret Key Ref:
                        Description:  SyncPasswordSecretKeyRef is Secret key reference to the password used by MaxScale config to connect to MariaDB server. It is defaulted when HA is enabled.
                        Properties:
                          Generate:
                            Default:      false
                            Description:  Generate indicates whether the Secret should be generated if the Secret referenced is not present.
                            Type:         boolean
                          Key:
                            Description:  The key of the secret to select from.  Must be a valid secret key.
                            Type:         string
                          Name:
                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                            Type:  string
                          Optional:
                            Description:  Specify whether the Secret or its key must be defined
                            Type:         boolean
                        Required:
                          key
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Sync Username:
                        Description:  MonitoSyncUsernamerUsername is the user used by MaxScale config sync to connect to MariaDB server. It is defaulted when HA is enabled.
                        Type:         string
                    Type:             object
                  Config:
                    Description:  Config defines the MaxScale configuration.
                    Properties:
                      Params:
                        Additional Properties:
                          Type:       string
                        Description:  Params is a key value pair of parameters to be used in the MaxScale static configuration file.
Any parameter supported by MaxScale may be specified here. See reference:
https://mariadb.com/kb/en/mariadb-maxscale-2308-mariadb-maxscale-configuration-guide/#global-settings.
                        Type:  object
                      Sync:
                        Description:  Sync defines how to replicate configuration across MaxScale replicas. It is defaulted when HA is enabled.
                        Properties:
                          Database:
                            Description:  Database is the MariaDB logical database where the 'maxscale_config' table will be created in order to persist and synchronize config changes. If not provided, it defaults to 'mysql'.
                            Type:         string
                          Interval:
                            Description:  Interval defines the config synchronization interval. It is defaulted if not provided.
                            Type:         string
                          Timeout:
                            Description:  Interval defines the config synchronization timeout. It is defaulted if not provided.
                            Type:         string
                        Type:             object
                      Volume Claim Template:
                        Description:  VolumeClaimTemplate provides a template to define the PVCs for storing MaxScale runtime configuration files. It is defaulted if not provided.
                        Properties:
                          Access Modes:
                            Description:  accessModes contains the desired access modes the volume should have.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                            Items:
                              Type:  string
                            Type:    array
                          Data Source:
                            Description:  dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                            Properties:
                              API Group:
                                Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                Type:  string
                              Kind:
                                Description:  Kind is the type of resource being referenced
                                Type:         string
                              Name:
                                Description:  Name is the name of resource being referenced
                                Type:         string
                            Required:
                              kind
                              name
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Data Source Ref:
                            Description:  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                            Properties:
                              API Group:
                                Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                Type:  string
                              Kind:
                                Description:  Kind is the type of resource being referenced
                                Type:         string
                              Name:
                                Description:  Name is the name of resource being referenced
                                Type:         string
                              Namespace:
                                Description:  Namespace is the namespace of resource being referenced
Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                Type:  string
                            Required:
                              kind
                              name
                            Type:  object
                          Metadata:
                            Description:  Metadata to be added to the PVC metadata.
                            Properties:
                              Annotations:
                                Additional Properties:
                                  Type:       string
                                Description:  Annotations to be added to children resources.
                                Type:         object
                              Labels:
                                Additional Properties:
                                  Type:       string
                                Description:  Labels to be added to children resources.
                                Type:         object
                            Type:             object
                          Resources:
                            Description:  resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                            Properties:
                              Limits:
                                Additional Properties:
                                  Any Of:
                                    Type:                              integer
                                    Type:                              string
                                  Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  X - Kubernetes - Int - Or - String:  true
                                Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                Type:  object
                              Requests:
                                Additional Properties:
                                  Any Of:
                                    Type:                              integer
                                    Type:                              string
                                  Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  X - Kubernetes - Int - Or - String:  true
                                Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                Type:  object
                            Type:      object
                          Selector:
                            Description:  selector is a label query over volumes to consider for binding.
                            Properties:
                              Match Expressions:
                                Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                Items:
                                  Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                  Properties:
                                    Key:
                                      Description:  key is the label key that the selector applies to.
                                      Type:         string
                                    Operator:
                                      Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                      Type:  string
                                    Values:
                                      Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                      Items:
                                        Type:  string
                                      Type:    array
                                  Required:
                                    key
                                    operator
                                  Type:  object
                                Type:    array
                              Match Labels:
                                Additional Properties:
                                  Type:       string
                                Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                Type:                     object
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Storage Class Name:
                            Description:  storageClassName is the name of the StorageClass required by the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                            Type:  string
                          Volume Attributes Class Name:
                            Description:  volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
If specified, the CSI driver will create or update the volume with the attributes defined
in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
will be set by the persistentvolume controller if it exists.
If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
exists.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
                            Type:  string
                          Volume Mode:
                            Description:  volumeMode defines what type of volume is required by the claim.
Value of Filesystem is implied when not included in claim spec.
                            Type:  string
                          Volume Name:
                            Description:  volumeName is the binding reference to the PersistentVolume backing this claim.
                            Type:         string
                        Type:             object
                    Type:                 object
                  Connection:
                    Description:  Connection provides a template to define the Connection for MaxScale.
                    Properties:
                      Health Check:
                        Description:  HealthCheck to be used in the Connection.
                        Properties:
                          Interval:
                            Description:  Interval used to perform health checks.
                            Type:         string
                          Retry Interval:
                            Description:  RetryInterval is the interval used to perform health check retries.
                            Type:         string
                        Type:             object
                      Params:
                        Additional Properties:
                          Type:       string
                        Description:  Params to be used in the Connection.
                        Type:         object
                      Port:
                        Description:  Port to connect to. If not provided, it defaults to the MariaDB port or to the first MaxScale listener.
                        Format:       int32
                        Type:         integer
                      Secret Name:
                        Description:  SecretName to be used in the Connection.
                        Type:         string
                      Secret Template:
                        Description:  SecretTemplate to be used in the Connection.
                        Properties:
                          Database Key:
                            Description:  DatabaseKey to be used in the Secret.
                            Type:         string
                          Format:
                            Description:  Format to be used in the Secret.
                            Type:         string
                          Host Key:
                            Description:  HostKey to be used in the Secret.
                            Type:         string
                          Key:
                            Description:  Key to be used in the Secret.
                            Type:         string
                          Metadata:
                            Description:  Metadata to be added to the Secret object.
                            Properties:
                              Annotations:
                                Additional Properties:
                                  Type:       string
                                Description:  Annotations to be added to children resources.
                                Type:         object
                              Labels:
                                Additional Properties:
                                  Type:       string
                                Description:  Labels to be added to children resources.
                                Type:         object
                            Type:             object
                          Password Key:
                            Description:  PasswordKey to be used in the Secret.
                            Type:         string
                          Port Key:
                            Description:  PortKey to be used in the Secret.
                            Type:         string
                          Username Key:
                            Description:  UsernameKey to be used in the Secret.
                            Type:         string
                        Type:             object
                      Service Name:
                        Description:  ServiceName to be used in the Connection.
                        Type:         string
                    Type:             object
                  Enabled:
                    Description:  Enabled is a flag to enable a MaxScale instance to be used with the current MariaDB.
                    Type:         boolean
                  Gui Kubernetes Service:
                    Description:  GuiKubernetesService define a template for a Kubernetes Service object to connect to MaxScale's GUI.
                    Properties:
                      Allocate Load Balancer Node Ports:
                        Description:  AllocateLoadBalancerNodePorts Service field.
                        Type:         boolean
                      External Traffic Policy:
                        Description:  ExternalTrafficPolicy Service field.
                        Type:         string
                      Load Balancer IP:
                        Description:  LoadBalancerIP Service field.
                        Type:         string
                      Load Balancer Source Ranges:
                        Description:  LoadBalancerSourceRanges Service field.
                        Items:
                          Type:  string
                        Type:    array
                      Metadata:
                        Description:  Metadata to be added to the Service metadata.
                        Properties:
                          Annotations:
                            Additional Properties:
                              Type:       string
                            Description:  Annotations to be added to children resources.
                            Type:         object
                          Labels:
                            Additional Properties:
                              Type:       string
                            Description:  Labels to be added to children resources.
                            Type:         object
                        Type:             object
                      Session Affinity:
                        Description:  SessionAffinity Service field.
                        Type:         string
                      Type:
                        Default:      ClusterIP
                        Description:  Type is the Service type. One of `ClusterIP`, `NodePort` or `LoadBalancer`. If not defined, it defaults to `ClusterIP`.
                        Enum:
                          ClusterIP
                          NodePort
                          LoadBalancer
                        Type:  string
                    Type:      object
                  Image:
                    Description:  Image name to be used by the MaxScale instances. The supported format is `<image>:<tag>`.
Only MaxScale official images are supported.
                    Type:  string
                  Image Pull Policy:
                    Description:  ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
                    Enum:
                      Always
                      Never
                      IfNotPresent
                    Type:  string
                  Kubernetes Service:
                    Description:  KubernetesService defines a template for a Kubernetes Service object to connect to MaxScale.
                    Properties:
                      Allocate Load Balancer Node Ports:
                        Description:  AllocateLoadBalancerNodePorts Service field.
                        Type:         boolean
                      External Traffic Policy:
                        Description:  ExternalTrafficPolicy Service field.
                        Type:         string
                      Load Balancer IP:
                        Description:  LoadBalancerIP Service field.
                        Type:         string
                      Load Balancer Source Ranges:
                        Description:  LoadBalancerSourceRanges Service field.
                        Items:
                          Type:  string
                        Type:    array
                      Metadata:
                        Description:  Metadata to be added to the Service metadata.
                        Properties:
                          Annotations:
                            Additional Properties:
                              Type:       string
                            Description:  Annotations to be added to children resources.
                            Type:         object
                          Labels:
                            Additional Properties:
                              Type:       string
                            Description:  Labels to be added to children resources.
                            Type:         object
                        Type:             object
                      Session Affinity:
                        Description:  SessionAffinity Service field.
                        Type:         string
                      Type:
                        Default:      ClusterIP
                        Description:  Type is the Service type. One of `ClusterIP`, `NodePort` or `LoadBalancer`. If not defined, it defaults to `ClusterIP`.
                        Enum:
                          ClusterIP
                          NodePort
                          LoadBalancer
                        Type:  string
                    Type:      object
                  Metrics:
                    Description:  Metrics configures metrics and how to scrape them.
                    Properties:
                      Enabled:
                        Description:  Enabled is a flag to enable Metrics
                        Type:         boolean
                      Exporter:
                        Description:  Exporter defines the metrics exporter container.
                        Properties:
                          Affinity:
                            Description:  Affinity to be used in the Pod.
                            Properties:
                              Anti Affinity Enabled:
                                Description:  AntiAffinityEnabled configures PodAntiAffinity so each Pod is scheduled in a different Node, enabling HA.
Make sure you have at least as many Nodes available as the replicas to not end up with unscheduled Pods.
                                Type:  boolean
                              Node Affinity:
                                Description:  Describes node affinity scheduling rules for the pod.
                                Properties:
                                  Preferred During Scheduling Ignored During Execution:
                                    Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node matches the corresponding matchExpressions; the
node(s) with the highest sum are the most preferred.
                                    Items:
                                      Description:  An empty preferred scheduling term matches all objects with implicit weight 0
(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                                      Properties:
                                        Preference:
                                          Description:  A node selector term, associated with the corresponding weight.
                                          Properties:
                                            Match Expressions:
                                              Description:  A list of node selector requirements by node's labels.
                                              Items:
                                                Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  The label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                    Type:  string
                                                  Values:
                                                    Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Fields:
                                              Description:  A list of node selector requirements by node's fields.
                                              Items:
                                                Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  The label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                    Type:  string
                                                  Values:
                                                    Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:                   object
                                              Type:                     array
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Weight:
                                          Description:  Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                                          Format:       int32
                                          Type:         integer
                                      Required:
                                        preference
                                        weight
                                      Type:  object
                                    Type:    array
                                  Required During Scheduling Ignored During Execution:
                                    Description:  If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to an update), the system
may or may not try to eventually evict the pod from its node.
                                    Properties:
                                      Node Selector Terms:
                                        Description:  Required. A list of node selector terms. The terms are ORed.
                                        Items:
                                          Description:  A null or empty node selector term matches no objects. The requirements of
them are ANDed.
The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                                          Properties:
                                            Match Expressions:
                                              Description:  A list of node selector requirements by node's labels.
                                              Items:
                                                Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  The label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                    Type:  string
                                                  Values:
                                                    Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Fields:
                                              Description:  A list of node selector requirements by node's fields.
                                              Items:
                                                Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  The label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                    Type:  string
                                                  Values:
                                                    Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:                   object
                                              Type:                     array
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Type:                           array
                                    Required:
                                      nodeSelectorTerms
                                    Type:                         object
                                    X - Kubernetes - Map - Type:  atomic
                                Type:                             object
                              Pod Affinity:
                                Description:  Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                                Properties:
                                  Preferred During Scheduling Ignored During Execution:
                                    Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
                                    Items:
                                      Description:  The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                      Properties:
                                        Pod Affinity Term:
                                          Description:  Required. A pod affinity term, associated with the corresponding weight.
                                          Properties:
                                            Label Selector:
                                              Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                              Properties:
                                                Match Expressions:
                                                  Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                  Items:
                                                    Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                    Properties:
                                                      Key:
                                                        Description:  key is the label key that the selector applies to.
                                                        Type:         string
                                                      Operator:
                                                        Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                        Type:  string
                                                      Values:
                                                        Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                        Items:
                                                          Type:  string
                                                        Type:    array
                                                    Required:
                                                      key
                                                      operator
                                                    Type:  object
                                                  Type:    array
                                                Match Labels:
                                                  Additional Properties:
                                                    Type:       string
                                                  Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                  Type:                     object
                                              Type:                         object
                                              X - Kubernetes - Map - Type:  atomic
                                            Match Label Keys:
                                              Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                              Items:
                                                Type:                        string
                                              Type:                          array
                                              X - Kubernetes - List - Type:  atomic
                                            Mismatch Label Keys:
                                              Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                              Items:
                                                Type:                        string
                                              Type:                          array
                                              X - Kubernetes - List - Type:  atomic
                                            Namespace Selector:
                                              Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                              Properties:
                                                Match Expressions:
                                                  Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                  Items:
                                                    Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                    Properties:
                                                      Key:
                                                        Description:  key is the label key that the selector applies to.
                                                        Type:         string
                                                      Operator:
                                                        Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                        Type:  string
                                                      Values:
                                                        Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                        Items:
                                                          Type:  string
                                                        Type:    array
                                                    Required:
                                                      key
                                                      operator
                                                    Type:  object
                                                  Type:    array
                                                Match Labels:
                                                  Additional Properties:
                                                    Type:       string
                                                  Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                  Type:                     object
                                              Type:                         object
                                              X - Kubernetes - Map - Type:  atomic
                                            Namespaces:
                                              Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                              Items:
                                                Type:  string
                                              Type:    array
                                            Topology Key:
                                              Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                              Type:  string
                                          Required:
                                            topologyKey
                                          Type:  object
                                        Weight:
                                          Description:  weight associated with matching the corresponding podAffinityTerm,
in the range 1-100.
                                          Format:  int32
                                          Type:    integer
                                      Required:
                                        podAffinityTerm
                                        weight
                                      Type:  object
                                    Type:    array
                                  Required During Scheduling Ignored During Execution:
                                    Description:  If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                    Items:
                                      Description:  Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
                                      Properties:
                                        Label Selector:
                                          Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Match Label Keys:
                                          Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Mismatch Label Keys:
                                          Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Namespace Selector:
                                          Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Namespaces:
                                          Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                          Items:
                                            Type:  string
                                          Type:    array
                                        Topology Key:
                                          Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                          Type:  string
                                      Required:
                                        topologyKey
                                      Type:  object
                                    Type:    array
                                Type:        object
                              Pod Anti Affinity:
                                Description:  Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                                Properties:
                                  Preferred During Scheduling Ignored During Execution:
                                    Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the anti-affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling anti-affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
                                    Items:
                                      Description:  The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                      Properties:
                                        Pod Affinity Term:
                                          Description:  Required. A pod affinity term, associated with the corresponding weight.
                                          Properties:
                                            Label Selector:
                                              Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                              Properties:
                                                Match Expressions:
                                                  Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                  Items:
                                                    Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                    Properties:
                                                      Key:
                                                        Description:  key is the label key that the selector applies to.
                                                        Type:         string
                                                      Operator:
                                                        Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                        Type:  string
                                                      Values:
                                                        Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                        Items:
                                                          Type:  string
                                                        Type:    array
                                                    Required:
                                                      key
                                                      operator
                                                    Type:  object
                                                  Type:    array
                                                Match Labels:
                                                  Additional Properties:
                                                    Type:       string
                                                  Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                  Type:                     object
                                              Type:                         object
                                              X - Kubernetes - Map - Type:  atomic
                                            Match Label Keys:
                                              Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                              Items:
                                                Type:                        string
                                              Type:                          array
                                              X - Kubernetes - List - Type:  atomic
                                            Mismatch Label Keys:
                                              Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                              Items:
                                                Type:                        string
                                              Type:                          array
                                              X - Kubernetes - List - Type:  atomic
                                            Namespace Selector:
                                              Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                              Properties:
                                                Match Expressions:
                                                  Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                  Items:
                                                    Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                    Properties:
                                                      Key:
                                                        Description:  key is the label key that the selector applies to.
                                                        Type:         string
                                                      Operator:
                                                        Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                        Type:  string
                                                      Values:
                                                        Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                        Items:
                                                          Type:  string
                                                        Type:    array
                                                    Required:
                                                      key
                                                      operator
                                                    Type:  object
                                                  Type:    array
                                                Match Labels:
                                                  Additional Properties:
                                                    Type:       string
                                                  Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                  Type:                     object
                                              Type:                         object
                                              X - Kubernetes - Map - Type:  atomic
                                            Namespaces:
                                              Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                              Items:
                                                Type:  string
                                              Type:    array
                                            Topology Key:
                                              Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                              Type:  string
                                          Required:
                                            topologyKey
                                          Type:  object
                                        Weight:
                                          Description:  weight associated with matching the corresponding podAffinityTerm,
in the range 1-100.
                                          Format:  int32
                                          Type:    integer
                                      Required:
                                        podAffinityTerm
                                        weight
                                      Type:  object
                                    Type:    array
                                  Required During Scheduling Ignored During Execution:
                                    Description:  If the anti-affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the anti-affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                    Items:
                                      Description:  Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
                                      Properties:
                                        Label Selector:
                                          Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Match Label Keys:
                                          Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Mismatch Label Keys:
                                          Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Namespace Selector:
                                          Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Namespaces:
                                          Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                          Items:
                                            Type:  string
                                          Type:    array
                                        Topology Key:
                                          Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                          Type:  string
                                      Required:
                                        topologyKey
                                      Type:  object
                                    Type:    array
                                Type:        object
                            Type:            object
                          Args:
                            Description:  Args to be used in the Container.
                            Items:
                              Type:  string
                            Type:    array
                          Command:
                            Description:  Command to be used in the Container.
                            Items:
                              Type:  string
                            Type:    array
                          Env:
                            Description:  Env represents the environment variables to be injected in a container.
                            Items:
                              Description:  EnvVar represents an environment variable present in a Container.
                              Properties:
                                Name:
                                  Description:  Name of the environment variable. Must be a C_IDENTIFIER.
                                  Type:         string
                                Value:
                                  Description:  Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".
                                  Type:  string
                                Value From:
                                  Description:  Source for the environment variable's value. Cannot be used if value is not empty.
                                  Properties:
                                    Config Map Key Ref:
                                      Description:  Selects a key of a ConfigMap.
                                      Properties:
                                        Key:
                                          Description:  The key to select.
                                          Type:         string
                                        Name:
                                          Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                          Type:  string
                                        Optional:
                                          Description:  Specify whether the ConfigMap or its key must be defined
                                          Type:         boolean
                                      Required:
                                        key
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Field Ref:
                                      Description:  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                                      Properties:
                                        API Version:
                                          Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                          Type:         string
                                        Field Path:
                                          Description:  Path of the field to select in the specified API version.
                                          Type:         string
                                      Required:
                                        fieldPath
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Resource Field Ref:
                                      Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                                      Properties:
                                        Container Name:
                                          Description:  Container name: required for volumes, optional for env vars
                                          Type:         string
                                        Divisor:
                                          Any Of:
                                            Type:                              integer
                                            Type:                              string
                                          Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                          Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                          X - Kubernetes - Int - Or - String:  true
                                        Resource:
                                          Description:  Required: resource to select
                                          Type:         string
                                      Required:
                                        resource
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Secret Key Ref:
                                      Description:  Selects a key of a secret in the pod's namespace
                                      Properties:
                                        Key:
                                          Description:  The key of the secret to select from.  Must be a valid secret key.
                                          Type:         string
                                        Name:
                                          Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                          Type:  string
                                        Optional:
                                          Description:  Specify whether the Secret or its key must be defined
                                          Type:         boolean
                                      Required:
                                        key
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                  Type:                             object
                              Required:
                                name
                              Type:  object
                            Type:    array
                          Env From:
                            Description:  EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
                            Items:
                              Description:  EnvFromSource represents the source of a set of ConfigMaps
                              Properties:
                                Config Map Ref:
                                  Description:  The ConfigMap to select from
                                  Properties:
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:  string
                                    Optional:
                                      Description:              Specify whether the ConfigMap must be defined
                                      Type:                     boolean
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Prefix:
                                  Description:  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                                  Type:         string
                                Secret Ref:
                                  Description:  The Secret to select from
                                  Properties:
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:  string
                                    Optional:
                                      Description:              Specify whether the Secret must be defined
                                      Type:                     boolean
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                              Type:                             object
                            Type:                               array
                          Image:
                            Description:  Image name to be used as metrics exporter. The supported format is `<image>:<tag>`.
Only mysqld-exporter >= v0.15.0 is supported: https://github.com/prometheus/mysqld_exporter
                            Type:  string
                          Image Pull Policy:
                            Description:  ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
                            Enum:
                              Always
                              Never
                              IfNotPresent
                            Type:  string
                          Image Pull Secrets:
                            Description:  ImagePullSecrets is the list of pull Secrets to be used to pull the image.
                            Items:
                              Description:  LocalObjectReference contains enough information to let you locate the
referenced object inside the same namespace.
                              Properties:
                                Name:
                                  Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                  Type:                     string
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                            Type:                           array
                          Init Containers:
                            Description:  InitContainers to be used in the Pod.
                            Items:
                              Description:  Container object definition.
                              Properties:
                                Args:
                                  Description:  Args to be used in the Container.
                                  Items:
                                    Type:  string
                                  Type:    array
                                Command:
                                  Description:  Command to be used in the Container.
                                  Items:
                                    Type:  string
                                  Type:    array
                                Env:
                                  Description:  Env represents the environment variables to be injected in a container.
                                  Items:
                                    Description:  EnvVar represents an environment variable present in a Container.
                                    Properties:
                                      Name:
                                        Description:  Name of the environment variable. Must be a C_IDENTIFIER.
                                        Type:         string
                                      Value:
                                        Description:  Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".
                                        Type:  string
                                      Value From:
                                        Description:  Source for the environment variable's value. Cannot be used if value is not empty.
                                        Properties:
                                          Config Map Key Ref:
                                            Description:  Selects a key of a ConfigMap.
                                            Properties:
                                              Key:
                                                Description:  The key to select.
                                                Type:         string
                                              Name:
                                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                                Type:  string
                                              Optional:
                                                Description:  Specify whether the ConfigMap or its key must be defined
                                                Type:         boolean
                                            Required:
                                              key
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                          Field Ref:
                                            Description:  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                                            Properties:
                                              API Version:
                                                Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                                Type:         string
                                              Field Path:
                                                Description:  Path of the field to select in the specified API version.
                                                Type:         string
                                            Required:
                                              fieldPath
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                          Resource Field Ref:
                                            Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                                            Properties:
                                              Container Name:
                                                Description:  Container name: required for volumes, optional for env vars
                                                Type:         string
                                              Divisor:
                                                Any Of:
                                                  Type:                              integer
                                                  Type:                              string
                                                Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                                Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                X - Kubernetes - Int - Or - String:  true
                                              Resource:
                                                Description:  Required: resource to select
                                                Type:         string
                                            Required:
                                              resource
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                          Secret Key Ref:
                                            Description:  Selects a key of a secret in the pod's namespace
                                            Properties:
                                              Key:
                                                Description:  The key of the secret to select from.  Must be a valid secret key.
                                                Type:         string
                                              Name:
                                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                                Type:  string
                                              Optional:
                                                Description:  Specify whether the Secret or its key must be defined
                                                Type:         boolean
                                            Required:
                                              key
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                        Type:                             object
                                    Required:
                                      name
                                    Type:  object
                                  Type:    array
                                Env From:
                                  Description:  EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
                                  Items:
                                    Description:  EnvFromSource represents the source of a set of ConfigMaps
                                    Properties:
                                      Config Map Ref:
                                        Description:  The ConfigMap to select from
                                        Properties:
                                          Name:
                                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                            Type:  string
                                          Optional:
                                            Description:              Specify whether the ConfigMap must be defined
                                            Type:                     boolean
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                      Prefix:
                                        Description:  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                                        Type:         string
                                      Secret Ref:
                                        Description:  The Secret to select from
                                        Properties:
                                          Name:
                                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                            Type:  string
                                          Optional:
                                            Description:              Specify whether the Secret must be defined
                                            Type:                     boolean
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                    Type:                             object
                                  Type:                               array
                                Image:
                                  Description:  Image name to be used by the MariaDB instances. The supported format is `<image>:<tag>`.
                                  Type:         string
                                Image Pull Policy:
                                  Description:  ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
                                  Enum:
                                    Always
                                    Never
                                    IfNotPresent
                                  Type:  string
                                Liveness Probe:
                                  Description:  LivenessProbe to be used in the Container.
                                  Properties:
                                    Exec:
                                      Description:  Exec specifies the action to take.
                                      Properties:
                                        Command:
                                          Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                          Items:
                                            Type:  string
                                          Type:    array
                                      Type:        object
                                    Failure Threshold:
                                      Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                                      Format:  int32
                                      Type:    integer
                                    Grpc:
                                      Description:  GRPC specifies an action involving a GRPC port.
                                      Properties:
                                        Port:
                                          Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                          Format:       int32
                                          Type:         integer
                                        Service:
                                          Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                          Type:  string
                                      Required:
                                        port
                                      Type:  object
                                    Http Get:
                                      Description:  HTTPGet specifies the http request to perform.
                                      Properties:
                                        Host:
                                          Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                          Type:  string
                                        Http Headers:
                                          Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                          Items:
                                            Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                            Properties:
                                              Name:
                                                Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                                Type:  string
                                              Value:
                                                Description:  The header field value
                                                Type:         string
                                            Required:
                                              name
                                              value
                                            Type:  object
                                          Type:    array
                                        Path:
                                          Description:  Path to access on the HTTP server.
                                          Type:         string
                                        Port:
                                          Any Of:
                                            Type:       integer
                                            Type:       string
                                          Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                          X - Kubernetes - Int - Or - String:  true
                                        Scheme:
                                          Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                          Type:  string
                                      Required:
                                        port
                                      Type:  object
                                    Initial Delay Seconds:
                                      Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                      Format:  int32
                                      Type:    integer
                                    Period Seconds:
                                      Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                                      Format:  int32
                                      Type:    integer
                                    Success Threshold:
                                      Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                      Format:  int32
                                      Type:    integer
                                    Tcp Socket:
                                      Description:  TCPSocket specifies an action involving a TCP port.
                                      Properties:
                                        Host:
                                          Description:  Optional: Host name to connect to, defaults to the pod IP.
                                          Type:         string
                                        Port:
                                          Any Of:
                                            Type:       integer
                                            Type:       string
                                          Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                          X - Kubernetes - Int - Or - String:  true
                                      Required:
                                        port
                                      Type:  object
                                    Termination Grace Period Seconds:
                                      Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                                      Format:  int64
                                      Type:    integer
                                    Timeout Seconds:
                                      Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                      Format:  int32
                                      Type:    integer
                                  Type:        object
                                Readiness Probe:
                                  Description:  ReadinessProbe to be used in the Container.
                                  Properties:
                                    Exec:
                                      Description:  Exec specifies the action to take.
                                      Properties:
                                        Command:
                                          Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                          Items:
                                            Type:  string
                                          Type:    array
                                      Type:        object
                                    Failure Threshold:
                                      Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                                      Format:  int32
                                      Type:    integer
                                    Grpc:
                                      Description:  GRPC specifies an action involving a GRPC port.
                                      Properties:
                                        Port:
                                          Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                          Format:       int32
                                          Type:         integer
                                        Service:
                                          Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                          Type:  string
                                      Required:
                                        port
                                      Type:  object
                                    Http Get:
                                      Description:  HTTPGet specifies the http request to perform.
                                      Properties:
                                        Host:
                                          Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                          Type:  string
                                        Http Headers:
                                          Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                          Items:
                                            Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                            Properties:
                                              Name:
                                                Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                                Type:  string
                                              Value:
                                                Description:  The header field value
                                                Type:         string
                                            Required:
                                              name
                                              value
                                            Type:  object
                                          Type:    array
                                        Path:
                                          Description:  Path to access on the HTTP server.
                                          Type:         string
                                        Port:
                                          Any Of:
                                            Type:       integer
                                            Type:       string
                                          Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                          X - Kubernetes - Int - Or - String:  true
                                        Scheme:
                                          Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                          Type:  string
                                      Required:
                                        port
                                      Type:  object
                                    Initial Delay Seconds:
                                      Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                      Format:  int32
                                      Type:    integer
                                    Period Seconds:
                                      Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                                      Format:  int32
                                      Type:    integer
                                    Success Threshold:
                                      Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                      Format:  int32
                                      Type:    integer
                                    Tcp Socket:
                                      Description:  TCPSocket specifies an action involving a TCP port.
                                      Properties:
                                        Host:
                                          Description:  Optional: Host name to connect to, defaults to the pod IP.
                                          Type:         string
                                        Port:
                                          Any Of:
                                            Type:       integer
                                            Type:       string
                                          Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                          X - Kubernetes - Int - Or - String:  true
                                      Required:
                                        port
                                      Type:  object
                                    Termination Grace Period Seconds:
                                      Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                                      Format:  int64
                                      Type:    integer
                                    Timeout Seconds:
                                      Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                      Format:  int32
                                      Type:    integer
                                  Type:        object
                                Resources:
                                  Description:  Resouces describes the compute resource requirements.
                                  Properties:
                                    Claims:
                                      Description:  Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.


This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.


This field is immutable. It can only be set for containers.
                                      Items:
                                        Description:  ResourceClaim references one entry in PodSpec.ResourceClaims.
                                        Properties:
                                          Name:
                                            Description:  Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container.
                                            Type:  string
                                        Required:
                                          name
                                        Type:  object
                                      Type:    array
                                      X - Kubernetes - List - Map - Keys:
                                        name
                                      X - Kubernetes - List - Type:  map
                                    Limits:
                                      Additional Properties:
                                        Any Of:
                                          Type:                              integer
                                          Type:                              string
                                        Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        X - Kubernetes - Int - Or - String:  true
                                      Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                      Type:  object
                                    Requests:
                                      Additional Properties:
                                        Any Of:
                                          Type:                              integer
                                          Type:                              string
                                        Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        X - Kubernetes - Int - Or - String:  true
                                      Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                      Type:  object
                                  Type:      object
                                Security Context:
                                  Description:  SecurityContext holds security configuration that will be applied to a container.
                                  Properties:
                                    Allow Privilege Escalation:
                                      Description:  AllowPrivilegeEscalation controls whether a process can gain more
privileges than its parent process. This bool directly controls if
the no_new_privs flag will be set on the container process.
AllowPrivilegeEscalation is true always when the container is:
1) run as Privileged
2) has CAP_SYS_ADMIN
Note that this field cannot be set when spec.os.name is windows.
                                      Type:  boolean
                                    Capabilities:
                                      Description:  The capabilities to add/drop when running containers.
Defaults to the default set of capabilities granted by the container runtime.
Note that this field cannot be set when spec.os.name is windows.
                                      Properties:
                                        Add:
                                          Description:  Added capabilities
                                          Items:
                                            Description:  Capability represent POSIX capabilities type
                                            Type:         string
                                          Type:           array
                                        Drop:
                                          Description:  Removed capabilities
                                          Items:
                                            Description:  Capability represent POSIX capabilities type
                                            Type:         string
                                          Type:           array
                                      Type:               object
                                    Privileged:
                                      Description:  Run container in privileged mode.
Processes in privileged containers are essentially equivalent to root on the host.
Defaults to false.
Note that this field cannot be set when spec.os.name is windows.
                                      Type:  boolean
                                    Proc Mount:
                                      Description:  procMount denotes the type of proc mount to use for the containers.
The default is DefaultProcMount which uses the container runtime defaults for
readonly paths and masked paths.
This requires the ProcMountType feature flag to be enabled.
Note that this field cannot be set when spec.os.name is windows.
                                      Type:  string
                                    Read Only Root Filesystem:
                                      Description:  Whether this container has a read-only root filesystem.
Default is false.
Note that this field cannot be set when spec.os.name is windows.
                                      Type:  boolean
                                    Run As Group:
                                      Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                      Format:  int64
                                      Type:    integer
                                    Run As Non Root:
                                      Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                      Type:  boolean
                                    Run As User:
                                      Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                      Format:  int64
                                      Type:    integer
                                    Se Linux Options:
                                      Description:  The SELinux context to be applied to the container.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                      Properties:
                                        Level:
                                          Description:  Level is SELinux level label that applies to the container.
                                          Type:         string
                                        Role:
                                          Description:  Role is a SELinux role label that applies to the container.
                                          Type:         string
                                        Type:
                                          Description:  Type is a SELinux type label that applies to the container.
                                          Type:         string
                                        User:
                                          Description:  User is a SELinux user label that applies to the container.
                                          Type:         string
                                      Type:             object
                                    Seccomp Profile:
                                      Description:  The seccomp options to use by this container. If seccomp options are
provided at both the pod & container level, the container options
override the pod options.
Note that this field cannot be set when spec.os.name is windows.
                                      Properties:
                                        Localhost Profile:
                                          Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                                          Type:  string
                                        Type:
                                          Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                                          Type:  string
                                      Required:
                                        type
                                      Type:  object
                                    Windows Options:
                                      Description:  The Windows specific settings applied to all containers.
If unspecified, the options from the PodSecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                                      Properties:
                                        Gmsa Credential Spec:
                                          Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                                          Type:  string
                                        Gmsa Credential Spec Name:
                                          Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                                          Type:         string
                                        Host Process:
                                          Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                                          Type:  boolean
                                        Run As User Name:
                                          Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                          Type:  string
                                      Type:      object
                                  Type:          object
                                Volume Mounts:
                                  Description:  VolumeMounts to be used in the Container.
                                  Items:
                                    Description:  VolumeMount describes a mounting of a Volume within a container.
                                    Properties:
                                      Mount Path:
                                        Description:  Path within the container at which the volume should be mounted.  Must
not contain ':'.
                                        Type:  string
                                      Mount Propagation:
                                        Description:  mountPropagation determines how mounts are propagated from the host
to container and the other way around.
When not set, MountPropagationNone is used.
This field is beta in 1.10.
                                        Type:  string
                                      Name:
                                        Description:  This must match the Name of a Volume.
                                        Type:         string
                                      Read Only:
                                        Description:  Mounted read-only if true, read-write otherwise (false or unspecified).
Defaults to false.
                                        Type:  boolean
                                      Sub Path:
                                        Description:  Path within the volume from which the container's volume should be mounted.
Defaults to "" (volume's root).
                                        Type:  string
                                      Sub Path Expr:
                                        Description:  Expanded path within the volume from which the container's volume should be mounted.
Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
Defaults to "" (volume's root).
SubPathExpr and SubPath are mutually exclusive.
                                        Type:  string
                                    Required:
                                      mountPath
                                      name
                                    Type:  object
                                  Type:    array
                              Required:
                                image
                              Type:  object
                            Type:    array
                          Liveness Probe:
                            Description:  LivenessProbe to be used in the Container.
                            Properties:
                              Exec:
                                Description:  Exec specifies the action to take.
                                Properties:
                                  Command:
                                    Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                    Items:
                                      Type:  string
                                    Type:    array
                                Type:        object
                              Failure Threshold:
                                Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                                Format:  int32
                                Type:    integer
                              Grpc:
                                Description:  GRPC specifies an action involving a GRPC port.
                                Properties:
                                  Port:
                                    Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                    Format:       int32
                                    Type:         integer
                                  Service:
                                    Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                    Type:  string
                                Required:
                                  port
                                Type:  object
                              Http Get:
                                Description:  HTTPGet specifies the http request to perform.
                                Properties:
                                  Host:
                                    Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                    Type:  string
                                  Http Headers:
                                    Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                    Items:
                                      Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                      Properties:
                                        Name:
                                          Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                          Type:  string
                                        Value:
                                          Description:  The header field value
                                          Type:         string
                                      Required:
                                        name
                                        value
                                      Type:  object
                                    Type:    array
                                  Path:
                                    Description:  Path to access on the HTTP server.
                                    Type:         string
                                  Port:
                                    Any Of:
                                      Type:       integer
                                      Type:       string
                                    Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                    X - Kubernetes - Int - Or - String:  true
                                  Scheme:
                                    Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                    Type:  string
                                Required:
                                  port
                                Type:  object
                              Initial Delay Seconds:
                                Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                Format:  int32
                                Type:    integer
                              Period Seconds:
                                Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                                Format:  int32
                                Type:    integer
                              Success Threshold:
                                Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                Format:  int32
                                Type:    integer
                              Tcp Socket:
                                Description:  TCPSocket specifies an action involving a TCP port.
                                Properties:
                                  Host:
                                    Description:  Optional: Host name to connect to, defaults to the pod IP.
                                    Type:         string
                                  Port:
                                    Any Of:
                                      Type:       integer
                                      Type:       string
                                    Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                    X - Kubernetes - Int - Or - String:  true
                                Required:
                                  port
                                Type:  object
                              Termination Grace Period Seconds:
                                Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                                Format:  int64
                                Type:    integer
                              Timeout Seconds:
                                Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                Format:  int32
                                Type:    integer
                            Type:        object
                          Node Selector:
                            Additional Properties:
                              Type:       string
                            Description:  NodeSelector to be used in the Pod.
                            Type:         object
                          Pod Metadata:
                            Description:  PodMetadata defines extra metadata for the Pod.
                            Properties:
                              Annotations:
                                Additional Properties:
                                  Type:       string
                                Description:  Annotations to be added to children resources.
                                Type:         object
                              Labels:
                                Additional Properties:
                                  Type:       string
                                Description:  Labels to be added to children resources.
                                Type:         object
                            Type:             object
                          Pod Security Context:
                            Description:  SecurityContext holds pod-level security attributes and common container settings.
                            Properties:
                              Fs Group:
                                Description:  A special supplemental group that applies to all containers in a pod.
Some volume types allow the Kubelet to change the ownership of that volume
to be owned by the pod:


1. The owning GID will be the FSGroup
2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
3. The permission bits are OR'd with rw-rw----


If unset, the Kubelet will not modify the ownership and permissions of any volume.
Note that this field cannot be set when spec.os.name is windows.
                                Format:  int64
                                Type:    integer
                              Fs Group Change Policy:
                                Description:  fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
before being exposed inside Pod. This field will only apply to
volume types which support fsGroup based ownership(and permissions).
It will have no effect on ephemeral volume types such as: secret, configmaps
and emptydir.
Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
Note that this field cannot be set when spec.os.name is windows.
                                Type:  string
                              Run As Group:
                                Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in SecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence
for that container.
Note that this field cannot be set when spec.os.name is windows.
                                Format:  int64
                                Type:    integer
                              Run As Non Root:
                                Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in SecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                Type:  boolean
                              Run As User:
                                Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in SecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence
for that container.
Note that this field cannot be set when spec.os.name is windows.
                                Format:  int64
                                Type:    integer
                              Se Linux Options:
                                Description:  The SELinux context to be applied to all containers.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in SecurityContext.  If set in
both SecurityContext and PodSecurityContext, the value specified in SecurityContext
takes precedence for that container.
Note that this field cannot be set when spec.os.name is windows.
                                Properties:
                                  Level:
                                    Description:  Level is SELinux level label that applies to the container.
                                    Type:         string
                                  Role:
                                    Description:  Role is a SELinux role label that applies to the container.
                                    Type:         string
                                  Type:
                                    Description:  Type is a SELinux type label that applies to the container.
                                    Type:         string
                                  User:
                                    Description:  User is a SELinux user label that applies to the container.
                                    Type:         string
                                Type:             object
                              Seccomp Profile:
                                Description:  The seccomp options to use by the containers in this pod.
Note that this field cannot be set when spec.os.name is windows.
                                Properties:
                                  Localhost Profile:
                                    Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                                    Type:  string
                                  Type:
                                    Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                                    Type:  string
                                Required:
                                  type
                                Type:  object
                              Supplemental Groups:
                                Description:  A list of groups applied to the first process run in each container, in addition
to the container's primary GID, the fsGroup (if specified), and group memberships
defined in the container image for the uid of the container process. If unspecified,
no additional groups are added to any container. Note that group memberships
defined in the container image for the uid of the container process are still effective,
even if they are not included in this list.
Note that this field cannot be set when spec.os.name is windows.
                                Items:
                                  Format:  int64
                                  Type:    integer
                                Type:      array
                              Sysctls:
                                Description:  Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
sysctls (by the container runtime) might fail to launch.
Note that this field cannot be set when spec.os.name is windows.
                                Items:
                                  Description:  Sysctl defines a kernel parameter to be set
                                  Properties:
                                    Name:
                                      Description:  Name of a property to set
                                      Type:         string
                                    Value:
                                      Description:  Value of a property to set
                                      Type:         string
                                  Required:
                                    name
                                    value
                                  Type:  object
                                Type:    array
                              Windows Options:
                                Description:  The Windows specific settings applied to all containers.
If unspecified, the options within a container's SecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                                Properties:
                                  Gmsa Credential Spec:
                                    Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                                    Type:  string
                                  Gmsa Credential Spec Name:
                                    Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                                    Type:         string
                                  Host Process:
                                    Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                                    Type:  boolean
                                  Run As User Name:
                                    Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                    Type:  string
                                Type:      object
                            Type:          object
                          Port:
                            Description:  Port where the exporter will be listening for connections.
                            Format:       int32
                            Type:         integer
                          Priority Class Name:
                            Description:  PriorityClassName to be used in the Pod.
                            Type:         string
                          Readiness Probe:
                            Description:  ReadinessProbe to be used in the Container.
                            Properties:
                              Exec:
                                Description:  Exec specifies the action to take.
                                Properties:
                                  Command:
                                    Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                    Items:
                                      Type:  string
                                    Type:    array
                                Type:        object
                              Failure Threshold:
                                Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                                Format:  int32
                                Type:    integer
                              Grpc:
                                Description:  GRPC specifies an action involving a GRPC port.
                                Properties:
                                  Port:
                                    Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                    Format:       int32
                                    Type:         integer
                                  Service:
                                    Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                    Type:  string
                                Required:
                                  port
                                Type:  object
                              Http Get:
                                Description:  HTTPGet specifies the http request to perform.
                                Properties:
                                  Host:
                                    Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                    Type:  string
                                  Http Headers:
                                    Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                    Items:
                                      Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                      Properties:
                                        Name:
                                          Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                          Type:  string
                                        Value:
                                          Description:  The header field value
                                          Type:         string
                                      Required:
                                        name
                                        value
                                      Type:  object
                                    Type:    array
                                  Path:
                                    Description:  Path to access on the HTTP server.
                                    Type:         string
                                  Port:
                                    Any Of:
                                      Type:       integer
                                      Type:       string
                                    Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                    X - Kubernetes - Int - Or - String:  true
                                  Scheme:
                                    Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                    Type:  string
                                Required:
                                  port
                                Type:  object
                              Initial Delay Seconds:
                                Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                Format:  int32
                                Type:    integer
                              Period Seconds:
                                Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                                Format:  int32
                                Type:    integer
                              Success Threshold:
                                Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                Format:  int32
                                Type:    integer
                              Tcp Socket:
                                Description:  TCPSocket specifies an action involving a TCP port.
                                Properties:
                                  Host:
                                    Description:  Optional: Host name to connect to, defaults to the pod IP.
                                    Type:         string
                                  Port:
                                    Any Of:
                                      Type:       integer
                                      Type:       string
                                    Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                    X - Kubernetes - Int - Or - String:  true
                                Required:
                                  port
                                Type:  object
                              Termination Grace Period Seconds:
                                Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                                Format:  int64
                                Type:    integer
                              Timeout Seconds:
                                Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                Format:  int32
                                Type:    integer
                            Type:        object
                          Resources:
                            Description:  Resouces describes the compute resource requirements.
                            Properties:
                              Claims:
                                Description:  Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.


This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.


This field is immutable. It can only be set for containers.
                                Items:
                                  Description:  ResourceClaim references one entry in PodSpec.ResourceClaims.
                                  Properties:
                                    Name:
                                      Description:  Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container.
                                      Type:  string
                                  Required:
                                    name
                                  Type:  object
                                Type:    array
                                X - Kubernetes - List - Map - Keys:
                                  name
                                X - Kubernetes - List - Type:  map
                              Limits:
                                Additional Properties:
                                  Any Of:
                                    Type:                              integer
                                    Type:                              string
                                  Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  X - Kubernetes - Int - Or - String:  true
                                Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                Type:  object
                              Requests:
                                Additional Properties:
                                  Any Of:
                                    Type:                              integer
                                    Type:                              string
                                  Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  X - Kubernetes - Int - Or - String:  true
                                Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                Type:  object
                            Type:      object
                          Security Context:
                            Description:  SecurityContext holds security configuration that will be applied to a container.
                            Properties:
                              Allow Privilege Escalation:
                                Description:  AllowPrivilegeEscalation controls whether a process can gain more
privileges than its parent process. This bool directly controls if
the no_new_privs flag will be set on the container process.
AllowPrivilegeEscalation is true always when the container is:
1) run as Privileged
2) has CAP_SYS_ADMIN
Note that this field cannot be set when spec.os.name is windows.
                                Type:  boolean
                              Capabilities:
                                Description:  The capabilities to add/drop when running containers.
Defaults to the default set of capabilities granted by the container runtime.
Note that this field cannot be set when spec.os.name is windows.
                                Properties:
                                  Add:
                                    Description:  Added capabilities
                                    Items:
                                      Description:  Capability represent POSIX capabilities type
                                      Type:         string
                                    Type:           array
                                  Drop:
                                    Description:  Removed capabilities
                                    Items:
                                      Description:  Capability represent POSIX capabilities type
                                      Type:         string
                                    Type:           array
                                Type:               object
                              Privileged:
                                Description:  Run container in privileged mode.
Processes in privileged containers are essentially equivalent to root on the host.
Defaults to false.
Note that this field cannot be set when spec.os.name is windows.
                                Type:  boolean
                              Proc Mount:
                                Description:  procMount denotes the type of proc mount to use for the containers.
The default is DefaultProcMount which uses the container runtime defaults for
readonly paths and masked paths.
This requires the ProcMountType feature flag to be enabled.
Note that this field cannot be set when spec.os.name is windows.
                                Type:  string
                              Read Only Root Filesystem:
                                Description:  Whether this container has a read-only root filesystem.
Default is false.
Note that this field cannot be set when spec.os.name is windows.
                                Type:  boolean
                              Run As Group:
                                Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                Format:  int64
                                Type:    integer
                              Run As Non Root:
                                Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                Type:  boolean
                              Run As User:
                                Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                Format:  int64
                                Type:    integer
                              Se Linux Options:
                                Description:  The SELinux context to be applied to the container.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                Properties:
                                  Level:
                                    Description:  Level is SELinux level label that applies to the container.
                                    Type:         string
                                  Role:
                                    Description:  Role is a SELinux role label that applies to the container.
                                    Type:         string
                                  Type:
                                    Description:  Type is a SELinux type label that applies to the container.
                                    Type:         string
                                  User:
                                    Description:  User is a SELinux user label that applies to the container.
                                    Type:         string
                                Type:             object
                              Seccomp Profile:
                                Description:  The seccomp options to use by this container. If seccomp options are
provided at both the pod & container level, the container options
override the pod options.
Note that this field cannot be set when spec.os.name is windows.
                                Properties:
                                  Localhost Profile:
                                    Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                                    Type:  string
                                  Type:
                                    Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                                    Type:  string
                                Required:
                                  type
                                Type:  object
                              Windows Options:
                                Description:  The Windows specific settings applied to all containers.
If unspecified, the options from the PodSecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                                Properties:
                                  Gmsa Credential Spec:
                                    Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                                    Type:  string
                                  Gmsa Credential Spec Name:
                                    Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                                    Type:         string
                                  Host Process:
                                    Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                                    Type:  boolean
                                  Run As User Name:
                                    Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                    Type:  string
                                Type:      object
                            Type:          object
                          Service Account Name:
                            Description:  ServiceAccountName is the name of the ServiceAccount to be used by the Pods.
                            Type:         string
                          Sidecar Containers:
                            Description:  SidecarContainers to be used in the Pod.
                            Items:
                              Description:  Container object definition.
                              Properties:
                                Args:
                                  Description:  Args to be used in the Container.
                                  Items:
                                    Type:  string
                                  Type:    array
                                Command:
                                  Description:  Command to be used in the Container.
                                  Items:
                                    Type:  string
                                  Type:    array
                                Env:
                                  Description:  Env represents the environment variables to be injected in a container.
                                  Items:
                                    Description:  EnvVar represents an environment variable present in a Container.
                                    Properties:
                                      Name:
                                        Description:  Name of the environment variable. Must be a C_IDENTIFIER.
                                        Type:         string
                                      Value:
                                        Description:  Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".
                                        Type:  string
                                      Value From:
                                        Description:  Source for the environment variable's value. Cannot be used if value is not empty.
                                        Properties:
                                          Config Map Key Ref:
                                            Description:  Selects a key of a ConfigMap.
                                            Properties:
                                              Key:
                                                Description:  The key to select.
                                                Type:         string
                                              Name:
                                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                                Type:  string
                                              Optional:
                                                Description:  Specify whether the ConfigMap or its key must be defined
                                                Type:         boolean
                                            Required:
                                              key
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                          Field Ref:
                                            Description:  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                                            Properties:
                                              API Version:
                                                Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                                Type:         string
                                              Field Path:
                                                Description:  Path of the field to select in the specified API version.
                                                Type:         string
                                            Required:
                                              fieldPath
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                          Resource Field Ref:
                                            Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                                            Properties:
                                              Container Name:
                                                Description:  Container name: required for volumes, optional for env vars
                                                Type:         string
                                              Divisor:
                                                Any Of:
                                                  Type:                              integer
                                                  Type:                              string
                                                Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                                Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                X - Kubernetes - Int - Or - String:  true
                                              Resource:
                                                Description:  Required: resource to select
                                                Type:         string
                                            Required:
                                              resource
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                          Secret Key Ref:
                                            Description:  Selects a key of a secret in the pod's namespace
                                            Properties:
                                              Key:
                                                Description:  The key of the secret to select from.  Must be a valid secret key.
                                                Type:         string
                                              Name:
                                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                                Type:  string
                                              Optional:
                                                Description:  Specify whether the Secret or its key must be defined
                                                Type:         boolean
                                            Required:
                                              key
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                        Type:                             object
                                    Required:
                                      name
                                    Type:  object
                                  Type:    array
                                Env From:
                                  Description:  EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
                                  Items:
                                    Description:  EnvFromSource represents the source of a set of ConfigMaps
                                    Properties:
                                      Config Map Ref:
                                        Description:  The ConfigMap to select from
                                        Properties:
                                          Name:
                                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                            Type:  string
                                          Optional:
                                            Description:              Specify whether the ConfigMap must be defined
                                            Type:                     boolean
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                      Prefix:
                                        Description:  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                                        Type:         string
                                      Secret Ref:
                                        Description:  The Secret to select from
                                        Properties:
                                          Name:
                                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                            Type:  string
                                          Optional:
                                            Description:              Specify whether the Secret must be defined
                                            Type:                     boolean
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                    Type:                             object
                                  Type:                               array
                                Image:
                                  Description:  Image name to be used by the MariaDB instances. The supported format is `<image>:<tag>`.
                                  Type:         string
                                Image Pull Policy:
                                  Description:  ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
                                  Enum:
                                    Always
                                    Never
                                    IfNotPresent
                                  Type:  string
                                Liveness Probe:
                                  Description:  LivenessProbe to be used in the Container.
                                  Properties:
                                    Exec:
                                      Description:  Exec specifies the action to take.
                                      Properties:
                                        Command:
                                          Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                          Items:
                                            Type:  string
                                          Type:    array
                                      Type:        object
                                    Failure Threshold:
                                      Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                                      Format:  int32
                                      Type:    integer
                                    Grpc:
                                      Description:  GRPC specifies an action involving a GRPC port.
                                      Properties:
                                        Port:
                                          Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                          Format:       int32
                                          Type:         integer
                                        Service:
                                          Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                          Type:  string
                                      Required:
                                        port
                                      Type:  object
                                    Http Get:
                                      Description:  HTTPGet specifies the http request to perform.
                                      Properties:
                                        Host:
                                          Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                          Type:  string
                                        Http Headers:
                                          Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                          Items:
                                            Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                            Properties:
                                              Name:
                                                Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                                Type:  string
                                              Value:
                                                Description:  The header field value
                                                Type:         string
                                            Required:
                                              name
                                              value
                                            Type:  object
                                          Type:    array
                                        Path:
                                          Description:  Path to access on the HTTP server.
                                          Type:         string
                                        Port:
                                          Any Of:
                                            Type:       integer
                                            Type:       string
                                          Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                          X - Kubernetes - Int - Or - String:  true
                                        Scheme:
                                          Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                          Type:  string
                                      Required:
                                        port
                                      Type:  object
                                    Initial Delay Seconds:
                                      Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                      Format:  int32
                                      Type:    integer
                                    Period Seconds:
                                      Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                                      Format:  int32
                                      Type:    integer
                                    Success Threshold:
                                      Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                      Format:  int32
                                      Type:    integer
                                    Tcp Socket:
                                      Description:  TCPSocket specifies an action involving a TCP port.
                                      Properties:
                                        Host:
                                          Description:  Optional: Host name to connect to, defaults to the pod IP.
                                          Type:         string
                                        Port:
                                          Any Of:
                                            Type:       integer
                                            Type:       string
                                          Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                          X - Kubernetes - Int - Or - String:  true
                                      Required:
                                        port
                                      Type:  object
                                    Termination Grace Period Seconds:
                                      Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                                      Format:  int64
                                      Type:    integer
                                    Timeout Seconds:
                                      Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                      Format:  int32
                                      Type:    integer
                                  Type:        object
                                Readiness Probe:
                                  Description:  ReadinessProbe to be used in the Container.
                                  Properties:
                                    Exec:
                                      Description:  Exec specifies the action to take.
                                      Properties:
                                        Command:
                                          Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                          Items:
                                            Type:  string
                                          Type:    array
                                      Type:        object
                                    Failure Threshold:
                                      Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                                      Format:  int32
                                      Type:    integer
                                    Grpc:
                                      Description:  GRPC specifies an action involving a GRPC port.
                                      Properties:
                                        Port:
                                          Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                          Format:       int32
                                          Type:         integer
                                        Service:
                                          Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                          Type:  string
                                      Required:
                                        port
                                      Type:  object
                                    Http Get:
                                      Description:  HTTPGet specifies the http request to perform.
                                      Properties:
                                        Host:
                                          Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                          Type:  string
                                        Http Headers:
                                          Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                          Items:
                                            Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                            Properties:
                                              Name:
                                                Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                                Type:  string
                                              Value:
                                                Description:  The header field value
                                                Type:         string
                                            Required:
                                              name
                                              value
                                            Type:  object
                                          Type:    array
                                        Path:
                                          Description:  Path to access on the HTTP server.
                                          Type:         string
                                        Port:
                                          Any Of:
                                            Type:       integer
                                            Type:       string
                                          Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                          X - Kubernetes - Int - Or - String:  true
                                        Scheme:
                                          Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                          Type:  string
                                      Required:
                                        port
                                      Type:  object
                                    Initial Delay Seconds:
                                      Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                      Format:  int32
                                      Type:    integer
                                    Period Seconds:
                                      Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                                      Format:  int32
                                      Type:    integer
                                    Success Threshold:
                                      Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                      Format:  int32
                                      Type:    integer
                                    Tcp Socket:
                                      Description:  TCPSocket specifies an action involving a TCP port.
                                      Properties:
                                        Host:
                                          Description:  Optional: Host name to connect to, defaults to the pod IP.
                                          Type:         string
                                        Port:
                                          Any Of:
                                            Type:       integer
                                            Type:       string
                                          Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                          X - Kubernetes - Int - Or - String:  true
                                      Required:
                                        port
                                      Type:  object
                                    Termination Grace Period Seconds:
                                      Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                                      Format:  int64
                                      Type:    integer
                                    Timeout Seconds:
                                      Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                      Format:  int32
                                      Type:    integer
                                  Type:        object
                                Resources:
                                  Description:  Resouces describes the compute resource requirements.
                                  Properties:
                                    Claims:
                                      Description:  Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.


This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.


This field is immutable. It can only be set for containers.
                                      Items:
                                        Description:  ResourceClaim references one entry in PodSpec.ResourceClaims.
                                        Properties:
                                          Name:
                                            Description:  Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container.
                                            Type:  string
                                        Required:
                                          name
                                        Type:  object
                                      Type:    array
                                      X - Kubernetes - List - Map - Keys:
                                        name
                                      X - Kubernetes - List - Type:  map
                                    Limits:
                                      Additional Properties:
                                        Any Of:
                                          Type:                              integer
                                          Type:                              string
                                        Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        X - Kubernetes - Int - Or - String:  true
                                      Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                      Type:  object
                                    Requests:
                                      Additional Properties:
                                        Any Of:
                                          Type:                              integer
                                          Type:                              string
                                        Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        X - Kubernetes - Int - Or - String:  true
                                      Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                      Type:  object
                                  Type:      object
                                Security Context:
                                  Description:  SecurityContext holds security configuration that will be applied to a container.
                                  Properties:
                                    Allow Privilege Escalation:
                                      Description:  AllowPrivilegeEscalation controls whether a process can gain more
privileges than its parent process. This bool directly controls if
the no_new_privs flag will be set on the container process.
AllowPrivilegeEscalation is true always when the container is:
1) run as Privileged
2) has CAP_SYS_ADMIN
Note that this field cannot be set when spec.os.name is windows.
                                      Type:  boolean
                                    Capabilities:
                                      Description:  The capabilities to add/drop when running containers.
Defaults to the default set of capabilities granted by the container runtime.
Note that this field cannot be set when spec.os.name is windows.
                                      Properties:
                                        Add:
                                          Description:  Added capabilities
                                          Items:
                                            Description:  Capability represent POSIX capabilities type
                                            Type:         string
                                          Type:           array
                                        Drop:
                                          Description:  Removed capabilities
                                          Items:
                                            Description:  Capability represent POSIX capabilities type
                                            Type:         string
                                          Type:           array
                                      Type:               object
                                    Privileged:
                                      Description:  Run container in privileged mode.
Processes in privileged containers are essentially equivalent to root on the host.
Defaults to false.
Note that this field cannot be set when spec.os.name is windows.
                                      Type:  boolean
                                    Proc Mount:
                                      Description:  procMount denotes the type of proc mount to use for the containers.
The default is DefaultProcMount which uses the container runtime defaults for
readonly paths and masked paths.
This requires the ProcMountType feature flag to be enabled.
Note that this field cannot be set when spec.os.name is windows.
                                      Type:  string
                                    Read Only Root Filesystem:
                                      Description:  Whether this container has a read-only root filesystem.
Default is false.
Note that this field cannot be set when spec.os.name is windows.
                                      Type:  boolean
                                    Run As Group:
                                      Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                      Format:  int64
                                      Type:    integer
                                    Run As Non Root:
                                      Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                      Type:  boolean
                                    Run As User:
                                      Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                      Format:  int64
                                      Type:    integer
                                    Se Linux Options:
                                      Description:  The SELinux context to be applied to the container.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                      Properties:
                                        Level:
                                          Description:  Level is SELinux level label that applies to the container.
                                          Type:         string
                                        Role:
                                          Description:  Role is a SELinux role label that applies to the container.
                                          Type:         string
                                        Type:
                                          Description:  Type is a SELinux type label that applies to the container.
                                          Type:         string
                                        User:
                                          Description:  User is a SELinux user label that applies to the container.
                                          Type:         string
                                      Type:             object
                                    Seccomp Profile:
                                      Description:  The seccomp options to use by this container. If seccomp options are
provided at both the pod & container level, the container options
override the pod options.
Note that this field cannot be set when spec.os.name is windows.
                                      Properties:
                                        Localhost Profile:
                                          Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                                          Type:  string
                                        Type:
                                          Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                                          Type:  string
                                      Required:
                                        type
                                      Type:  object
                                    Windows Options:
                                      Description:  The Windows specific settings applied to all containers.
If unspecified, the options from the PodSecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                                      Properties:
                                        Gmsa Credential Spec:
                                          Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                                          Type:  string
                                        Gmsa Credential Spec Name:
                                          Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                                          Type:         string
                                        Host Process:
                                          Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                                          Type:  boolean
                                        Run As User Name:
                                          Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                          Type:  string
                                      Type:      object
                                  Type:          object
                                Volume Mounts:
                                  Description:  VolumeMounts to be used in the Container.
                                  Items:
                                    Description:  VolumeMount describes a mounting of a Volume within a container.
                                    Properties:
                                      Mount Path:
                                        Description:  Path within the container at which the volume should be mounted.  Must
not contain ':'.
                                        Type:  string
                                      Mount Propagation:
                                        Description:  mountPropagation determines how mounts are propagated from the host
to container and the other way around.
When not set, MountPropagationNone is used.
This field is beta in 1.10.
                                        Type:  string
                                      Name:
                                        Description:  This must match the Name of a Volume.
                                        Type:         string
                                      Read Only:
                                        Description:  Mounted read-only if true, read-write otherwise (false or unspecified).
Defaults to false.
                                        Type:  boolean
                                      Sub Path:
                                        Description:  Path within the volume from which the container's volume should be mounted.
Defaults to "" (volume's root).
                                        Type:  string
                                      Sub Path Expr:
                                        Description:  Expanded path within the volume from which the container's volume should be mounted.
Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
Defaults to "" (volume's root).
SubPathExpr and SubPath are mutually exclusive.
                                        Type:  string
                                    Required:
                                      mountPath
                                      name
                                    Type:  object
                                  Type:    array
                              Required:
                                image
                              Type:  object
                            Type:    array
                          Tolerations:
                            Description:  Tolerations to be used in the Pod.
                            Items:
                              Description:  The pod this Toleration is attached to tolerates any taint that matches
the triple <key,value,effect> using the matching operator <operator>.
                              Properties:
                                Effect:
                                  Description:  Effect indicates the taint effect to match. Empty means match all taint effects.
When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                                  Type:  string
                                Key:
                                  Description:  Key is the taint key that the toleration applies to. Empty means match all taint keys.
If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                                  Type:  string
                                Operator:
                                  Description:  Operator represents a key's relationship to the value.
Valid operators are Exists and Equal. Defaults to Equal.
Exists is equivalent to wildcard for value, so that a pod can
tolerate all taints of a particular category.
                                  Type:  string
                                Toleration Seconds:
                                  Description:  TolerationSeconds represents the period of time the toleration (which must be
of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
it is not set, which means tolerate the taint forever (do not evict). Zero and
negative values will be treated as 0 (evict immediately) by the system.
                                  Format:  int64
                                  Type:    integer
                                Value:
                                  Description:  Value is the taint value the toleration matches to.
If the operator is Exists, the value should be empty, otherwise just a regular string.
                                  Type:  string
                              Type:      object
                            Type:        array
                          Topology Spread Constraints:
                            Description:  TopologySpreadConstraints to be used in the Pod.
                            Items:
                              Description:  TopologySpreadConstraint specifies how to spread matching pods among the given topology.
                              Properties:
                                Label Selector:
                                  Description:  LabelSelector is used to find matching pods.
Pods that match this label selector are counted to determine the number of pods
in their corresponding topology domain.
                                  Properties:
                                    Match Expressions:
                                      Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      Items:
                                        Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                        Properties:
                                          Key:
                                            Description:  key is the label key that the selector applies to.
                                            Type:         string
                                          Operator:
                                            Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                            Type:  string
                                          Values:
                                            Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                            Items:
                                              Type:  string
                                            Type:    array
                                        Required:
                                          key
                                          operator
                                        Type:  object
                                      Type:    array
                                    Match Labels:
                                      Additional Properties:
                                        Type:       string
                                      Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      Type:                     object
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Match Label Keys:
                                  Description:  MatchLabelKeys is a set of pod label keys to select the pods over which
spreading will be calculated. The keys are used to lookup values from the
incoming pod labels, those key-value labels are ANDed with labelSelector
to select the group of existing pods over which spreading will be calculated
for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
MatchLabelKeys cannot be set when LabelSelector isn't set.
Keys that don't exist in the incoming pod labels will
be ignored. A null or empty list means only match against labelSelector.


This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
                                  Items:
                                    Type:                        string
                                  Type:                          array
                                  X - Kubernetes - List - Type:  atomic
                                Max Skew:
                                  Description:  MaxSkew describes the degree to which pods may be unevenly distributed.
When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
between the number of matching pods in the target topology and the global minimum.
The global minimum is the minimum number of matching pods in an eligible domain
or zero if the number of eligible domains is less than MinDomains.
For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
labelSelector spread as 2/2/1:
In this case, the global minimum is 1.
| zone1 | zone2 | zone3 |
|  P P  |  P P  |   P   |
- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
violate MaxSkew(1).
- if MaxSkew is 2, incoming pod can be scheduled onto any zone.
When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
to topologies that satisfy it.
It's a required field. Default value is 1 and 0 is not allowed.
                                  Format:  int32
                                  Type:    integer
                                Min Domains:
                                  Description:  MinDomains indicates a minimum number of eligible domains.
When the number of eligible domains with matching topology keys is less than minDomains,
Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
And when the number of eligible domains with matching topology keys equals or greater than minDomains,
this value has no effect on scheduling.
As a result, when the number of eligible domains is less than minDomains,
scheduler won't schedule more than maxSkew Pods to those domains.
If value is nil, the constraint behaves as if MinDomains is equal to 1.
Valid values are integers greater than 0.
When value is not nil, WhenUnsatisfiable must be DoNotSchedule.


For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
labelSelector spread as 2/2/2:
| zone1 | zone2 | zone3 |
|  P P  |  P P  |  P P  |
The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
In this situation, new pod with the same labelSelector cannot be scheduled,
because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
it will violate MaxSkew.


This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
                                  Format:  int32
                                  Type:    integer
                                Node Affinity Policy:
                                  Description:  NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
when calculating pod topology spread skew. Options are:
- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.


If this value is nil, the behavior is equivalent to the Honor policy.
This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
                                  Type:  string
                                Node Taints Policy:
                                  Description:  NodeTaintsPolicy indicates how we will treat node taints when calculating
pod topology spread skew. Options are:
- Honor: nodes without taints, along with tainted nodes for which the incoming pod
has a toleration, are included.
- Ignore: node taints are ignored. All nodes are included.


If this value is nil, the behavior is equivalent to the Ignore policy.
This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
                                  Type:  string
                                Topology Key:
                                  Description:  TopologyKey is the key of node labels. Nodes that have a label with this key
and identical values are considered to be in the same topology.
We consider each <key, value> as a "bucket", and try to put balanced number
of pods into each bucket.
We define a domain as a particular instance of a topology.
Also, we define an eligible domain as a domain whose nodes meet the requirements of
nodeAffinityPolicy and nodeTaintsPolicy.
e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
It's a required field.
                                  Type:  string
                                When Unsatisfiable:
                                  Description:  WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
the spread constraint.
- DoNotSchedule (default) tells the scheduler not to schedule it.
- ScheduleAnyway tells the scheduler to schedule the pod in any location,
  but giving higher precedence to topologies that would help reduce the
  skew.
A constraint is considered "Unsatisfiable" for an incoming pod
if and only if every possible node assignment for that pod would violate
"MaxSkew" on some topology.
For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
labelSelector spread as 3/1/1:
| zone1 | zone2 | zone3 |
| P P P |   P   |   P   |
If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
won't make it *more* imbalanced.
It's a required field.
                                  Type:  string
                              Required:
                                maxSkew
                                topologyKey
                                whenUnsatisfiable
                              Type:  object
                            Type:    array
                          Volume Mounts:
                            Description:  VolumeMounts to be used in the Container.
                            Items:
                              Description:  VolumeMount describes a mounting of a Volume within a container.
                              Properties:
                                Mount Path:
                                  Description:  Path within the container at which the volume should be mounted.  Must
not contain ':'.
                                  Type:  string
                                Mount Propagation:
                                  Description:  mountPropagation determines how mounts are propagated from the host
to container and the other way around.
When not set, MountPropagationNone is used.
This field is beta in 1.10.
                                  Type:  string
                                Name:
                                  Description:  This must match the Name of a Volume.
                                  Type:         string
                                Read Only:
                                  Description:  Mounted read-only if true, read-write otherwise (false or unspecified).
Defaults to false.
                                  Type:  boolean
                                Sub Path:
                                  Description:  Path within the volume from which the container's volume should be mounted.
Defaults to "" (volume's root).
                                  Type:  string
                                Sub Path Expr:
                                  Description:  Expanded path within the volume from which the container's volume should be mounted.
Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
Defaults to "" (volume's root).
SubPathExpr and SubPath are mutually exclusive.
                                  Type:  string
                              Required:
                                mountPath
                                name
                              Type:  object
                            Type:    array
                          Volumes:
                            Description:  Volumes to be used in the Pod.
                            Items:
                              Description:  Volume represents a named volume in a pod that may be accessed by any container in the pod.
                              Properties:
                                Aws Elastic Block Store:
                                  Description:  awsElasticBlockStore represents an AWS Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                                  Properties:
                                    Fs Type:
                                      Description:  fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
TODO: how do we prevent errors in the filesystem from compromising the machine
                                      Type:  string
                                    Partition:
                                      Description:  partition is the partition in the volume that you want to mount.
If omitted, the default is to mount by volume name.
Examples: For volume /dev/sda1, you specify the partition as "1".
Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
                                      Format:  int32
                                      Type:    integer
                                    Read Only:
                                      Description:  readOnly value true will force the readOnly setting in VolumeMounts.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                                      Type:  boolean
                                    Volume ID:
                                      Description:  volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                                      Type:  string
                                  Required:
                                    volumeID
                                  Type:  object
                                Azure Disk:
                                  Description:  azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
                                  Properties:
                                    Caching Mode:
                                      Description:  cachingMode is the Host Caching mode: None, Read Only, Read Write.
                                      Type:         string
                                    Disk Name:
                                      Description:  diskName is the Name of the data disk in the blob storage
                                      Type:         string
                                    Disk URI:
                                      Description:  diskURI is the URI of data disk in the blob storage
                                      Type:         string
                                    Fs Type:
                                      Description:  fsType is Filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                                      Type:  string
                                    Kind:
                                      Description:  kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
                                      Type:         string
                                    Read Only:
                                      Description:  readOnly Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                      Type:  boolean
                                  Required:
                                    diskName
                                    diskURI
                                  Type:  object
                                Azure File:
                                  Description:  azureFile represents an Azure File Service mount on the host and bind mount to the pod.
                                  Properties:
                                    Read Only:
                                      Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                      Type:  boolean
                                    Secret Name:
                                      Description:  secretName is the  name of secret that contains Azure Storage Account Name and Key
                                      Type:         string
                                    Share Name:
                                      Description:  shareName is the azure share Name
                                      Type:         string
                                  Required:
                                    secretName
                                    shareName
                                  Type:  object
                                Cephfs:
                                  Description:  cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
                                  Properties:
                                    Monitors:
                                      Description:  monitors is Required: Monitors is a collection of Ceph monitors
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                                      Items:
                                        Type:  string
                                      Type:    array
                                    Path:
                                      Description:  path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
                                      Type:         string
                                    Read Only:
                                      Description:  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                                      Type:  boolean
                                    Secret File:
                                      Description:  secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                                      Type:  string
                                    Secret Ref:
                                      Description:  secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                                      Properties:
                                        Name:
                                          Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                          Type:                     string
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    User:
                                      Description:  user is optional: User is the rados user name, default is admin
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                                      Type:  string
                                  Required:
                                    monitors
                                  Type:  object
                                Cinder:
                                  Description:  cinder represents a cinder volume attached and mounted on kubelets host machine.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                                  Properties:
                                    Fs Type:
                                      Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                                      Type:  string
                                    Read Only:
                                      Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                                      Type:  boolean
                                    Secret Ref:
                                      Description:  secretRef is optional: points to a secret object containing parameters used to connect
to OpenStack.
                                      Properties:
                                        Name:
                                          Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                          Type:                     string
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Volume ID:
                                      Description:  volumeID used to identify the volume in cinder.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                                      Type:  string
                                  Required:
                                    volumeID
                                  Type:  object
                                Config Map:
                                  Description:  configMap represents a configMap that should populate this volume
                                  Properties:
                                    Default Mode:
                                      Description:  defaultMode is optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                      Format:  int32
                                      Type:    integer
                                    Items:
                                      Description:  items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                                      Items:
                                        Description:  Maps a string key to a path within a volume.
                                        Properties:
                                          Key:
                                            Description:  key is the key to project.
                                            Type:         string
                                          Mode:
                                            Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                            Format:  int32
                                            Type:    integer
                                          Path:
                                            Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                            Type:  string
                                        Required:
                                          key
                                          path
                                        Type:  object
                                      Type:    array
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:  string
                                    Optional:
                                      Description:              optional specify whether the ConfigMap or its keys must be defined
                                      Type:                     boolean
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Csi:
                                  Description:  csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
                                  Properties:
                                    Driver:
                                      Description:  driver is the name of the CSI driver that handles this volume.
Consult with your admin for the correct name as registered in the cluster.
                                      Type:  string
                                    Fs Type:
                                      Description:  fsType to mount. Ex. "ext4", "xfs", "ntfs".
If not provided, the empty value is passed to the associated CSI driver
which will determine the default filesystem to apply.
                                      Type:  string
                                    Node Publish Secret Ref:
                                      Description:  nodePublishSecretRef is a reference to the secret object containing
sensitive information to pass to the CSI driver to complete the CSI
NodePublishVolume and NodeUnpublishVolume calls.
This field is optional, and  may be empty if no secret is required. If the
secret object contains more than one secret, all secret references are passed.
                                      Properties:
                                        Name:
                                          Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                          Type:                     string
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Read Only:
                                      Description:  readOnly specifies a read-only configuration for the volume.
Defaults to false (read/write).
                                      Type:  boolean
                                    Volume Attributes:
                                      Additional Properties:
                                        Type:       string
                                      Description:  volumeAttributes stores driver-specific properties that are passed to the CSI
driver. Consult your driver's documentation for supported values.
                                      Type:  object
                                  Required:
                                    driver
                                  Type:  object
                                Downward API:
                                  Description:  downwardAPI represents downward API about the pod that should populate this volume
                                  Properties:
                                    Default Mode:
                                      Description:  Optional: mode bits to use on created files by default. Must be a
Optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                      Format:  int32
                                      Type:    integer
                                    Items:
                                      Description:  Items is a list of downward API volume file
                                      Items:
                                        Description:  DownwardAPIVolumeFile represents information to create the file containing the pod field
                                        Properties:
                                          Field Ref:
                                            Description:  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
                                            Properties:
                                              API Version:
                                                Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                                Type:         string
                                              Field Path:
                                                Description:  Path of the field to select in the specified API version.
                                                Type:         string
                                            Required:
                                              fieldPath
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                          Mode:
                                            Description:  Optional: mode bits used to set permissions on this file, must be an octal value
between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                            Format:  int32
                                            Type:    integer
                                          Path:
                                            Description:  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
                                            Type:         string
                                          Resource Field Ref:
                                            Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                                            Properties:
                                              Container Name:
                                                Description:  Container name: required for volumes, optional for env vars
                                                Type:         string
                                              Divisor:
                                                Any Of:
                                                  Type:                              integer
                                                  Type:                              string
                                                Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                                Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                X - Kubernetes - Int - Or - String:  true
                                              Resource:
                                                Description:  Required: resource to select
                                                Type:         string
                                            Required:
                                              resource
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                        Required:
                                          path
                                        Type:  object
                                      Type:    array
                                  Type:        object
                                Empty Dir:
                                  Description:  emptyDir represents a temporary directory that shares a pod's lifetime.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                                  Properties:
                                    Medium:
                                      Description:  medium represents what type of storage medium should back this directory.
The default is "" which means to use the node's default medium.
Must be an empty string (default) or Memory.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                                      Type:  string
                                    Size Limit:
                                      Any Of:
                                        Type:       integer
                                        Type:       string
                                      Description:  sizeLimit is the total amount of local storage required for this EmptyDir volume.
The size limit is also applicable for memory medium.
The maximum usage on memory medium EmptyDir would be the minimum value between
the SizeLimit specified here and the sum of memory limits of all containers in a pod.
The default is nil which means that the limit is undefined.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                                      Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      X - Kubernetes - Int - Or - String:  true
                                  Type:                                    object
                                Ephemeral:
                                  Description:  ephemeral represents a volume that is handled by a cluster storage driver.
The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
and deleted when the pod is removed.


Use this if:
a) the volume is only needed while the pod runs,
b) features of normal volumes like restoring from snapshot or capacity
   tracking are needed,
c) the storage driver is specified through a storage class, and
d) the storage driver supports dynamic volume provisioning through
   a PersistentVolumeClaim (see EphemeralVolumeSource for more
   information on the connection between this volume type
   and PersistentVolumeClaim).


Use PersistentVolumeClaim or one of the vendor-specific
APIs for volumes that persist for longer than the lifecycle
of an individual pod.


Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
be used that way - see the documentation of the driver for
more information.


A pod can use both types of ephemeral volumes and
persistent volumes at the same time.
                                  Properties:
                                    Volume Claim Template:
                                      Description:  Will be used to create a stand-alone PVC to provision the volume.
The pod in which this EphemeralVolumeSource is embedded will be the
owner of the PVC, i.e. the PVC will be deleted together with the
pod.  The name of the PVC will be `<pod name>-<volume name>` where
`<volume name>` is the name from the `PodSpec.Volumes` array
entry. Pod validation will reject the pod if the concatenated name
is not valid for a PVC (for example, too long).


An existing PVC with that name that is not owned by the pod
will *not* be used for the pod to avoid using an unrelated
volume by mistake. Starting the pod is then blocked until
the unrelated PVC is removed. If such a pre-created PVC is
meant to be used by the pod, the PVC has to updated with an
owner reference to the pod once the pod exists. Normally
this should not be necessary, but it may be useful when
manually reconstructing a broken cluster.


This field is read-only and no changes will be made by Kubernetes
to the PVC after it has been created.


Required, must not be nil.
                                      Properties:
                                        Metadata:
                                          Description:  May contain labels and annotations that will be copied into the PVC
when creating it. No other fields are allowed and will be rejected during
validation.
                                          Type:  object
                                        Spec:
                                          Description:  The specification for the PersistentVolumeClaim. The entire content is
copied unchanged into the PVC that gets created from this
template. The same fields as in a PersistentVolumeClaim
are also valid here.
                                          Properties:
                                            Access Modes:
                                              Description:  accessModes contains the desired access modes the volume should have.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                                              Items:
                                                Type:  string
                                              Type:    array
                                            Data Source:
                                              Description:  dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                                              Properties:
                                                API Group:
                                                  Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                                  Type:  string
                                                Kind:
                                                  Description:  Kind is the type of resource being referenced
                                                  Type:         string
                                                Name:
                                                  Description:  Name is the name of resource being referenced
                                                  Type:         string
                                              Required:
                                                kind
                                                name
                                              Type:                         object
                                              X - Kubernetes - Map - Type:  atomic
                                            Data Source Ref:
                                              Description:  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                              Properties:
                                                API Group:
                                                  Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                                  Type:  string
                                                Kind:
                                                  Description:  Kind is the type of resource being referenced
                                                  Type:         string
                                                Name:
                                                  Description:  Name is the name of resource being referenced
                                                  Type:         string
                                                Namespace:
                                                  Description:  Namespace is the namespace of resource being referenced
Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                                  Type:  string
                                              Required:
                                                kind
                                                name
                                              Type:  object
                                            Resources:
                                              Description:  resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                                              Properties:
                                                Limits:
                                                  Additional Properties:
                                                    Any Of:
                                                      Type:                              integer
                                                      Type:                              string
                                                    Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                    X - Kubernetes - Int - Or - String:  true
                                                  Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                                  Type:  object
                                                Requests:
                                                  Additional Properties:
                                                    Any Of:
                                                      Type:                              integer
                                                      Type:                              string
                                                    Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                    X - Kubernetes - Int - Or - String:  true
                                                  Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                                  Type:  object
                                              Type:      object
                                            Selector:
                                              Description:  selector is a label query over volumes to consider for binding.
                                              Properties:
                                                Match Expressions:
                                                  Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                  Items:
                                                    Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                    Properties:
                                                      Key:
                                                        Description:  key is the label key that the selector applies to.
                                                        Type:         string
                                                      Operator:
                                                        Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                        Type:  string
                                                      Values:
                                                        Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                        Items:
                                                          Type:  string
                                                        Type:    array
                                                    Required:
                                                      key
                                                      operator
                                                    Type:  object
                                                  Type:    array
                                                Match Labels:
                                                  Additional Properties:
                                                    Type:       string
                                                  Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                  Type:                     object
                                              Type:                         object
                                              X - Kubernetes - Map - Type:  atomic
                                            Storage Class Name:
                                              Description:  storageClassName is the name of the StorageClass required by the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                                              Type:  string
                                            Volume Attributes Class Name:
                                              Description:  volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
If specified, the CSI driver will create or update the volume with the attributes defined
in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
will be set by the persistentvolume controller if it exists.
If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
exists.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
                                              Type:  string
                                            Volume Mode:
                                              Description:  volumeMode defines what type of volume is required by the claim.
Value of Filesystem is implied when not included in claim spec.
                                              Type:  string
                                            Volume Name:
                                              Description:  volumeName is the binding reference to the PersistentVolume backing this claim.
                                              Type:         string
                                          Type:             object
                                      Required:
                                        spec
                                      Type:  object
                                  Type:      object
                                Fc:
                                  Description:  fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
                                  Properties:
                                    Fs Type:
                                      Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
TODO: how do we prevent errors in the filesystem from compromising the machine
                                      Type:  string
                                    Lun:
                                      Description:  lun is Optional: FC target lun number
                                      Format:       int32
                                      Type:         integer
                                    Read Only:
                                      Description:  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                      Type:  boolean
                                    Target WW Ns:
                                      Description:  targetWWNs is Optional: FC target worldwide names (WWNs)
                                      Items:
                                        Type:  string
                                      Type:    array
                                    Wwids:
                                      Description:  wwids Optional: FC volume world wide identifiers (wwids)
Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
                                      Items:
                                        Type:  string
                                      Type:    array
                                  Type:        object
                                Flex Volume:
                                  Description:  flexVolume represents a generic volume resource that is
provisioned/attached using an exec based plugin.
                                  Properties:
                                    Driver:
                                      Description:  driver is the name of the driver to use for this volume.
                                      Type:         string
                                    Fs Type:
                                      Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
                                      Type:  string
                                    Options:
                                      Additional Properties:
                                        Type:       string
                                      Description:  options is Optional: this field holds extra command options if any.
                                      Type:         object
                                    Read Only:
                                      Description:  readOnly is Optional: defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                      Type:  boolean
                                    Secret Ref:
                                      Description:  secretRef is Optional: secretRef is reference to the secret object containing
sensitive information to pass to the plugin scripts. This may be
empty if no secret object is specified. If the secret object
contains more than one secret, all secrets are passed to the plugin
scripts.
                                      Properties:
                                        Name:
                                          Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                          Type:                     string
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                  Required:
                                    driver
                                  Type:  object
                                Flocker:
                                  Description:  flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
                                  Properties:
                                    Dataset Name:
                                      Description:  datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
should be considered as deprecated
                                      Type:  string
                                    Dataset UUID:
                                      Description:  datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
                                      Type:         string
                                  Type:             object
                                Gce Persistent Disk:
                                  Description:  gcePersistentDisk represents a GCE Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                                  Properties:
                                    Fs Type:
                                      Description:  fsType is filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
TODO: how do we prevent errors in the filesystem from compromising the machine
                                      Type:  string
                                    Partition:
                                      Description:  partition is the partition in the volume that you want to mount.
If omitted, the default is to mount by volume name.
Examples: For volume /dev/sda1, you specify the partition as "1".
Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                                      Format:  int32
                                      Type:    integer
                                    Pd Name:
                                      Description:  pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                                      Type:  string
                                    Read Only:
                                      Description:  readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                                      Type:  boolean
                                  Required:
                                    pdName
                                  Type:  object
                                Git Repo:
                                  Description:  gitRepo represents a git repository at a particular revision.
DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
into the Pod's container.
                                  Properties:
                                    Directory:
                                      Description:  directory is the target directory name.
Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
git repository.  Otherwise, if specified, the volume will contain the git repository in
the subdirectory with the given name.
                                      Type:  string
                                    Repository:
                                      Description:  repository is the URL
                                      Type:         string
                                    Revision:
                                      Description:  revision is the commit hash for the specified revision.
                                      Type:         string
                                  Required:
                                    repository
                                  Type:  object
                                Glusterfs:
                                  Description:  glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
More info: https://examples.k8s.io/volumes/glusterfs/README.md
                                  Properties:
                                    Endpoints:
                                      Description:  endpoints is the endpoint name that details Glusterfs topology.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                                      Type:  string
                                    Path:
                                      Description:  path is the Glusterfs volume path.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                                      Type:  string
                                    Read Only:
                                      Description:  readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
Defaults to false.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                                      Type:  boolean
                                  Required:
                                    endpoints
                                    path
                                  Type:  object
                                Host Path:
                                  Description:  hostPath represents a pre-existing file or directory on the host
machine that is directly exposed to the container. This is generally
used for system agents or other privileged things that are allowed
to see the host machine. Most containers will NOT need this.
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
---
TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not
mount host directories as read/write.
                                  Properties:
                                    Path:
                                      Description:  path of the directory on the host.
If the path is a symlink, it will follow the link to the real path.
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                                      Type:  string
                                    Type:
                                      Description:  type for HostPath Volume
Defaults to ""
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                                      Type:  string
                                  Required:
                                    path
                                  Type:  object
                                Iscsi:
                                  Description:  iscsi represents an ISCSI Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://examples.k8s.io/volumes/iscsi/README.md
                                  Properties:
                                    Chap Auth Discovery:
                                      Description:  chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
                                      Type:         boolean
                                    Chap Auth Session:
                                      Description:  chapAuthSession defines whether support iSCSI Session CHAP authentication
                                      Type:         boolean
                                    Fs Type:
                                      Description:  fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
TODO: how do we prevent errors in the filesystem from compromising the machine
                                      Type:  string
                                    Initiator Name:
                                      Description:  initiatorName is the custom iSCSI Initiator Name.
If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
<target portal>:<volume name> will be created for the connection.
                                      Type:  string
                                    Iqn:
                                      Description:  iqn is the target iSCSI Qualified Name.
                                      Type:         string
                                    Iscsi Interface:
                                      Description:  iscsiInterface is the interface Name that uses an iSCSI transport.
Defaults to 'default' (tcp).
                                      Type:  string
                                    Lun:
                                      Description:  lun represents iSCSI Target Lun number.
                                      Format:       int32
                                      Type:         integer
                                    Portals:
                                      Description:  portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
is other than default (typically TCP ports 860 and 3260).
                                      Items:
                                        Type:  string
                                      Type:    array
                                    Read Only:
                                      Description:  readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
                                      Type:  boolean
                                    Secret Ref:
                                      Description:  secretRef is the CHAP Secret for iSCSI target and initiator authentication
                                      Properties:
                                        Name:
                                          Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                          Type:                     string
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Target Portal:
                                      Description:  targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
is other than default (typically TCP ports 860 and 3260).
                                      Type:  string
                                  Required:
                                    iqn
                                    lun
                                    targetPortal
                                  Type:  object
                                Name:
                                  Description:  name of the volume.
Must be a DNS_LABEL and unique within the pod.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                  Type:  string
                                Nfs:
                                  Description:  nfs represents an NFS mount on the host that shares a pod's lifetime
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                                  Properties:
                                    Path:
                                      Description:  path that is exported by the NFS server.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                                      Type:  string
                                    Read Only:
                                      Description:  readOnly here will force the NFS export to be mounted with read-only permissions.
Defaults to false.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                                      Type:  boolean
                                    Server:
                                      Description:  server is the hostname or IP address of the NFS server.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                                      Type:  string
                                  Required:
                                    path
                                    server
                                  Type:  object
                                Persistent Volume Claim:
                                  Description:  persistentVolumeClaimVolumeSource represents a reference to a
PersistentVolumeClaim in the same namespace.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                                  Properties:
                                    Claim Name:
                                      Description:  claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                                      Type:  string
                                    Read Only:
                                      Description:  readOnly Will force the ReadOnly setting in VolumeMounts.
Default false.
                                      Type:  boolean
                                  Required:
                                    claimName
                                  Type:  object
                                Photon Persistent Disk:
                                  Description:  photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
                                  Properties:
                                    Fs Type:
                                      Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                                      Type:  string
                                    Pd ID:
                                      Description:  pdID is the ID that identifies Photon Controller persistent disk
                                      Type:         string
                                  Required:
                                    pdID
                                  Type:  object
                                Portworx Volume:
                                  Description:  portworxVolume represents a portworx volume attached and mounted on kubelets host machine
                                  Properties:
                                    Fs Type:
                                      Description:  fSType represents the filesystem type to mount
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
                                      Type:  string
                                    Read Only:
                                      Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                      Type:  boolean
                                    Volume ID:
                                      Description:  volumeID uniquely identifies a Portworx volume
                                      Type:         string
                                  Required:
                                    volumeID
                                  Type:  object
                                Projected:
                                  Description:  projected items for all in one resources secrets, configmaps, and downward API
                                  Properties:
                                    Default Mode:
                                      Description:  defaultMode are the mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                      Format:  int32
                                      Type:    integer
                                    Sources:
                                      Description:  sources is the list of volume projections
                                      Items:
                                        Description:  Projection that may be projected along with other supported volume types
                                        Properties:
                                          Cluster Trust Bundle:
                                            Description:  ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
of ClusterTrustBundle objects in an auto-updating file.


Alpha, gated by the ClusterTrustBundleProjection feature gate.


ClusterTrustBundle objects can either be selected by name, or by the
combination of signer name and a label selector.


Kubelet performs aggressive normalization of the PEM contents written
into the pod filesystem.  Esoteric PEM features such as inter-block
comments and block headers are stripped.  Certificates are deduplicated.
The ordering of certificates within the file is arbitrary, and Kubelet
may change the order over time.
                                            Properties:
                                              Label Selector:
                                                Description:  Select all ClusterTrustBundles that match this label selector.  Only has
effect if signerName is set.  Mutually-exclusive with name.  If unset,
interpreted as "match nothing".  If set but empty, interpreted as "match
everything".
                                                Properties:
                                                  Match Expressions:
                                                    Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                    Items:
                                                      Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                      Properties:
                                                        Key:
                                                          Description:  key is the label key that the selector applies to.
                                                          Type:         string
                                                        Operator:
                                                          Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                          Type:  string
                                                        Values:
                                                          Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                          Items:
                                                            Type:  string
                                                          Type:    array
                                                      Required:
                                                        key
                                                        operator
                                                      Type:  object
                                                    Type:    array
                                                  Match Labels:
                                                    Additional Properties:
                                                      Type:       string
                                                    Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                    Type:                     object
                                                Type:                         object
                                                X - Kubernetes - Map - Type:  atomic
                                              Name:
                                                Description:  Select a single ClusterTrustBundle by object name.  Mutually-exclusive
with signerName and labelSelector.
                                                Type:  string
                                              Optional:
                                                Description:  If true, don't block pod startup if the referenced ClusterTrustBundle(s)
aren't available.  If using name, then the named ClusterTrustBundle is
allowed not to exist.  If using signerName, then the combination of
signerName and labelSelector is allowed to match zero
ClusterTrustBundles.
                                                Type:  boolean
                                              Path:
                                                Description:  Relative path from the volume root to write the bundle.
                                                Type:         string
                                              Signer Name:
                                                Description:  Select all ClusterTrustBundles that match this signer name.
Mutually-exclusive with name.  The contents of all selected
ClusterTrustBundles will be unified and deduplicated.
                                                Type:  string
                                            Required:
                                              path
                                            Type:  object
                                          Config Map:
                                            Description:  configMap information about the configMap data to project
                                            Properties:
                                              Items:
                                                Description:  items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                                                Items:
                                                  Description:  Maps a string key to a path within a volume.
                                                  Properties:
                                                    Key:
                                                      Description:  key is the key to project.
                                                      Type:         string
                                                    Mode:
                                                      Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                                      Format:  int32
                                                      Type:    integer
                                                    Path:
                                                      Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                                      Type:  string
                                                  Required:
                                                    key
                                                    path
                                                  Type:  object
                                                Type:    array
                                              Name:
                                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                                Type:  string
                                              Optional:
                                                Description:              optional specify whether the ConfigMap or its keys must be defined
                                                Type:                     boolean
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                          Downward API:
                                            Description:  downwardAPI information about the downwardAPI data to project
                                            Properties:
                                              Items:
                                                Description:  Items is a list of DownwardAPIVolume file
                                                Items:
                                                  Description:  DownwardAPIVolumeFile represents information to create the file containing the pod field
                                                  Properties:
                                                    Field Ref:
                                                      Description:  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
                                                      Properties:
                                                        API Version:
                                                          Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                                          Type:         string
                                                        Field Path:
                                                          Description:  Path of the field to select in the specified API version.
                                                          Type:         string
                                                      Required:
                                                        fieldPath
                                                      Type:                         object
                                                      X - Kubernetes - Map - Type:  atomic
                                                    Mode:
                                                      Description:  Optional: mode bits used to set permissions on this file, must be an octal value
between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                                      Format:  int32
                                                      Type:    integer
                                                    Path:
                                                      Description:  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
                                                      Type:         string
                                                    Resource Field Ref:
                                                      Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                                                      Properties:
                                                        Container Name:
                                                          Description:  Container name: required for volumes, optional for env vars
                                                          Type:         string
                                                        Divisor:
                                                          Any Of:
                                                            Type:                              integer
                                                            Type:                              string
                                                          Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                                          Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                          X - Kubernetes - Int - Or - String:  true
                                                        Resource:
                                                          Description:  Required: resource to select
                                                          Type:         string
                                                      Required:
                                                        resource
                                                      Type:                         object
                                                      X - Kubernetes - Map - Type:  atomic
                                                  Required:
                                                    path
                                                  Type:  object
                                                Type:    array
                                            Type:        object
                                          Secret:
                                            Description:  secret information about the secret data to project
                                            Properties:
                                              Items:
                                                Description:  items if unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                                                Items:
                                                  Description:  Maps a string key to a path within a volume.
                                                  Properties:
                                                    Key:
                                                      Description:  key is the key to project.
                                                      Type:         string
                                                    Mode:
                                                      Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                                      Format:  int32
                                                      Type:    integer
                                                    Path:
                                                      Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                                      Type:  string
                                                  Required:
                                                    key
                                                    path
                                                  Type:  object
                                                Type:    array
                                              Name:
                                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                                Type:  string
                                              Optional:
                                                Description:              optional field specify whether the Secret or its key must be defined
                                                Type:                     boolean
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                          Service Account Token:
                                            Description:  serviceAccountToken is information about the serviceAccountToken data to project
                                            Properties:
                                              Audience:
                                                Description:  audience is the intended audience of the token. A recipient of a token
must identify itself with an identifier specified in the audience of the
token, and otherwise should reject the token. The audience defaults to the
identifier of the apiserver.
                                                Type:  string
                                              Expiration Seconds:
                                                Description:  expirationSeconds is the requested duration of validity of the service
account token. As the token approaches expiration, the kubelet volume
plugin will proactively rotate the service account token. The kubelet will
start trying to rotate the token if the token is older than 80 percent of
its time to live or if the token is older than 24 hours.Defaults to 1 hour
and must be at least 10 minutes.
                                                Format:  int64
                                                Type:    integer
                                              Path:
                                                Description:  path is the path relative to the mount point of the file to project the
token into.
                                                Type:  string
                                            Required:
                                              path
                                            Type:  object
                                        Type:      object
                                      Type:        array
                                  Type:            object
                                Quobyte:
                                  Description:  quobyte represents a Quobyte mount on the host that shares a pod's lifetime
                                  Properties:
                                    Group:
                                      Description:  group to map volume access to
Default is no group
                                      Type:  string
                                    Read Only:
                                      Description:  readOnly here will force the Quobyte volume to be mounted with read-only permissions.
Defaults to false.
                                      Type:  boolean
                                    Registry:
                                      Description:  registry represents a single or multiple Quobyte Registry services
specified as a string as host:port pair (multiple entries are separated with commas)
which acts as the central registry for volumes
                                      Type:  string
                                    Tenant:
                                      Description:  tenant owning the given Quobyte volume in the Backend
Used with dynamically provisioned Quobyte volumes, value is set by the plugin
                                      Type:  string
                                    User:
                                      Description:  user to map volume access to
Defaults to serivceaccount user
                                      Type:  string
                                    Volume:
                                      Description:  volume is a string that references an already created Quobyte volume by name.
                                      Type:         string
                                  Required:
                                    registry
                                    volume
                                  Type:  object
                                Rbd:
                                  Description:  rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
More info: https://examples.k8s.io/volumes/rbd/README.md
                                  Properties:
                                    Fs Type:
                                      Description:  fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
TODO: how do we prevent errors in the filesystem from compromising the machine
                                      Type:  string
                                    Image:
                                      Description:  image is the rados image name.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                      Type:  string
                                    Keyring:
                                      Description:  keyring is the path to key ring for RBDUser.
Default is /etc/ceph/keyring.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                      Type:  string
                                    Monitors:
                                      Description:  monitors is a collection of Ceph monitors.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                      Items:
                                        Type:  string
                                      Type:    array
                                    Pool:
                                      Description:  pool is the rados pool name.
Default is rbd.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                      Type:  string
                                    Read Only:
                                      Description:  readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                      Type:  boolean
                                    Secret Ref:
                                      Description:  secretRef is name of the authentication secret for RBDUser. If provided
overrides keyring.
Default is nil.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                      Properties:
                                        Name:
                                          Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                          Type:                     string
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    User:
                                      Description:  user is the rados user name.
Default is admin.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                      Type:  string
                                  Required:
                                    image
                                    monitors
                                  Type:  object
                                Scale IO:
                                  Description:  scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
                                  Properties:
                                    Fs Type:
                                      Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs".
Default is "xfs".
                                      Type:  string
                                    Gateway:
                                      Description:  gateway is the host address of the ScaleIO API Gateway.
                                      Type:         string
                                    Protection Domain:
                                      Description:  protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
                                      Type:         string
                                    Read Only:
                                      Description:  readOnly Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                      Type:  boolean
                                    Secret Ref:
                                      Description:  secretRef references to the secret for ScaleIO user and other
sensitive information. If this is not provided, Login operation will fail.
                                      Properties:
                                        Name:
                                          Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                          Type:                     string
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Ssl Enabled:
                                      Description:  sslEnabled Flag enable/disable SSL communication with Gateway, default false
                                      Type:         boolean
                                    Storage Mode:
                                      Description:  storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
Default is ThinProvisioned.
                                      Type:  string
                                    Storage Pool:
                                      Description:  storagePool is the ScaleIO Storage Pool associated with the protection domain.
                                      Type:         string
                                    System:
                                      Description:  system is the name of the storage system as configured in ScaleIO.
                                      Type:         string
                                    Volume Name:
                                      Description:  volumeName is the name of a volume already created in the ScaleIO system
that is associated with this volume source.
                                      Type:  string
                                  Required:
                                    gateway
                                    secretRef
                                    system
                                  Type:  object
                                Secret:
                                  Description:  secret represents a secret that should populate this volume.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
                                  Properties:
                                    Default Mode:
                                      Description:  defaultMode is Optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values
for mode bits. Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                      Format:  int32
                                      Type:    integer
                                    Items:
                                      Description:  items If unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                                      Items:
                                        Description:  Maps a string key to a path within a volume.
                                        Properties:
                                          Key:
                                            Description:  key is the key to project.
                                            Type:         string
                                          Mode:
                                            Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                            Format:  int32
                                            Type:    integer
                                          Path:
                                            Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                            Type:  string
                                        Required:
                                          key
                                          path
                                        Type:  object
                                      Type:    array
                                    Optional:
                                      Description:  optional field specify whether the Secret or its keys must be defined
                                      Type:         boolean
                                    Secret Name:
                                      Description:  secretName is the name of the secret in the pod's namespace to use.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
                                      Type:  string
                                  Type:      object
                                Storageos:
                                  Description:  storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
                                  Properties:
                                    Fs Type:
                                      Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                                      Type:  string
                                    Read Only:
                                      Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                      Type:  boolean
                                    Secret Ref:
                                      Description:  secretRef specifies the secret to use for obtaining the StorageOS API
credentials.  If not specified, default values will be attempted.
                                      Properties:
                                        Name:
                                          Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                          Type:                     string
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Volume Name:
                                      Description:  volumeName is the human-readable name of the StorageOS volume.  Volume
names are only unique within a namespace.
                                      Type:  string
                                    Volume Namespace:
                                      Description:  volumeNamespace specifies the scope of the volume within StorageOS.  If no
namespace is specified then the Pod's namespace will be used.  This allows the
Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
Set VolumeName to any name to override the default behaviour.
Set to "default" if you are not using namespaces within StorageOS.
Namespaces that do not pre-exist within StorageOS will be created.
                                      Type:  string
                                  Type:      object
                                Vsphere Volume:
                                  Description:  vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
                                  Properties:
                                    Fs Type:
                                      Description:  fsType is filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                                      Type:  string
                                    Storage Policy ID:
                                      Description:  storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
                                      Type:         string
                                    Storage Policy Name:
                                      Description:  storagePolicyName is the storage Policy Based Management (SPBM) profile name.
                                      Type:         string
                                    Volume Path:
                                      Description:  volumePath is the path that identifies vSphere volume vmdk
                                      Type:         string
                                  Required:
                                    volumePath
                                  Type:  object
                              Required:
                                name
                              Type:  object
                            Type:    array
                        Type:        object
                      Service Monitor:
                        Description:  ServiceMonitor defines the ServiceMonior object.
                        Properties:
                          Interval:
                            Description:  Interval for scraping metrics.
                            Type:         string
                          Job Label:
                            Description:  JobLabel to add to the ServiceMonitor object.
                            Type:         string
                          Prometheus Release:
                            Description:  PrometheusRelease is the release label to add to the ServiceMonitor object.
                            Type:         string
                          Scrape Timeout:
                            Description:  ScrapeTimeout defines the timeout for scraping metrics.
                            Type:         string
                        Type:             object
                    Type:                 object
                  Monitor:
                    Description:  Monitor monitors MariaDB server instances.
                    Properties:
                      Cooperative Monitoring:
                        Description:  CooperativeMonitoring enables coordination between multiple MaxScale instances running monitors. It is defaulted when HA is enabled.
                        Enum:
                          majority_of_all
                          majority_of_running
                        Type:  string
                      Interval:
                        Description:  Interval used to monitor MariaDB servers. It is defaulted if not provided.
                        Type:         string
                      Module:
                        Description:  Module is the module to use to monitor MariaDB servers. It is mandatory when no MariaDB reference is provided.
                        Type:         string
                      Name:
                        Description:  Name is the identifier of the monitor. It is defaulted if not provided.
                        Type:         string
                      Params:
                        Additional Properties:
                          Type:       string
                        Description:  Params defines extra parameters to pass to the monitor.
Any parameter supported by MaxScale may be specified here. See reference:
https://mariadb.com/kb/en/mariadb-maxscale-2308-common-monitor-parameters/.
Monitor specific parameter are also suported:
https://mariadb.com/kb/en/mariadb-maxscale-2308-galera-monitor/#galera-monitor-optional-parameters.
https://mariadb.com/kb/en/mariadb-maxscale-2308-mariadb-monitor/#configuration.
                        Type:  object
                      Suspend:
                        Description:  Suspend indicates whether the current resource should be suspended or not. Feature flag --feature-maxscale-suspend is required in the controller to enable this.
                        Type:         boolean
                    Type:             object
                  Pod Disruption Budget:
                    Description:  PodDisruptionBudget defines the budget for replica availability.
                    Properties:
                      Max Unavailable:
                        Any Of:
                          Type:                              integer
                          Type:                              string
                        Description:                         MaxUnavailable defines the number of maximum unavailable Pods.
                        X - Kubernetes - Int - Or - String:  true
                      Min Available:
                        Any Of:
                          Type:                              integer
                          Type:                              string
                        Description:                         MinAvailable defines the number of minimum available Pods.
                        X - Kubernetes - Int - Or - String:  true
                    Type:                                    object
                  Replicas:
                    Description:  Replicas indicates the number of desired instances.
                    Format:       int32
                    Type:         integer
                  Requeue Interval:
                    Description:  RequeueInterval is used to perform requeue reconciliations.
                    Type:         string
                  Services:
                    Description:  Services define how the traffic is forwarded to the MariaDB servers.
                    Items:
                      Description:  Services define how the traffic is forwarded to the MariaDB servers.
                      Properties:
                        Listener:
                          Description:  MaxScaleListener defines how the MaxScale server will listen for connections.
                          Properties:
                            Name:
                              Description:  Name is the identifier of the listener. It is defaulted if not provided
                              Type:         string
                            Params:
                              Additional Properties:
                                Type:       string
                              Description:  Params defines extra parameters to pass to the listener.
Any parameter supported by MaxScale may be specified here. See reference:
https://mariadb.com/kb/en/mariadb-maxscale-2308-mariadb-maxscale-configuration-guide/#listener_1.
                              Type:  object
                            Port:
                              Description:  Port is the network port where the MaxScale server will listen.
                              Format:       int32
                              Type:         integer
                            Protocol:
                              Description:  Protocol is the MaxScale protocol to use when communicating with the client. If not provided, it defaults to MariaDBProtocol.
                              Type:         string
                            Suspend:
                              Description:  Suspend indicates whether the current resource should be suspended or not. Feature flag --feature-maxscale-suspend is required in the controller to enable this.
                              Type:         boolean
                          Type:             object
                        Name:
                          Description:  Name is the identifier of the MaxScale service.
                          Type:         string
                        Params:
                          Additional Properties:
                            Type:       string
                          Description:  Params defines extra parameters to pass to the service.
Any parameter supported by MaxScale may be specified here. See reference:
https://mariadb.com/kb/en/mariadb-maxscale-2308-mariadb-maxscale-configuration-guide/#service_1.
Router specific parameter are also suported:
https://mariadb.com/kb/en/mariadb-maxscale-2308-readwritesplit/#configuration.
https://mariadb.com/kb/en/mariadb-maxscale-2308-readconnroute/#configuration.
                          Type:  object
                        Router:
                          Description:  Router is the type of router to use.
                          Enum:
                            readwritesplit
                            readconnroute
                          Type:  string
                        Suspend:
                          Description:  Suspend indicates whether the current resource should be suspended or not. Feature flag --feature-maxscale-suspend is required in the controller to enable this.
                          Type:         boolean
                      Required:
                        listener
                        name
                        router
                      Type:  object
                    Type:    array
                  Update Strategy:
                    Description:  UpdateStrategy defines the update strategy for the StatefulSet object.
                    Properties:
                      Rolling Update:
                        Description:  RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
                        Properties:
                          Max Unavailable:
                            Any Of:
                              Type:       integer
                              Type:       string
                            Description:  The maximum number of pods that can be unavailable during the update.
Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
Absolute number is calculated from percentage by rounding up. This can not be 0.
Defaults to 1. This field is alpha-level and is only honored by servers that enable the
MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to
Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it
will be counted towards MaxUnavailable.
                            X - Kubernetes - Int - Or - String:  true
                          Partition:
                            Description:  Partition indicates the ordinal at which the StatefulSet should be partitioned
for updates. During a rolling update, all pods from ordinal Replicas-1 to
Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched.
This is helpful in being able to do a canary based deployment. The default value is 0.
                            Format:  int32
                            Type:    integer
                        Type:        object
                      Type:
                        Description:  Type indicates the type of the StatefulSetUpdateStrategy.
Default is RollingUpdate.
                        Type:  string
                    Type:      object
                Type:          object
              Max Scale Ref:
                Description:  MaxScaleRef is a reference to a MaxScale resource to be used with the current MariaDB.
Providing this field implies delegating high availability tasks such as primary failover to MaxScale.
                Properties:
                  API Version:
                    Description:  API version of the referent.
                    Type:         string
                  Field Path:
                    Description:  If referring to a piece of an object instead of an entire object, this string
should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
For example, if the object reference is to a container within a pod, this would take on a value like:
"spec.containers{name}" (where "name" refers to the name of the container that triggered
the event) or if no container name is specified "spec.containers[2]" (container with
index 2 in this pod). This syntax is chosen only to have some well-defined way of
referencing a part of an object.
TODO: this design is not final and this field is subject to change in the future.
                    Type:  string
                  Kind:
                    Description:  Kind of the referent.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    Type:  string
                  Name:
                    Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    Type:  string
                  Namespace:
                    Description:  Namespace of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                    Type:  string
                  Resource Version:
                    Description:  Specific resourceVersion to which this reference is made, if any.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                    Type:  string
                  UID:
                    Description:  UID of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
                    Type:                     string
                Type:                         object
                X - Kubernetes - Map - Type:  atomic
              Metrics:
                Description:  Metrics configures metrics and how to scrape them.
                Properties:
                  Enabled:
                    Description:  Enabled is a flag to enable Metrics
                    Type:         boolean
                  Exporter:
                    Description:  Exporter defines the metrics exporter container.
                    Properties:
                      Affinity:
                        Description:  Affinity to be used in the Pod.
                        Properties:
                          Anti Affinity Enabled:
                            Description:  AntiAffinityEnabled configures PodAntiAffinity so each Pod is scheduled in a different Node, enabling HA.
Make sure you have at least as many Nodes available as the replicas to not end up with unscheduled Pods.
                            Type:  boolean
                          Node Affinity:
                            Description:  Describes node affinity scheduling rules for the pod.
                            Properties:
                              Preferred During Scheduling Ignored During Execution:
                                Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node matches the corresponding matchExpressions; the
node(s) with the highest sum are the most preferred.
                                Items:
                                  Description:  An empty preferred scheduling term matches all objects with implicit weight 0
(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                                  Properties:
                                    Preference:
                                      Description:  A node selector term, associated with the corresponding weight.
                                      Properties:
                                        Match Expressions:
                                          Description:  A list of node selector requirements by node's labels.
                                          Items:
                                            Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  The label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                Type:  string
                                              Values:
                                                Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Fields:
                                          Description:  A list of node selector requirements by node's fields.
                                          Items:
                                            Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  The label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                Type:  string
                                              Values:
                                                Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:                   object
                                          Type:                     array
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Weight:
                                      Description:  Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                                      Format:       int32
                                      Type:         integer
                                  Required:
                                    preference
                                    weight
                                  Type:  object
                                Type:    array
                              Required During Scheduling Ignored During Execution:
                                Description:  If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to an update), the system
may or may not try to eventually evict the pod from its node.
                                Properties:
                                  Node Selector Terms:
                                    Description:  Required. A list of node selector terms. The terms are ORed.
                                    Items:
                                      Description:  A null or empty node selector term matches no objects. The requirements of
them are ANDed.
The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                                      Properties:
                                        Match Expressions:
                                          Description:  A list of node selector requirements by node's labels.
                                          Items:
                                            Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  The label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                Type:  string
                                              Values:
                                                Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Fields:
                                          Description:  A list of node selector requirements by node's fields.
                                          Items:
                                            Description:  A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  The label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  Represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                Type:  string
                                              Values:
                                                Description:  An array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
This array is replaced during a strategic merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:                   object
                                          Type:                     array
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Type:                           array
                                Required:
                                  nodeSelectorTerms
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                            Type:                             object
                          Pod Affinity:
                            Description:  Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                            Properties:
                              Preferred During Scheduling Ignored During Execution:
                                Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
                                Items:
                                  Description:  The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                  Properties:
                                    Pod Affinity Term:
                                      Description:  Required. A pod affinity term, associated with the corresponding weight.
                                      Properties:
                                        Label Selector:
                                          Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Match Label Keys:
                                          Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Mismatch Label Keys:
                                          Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Namespace Selector:
                                          Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Namespaces:
                                          Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                          Items:
                                            Type:  string
                                          Type:    array
                                        Topology Key:
                                          Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                          Type:  string
                                      Required:
                                        topologyKey
                                      Type:  object
                                    Weight:
                                      Description:  weight associated with matching the corresponding podAffinityTerm,
in the range 1-100.
                                      Format:  int32
                                      Type:    integer
                                  Required:
                                    podAffinityTerm
                                    weight
                                  Type:  object
                                Type:    array
                              Required During Scheduling Ignored During Execution:
                                Description:  If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                Items:
                                  Description:  Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
                                  Properties:
                                    Label Selector:
                                      Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                      Properties:
                                        Match Expressions:
                                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          Items:
                                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  key is the label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                Type:  string
                                              Values:
                                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Labels:
                                          Additional Properties:
                                            Type:       string
                                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          Type:                     object
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Match Label Keys:
                                      Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                      Items:
                                        Type:                        string
                                      Type:                          array
                                      X - Kubernetes - List - Type:  atomic
                                    Mismatch Label Keys:
                                      Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                      Items:
                                        Type:                        string
                                      Type:                          array
                                      X - Kubernetes - List - Type:  atomic
                                    Namespace Selector:
                                      Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                      Properties:
                                        Match Expressions:
                                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          Items:
                                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  key is the label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                Type:  string
                                              Values:
                                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Labels:
                                          Additional Properties:
                                            Type:       string
                                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          Type:                     object
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Namespaces:
                                      Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                      Items:
                                        Type:  string
                                      Type:    array
                                    Topology Key:
                                      Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                      Type:  string
                                  Required:
                                    topologyKey
                                  Type:  object
                                Type:    array
                            Type:        object
                          Pod Anti Affinity:
                            Description:  Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                            Properties:
                              Preferred During Scheduling Ignored During Execution:
                                Description:  The scheduler will prefer to schedule pods to nodes that satisfy
the anti-affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling anti-affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
                                Items:
                                  Description:  The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                  Properties:
                                    Pod Affinity Term:
                                      Description:  Required. A pod affinity term, associated with the corresponding weight.
                                      Properties:
                                        Label Selector:
                                          Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Match Label Keys:
                                          Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Mismatch Label Keys:
                                          Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                          Items:
                                            Type:                        string
                                          Type:                          array
                                          X - Kubernetes - List - Type:  atomic
                                        Namespace Selector:
                                          Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Namespaces:
                                          Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                          Items:
                                            Type:  string
                                          Type:    array
                                        Topology Key:
                                          Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                          Type:  string
                                      Required:
                                        topologyKey
                                      Type:  object
                                    Weight:
                                      Description:  weight associated with matching the corresponding podAffinityTerm,
in the range 1-100.
                                      Format:  int32
                                      Type:    integer
                                  Required:
                                    podAffinityTerm
                                    weight
                                  Type:  object
                                Type:    array
                              Required During Scheduling Ignored During Execution:
                                Description:  If the anti-affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the anti-affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                Items:
                                  Description:  Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
                                  Properties:
                                    Label Selector:
                                      Description:  A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
                                      Properties:
                                        Match Expressions:
                                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          Items:
                                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  key is the label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                Type:  string
                                              Values:
                                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Labels:
                                          Additional Properties:
                                            Type:       string
                                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          Type:                     object
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Match Label Keys:
                                      Description:  MatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                      Items:
                                        Type:                        string
                                      Type:                          array
                                      X - Kubernetes - List - Type:  atomic
                                    Mismatch Label Keys:
                                      Description:  MismatchLabelKeys is a set of pod label keys to select which pods will
be taken into consideration. The keys are used to lookup values from the
incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`
to select the group of existing pods which pods will be taken into consideration
for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
pod labels will be ignored. The default value is empty.
The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.
Also, MismatchLabelKeys cannot be set when LabelSelector isn't set.
This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
                                      Items:
                                        Type:                        string
                                      Type:                          array
                                      X - Kubernetes - List - Type:  atomic
                                    Namespace Selector:
                                      Description:  A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
                                      Properties:
                                        Match Expressions:
                                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          Items:
                                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                            Properties:
                                              Key:
                                                Description:  key is the label key that the selector applies to.
                                                Type:         string
                                              Operator:
                                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                Type:  string
                                              Values:
                                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                Items:
                                                  Type:  string
                                                Type:    array
                                            Required:
                                              key
                                              operator
                                            Type:  object
                                          Type:    array
                                        Match Labels:
                                          Additional Properties:
                                            Type:       string
                                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          Type:                     object
                                      Type:                         object
                                      X - Kubernetes - Map - Type:  atomic
                                    Namespaces:
                                      Description:  namespaces specifies a static list of namespace names that the term applies to.
The term is applied to the union of the namespaces listed in this field
and the ones selected by namespaceSelector.
null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                      Items:
                                        Type:  string
                                      Type:    array
                                    Topology Key:
                                      Description:  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
the labelSelector in the specified namespaces, where co-located is defined as running on a node
whose value of the label with key topologyKey matches that of any node on which any of the
selected pods is running.
Empty topologyKey is not allowed.
                                      Type:  string
                                  Required:
                                    topologyKey
                                  Type:  object
                                Type:    array
                            Type:        object
                        Type:            object
                      Args:
                        Description:  Args to be used in the Container.
                        Items:
                          Type:  string
                        Type:    array
                      Command:
                        Description:  Command to be used in the Container.
                        Items:
                          Type:  string
                        Type:    array
                      Env:
                        Description:  Env represents the environment variables to be injected in a container.
                        Items:
                          Description:  EnvVar represents an environment variable present in a Container.
                          Properties:
                            Name:
                              Description:  Name of the environment variable. Must be a C_IDENTIFIER.
                              Type:         string
                            Value:
                              Description:  Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".
                              Type:  string
                            Value From:
                              Description:  Source for the environment variable's value. Cannot be used if value is not empty.
                              Properties:
                                Config Map Key Ref:
                                  Description:  Selects a key of a ConfigMap.
                                  Properties:
                                    Key:
                                      Description:  The key to select.
                                      Type:         string
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:  string
                                    Optional:
                                      Description:  Specify whether the ConfigMap or its key must be defined
                                      Type:         boolean
                                  Required:
                                    key
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Field Ref:
                                  Description:  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                                  Properties:
                                    API Version:
                                      Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                      Type:         string
                                    Field Path:
                                      Description:  Path of the field to select in the specified API version.
                                      Type:         string
                                  Required:
                                    fieldPath
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Resource Field Ref:
                                  Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                                  Properties:
                                    Container Name:
                                      Description:  Container name: required for volumes, optional for env vars
                                      Type:         string
                                    Divisor:
                                      Any Of:
                                        Type:                              integer
                                        Type:                              string
                                      Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                      Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      X - Kubernetes - Int - Or - String:  true
                                    Resource:
                                      Description:  Required: resource to select
                                      Type:         string
                                  Required:
                                    resource
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Secret Key Ref:
                                  Description:  Selects a key of a secret in the pod's namespace
                                  Properties:
                                    Key:
                                      Description:  The key of the secret to select from.  Must be a valid secret key.
                                      Type:         string
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:  string
                                    Optional:
                                      Description:  Specify whether the Secret or its key must be defined
                                      Type:         boolean
                                  Required:
                                    key
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                              Type:                             object
                          Required:
                            name
                          Type:  object
                        Type:    array
                      Env From:
                        Description:  EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
                        Items:
                          Description:  EnvFromSource represents the source of a set of ConfigMaps
                          Properties:
                            Config Map Ref:
                              Description:  The ConfigMap to select from
                              Properties:
                                Name:
                                  Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                  Type:  string
                                Optional:
                                  Description:              Specify whether the ConfigMap must be defined
                                  Type:                     boolean
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                            Prefix:
                              Description:  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                              Type:         string
                            Secret Ref:
                              Description:  The Secret to select from
                              Properties:
                                Name:
                                  Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                  Type:  string
                                Optional:
                                  Description:              Specify whether the Secret must be defined
                                  Type:                     boolean
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                          Type:                             object
                        Type:                               array
                      Image:
                        Description:  Image name to be used as metrics exporter. The supported format is `<image>:<tag>`.
Only mysqld-exporter >= v0.15.0 is supported: https://github.com/prometheus/mysqld_exporter
                        Type:  string
                      Image Pull Policy:
                        Description:  ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
                        Enum:
                          Always
                          Never
                          IfNotPresent
                        Type:  string
                      Image Pull Secrets:
                        Description:  ImagePullSecrets is the list of pull Secrets to be used to pull the image.
                        Items:
                          Description:  LocalObjectReference contains enough information to let you locate the
referenced object inside the same namespace.
                          Properties:
                            Name:
                              Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                              Type:                     string
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                        Type:                           array
                      Init Containers:
                        Description:  InitContainers to be used in the Pod.
                        Items:
                          Description:  Container object definition.
                          Properties:
                            Args:
                              Description:  Args to be used in the Container.
                              Items:
                                Type:  string
                              Type:    array
                            Command:
                              Description:  Command to be used in the Container.
                              Items:
                                Type:  string
                              Type:    array
                            Env:
                              Description:  Env represents the environment variables to be injected in a container.
                              Items:
                                Description:  EnvVar represents an environment variable present in a Container.
                                Properties:
                                  Name:
                                    Description:  Name of the environment variable. Must be a C_IDENTIFIER.
                                    Type:         string
                                  Value:
                                    Description:  Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".
                                    Type:  string
                                  Value From:
                                    Description:  Source for the environment variable's value. Cannot be used if value is not empty.
                                    Properties:
                                      Config Map Key Ref:
                                        Description:  Selects a key of a ConfigMap.
                                        Properties:
                                          Key:
                                            Description:  The key to select.
                                            Type:         string
                                          Name:
                                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                            Type:  string
                                          Optional:
                                            Description:  Specify whether the ConfigMap or its key must be defined
                                            Type:         boolean
                                        Required:
                                          key
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                      Field Ref:
                                        Description:  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                                        Properties:
                                          API Version:
                                            Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                            Type:         string
                                          Field Path:
                                            Description:  Path of the field to select in the specified API version.
                                            Type:         string
                                        Required:
                                          fieldPath
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                      Resource Field Ref:
                                        Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                                        Properties:
                                          Container Name:
                                            Description:  Container name: required for volumes, optional for env vars
                                            Type:         string
                                          Divisor:
                                            Any Of:
                                              Type:                              integer
                                              Type:                              string
                                            Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                            Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                            X - Kubernetes - Int - Or - String:  true
                                          Resource:
                                            Description:  Required: resource to select
                                            Type:         string
                                        Required:
                                          resource
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                      Secret Key Ref:
                                        Description:  Selects a key of a secret in the pod's namespace
                                        Properties:
                                          Key:
                                            Description:  The key of the secret to select from.  Must be a valid secret key.
                                            Type:         string
                                          Name:
                                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                            Type:  string
                                          Optional:
                                            Description:  Specify whether the Secret or its key must be defined
                                            Type:         boolean
                                        Required:
                                          key
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                    Type:                             object
                                Required:
                                  name
                                Type:  object
                              Type:    array
                            Env From:
                              Description:  EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
                              Items:
                                Description:  EnvFromSource represents the source of a set of ConfigMaps
                                Properties:
                                  Config Map Ref:
                                    Description:  The ConfigMap to select from
                                    Properties:
                                      Name:
                                        Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                        Type:  string
                                      Optional:
                                        Description:              Specify whether the ConfigMap must be defined
                                        Type:                     boolean
                                    Type:                         object
                                    X - Kubernetes - Map - Type:  atomic
                                  Prefix:
                                    Description:  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                                    Type:         string
                                  Secret Ref:
                                    Description:  The Secret to select from
                                    Properties:
                                      Name:
                                        Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                        Type:  string
                                      Optional:
                                        Description:              Specify whether the Secret must be defined
                                        Type:                     boolean
                                    Type:                         object
                                    X - Kubernetes - Map - Type:  atomic
                                Type:                             object
                              Type:                               array
                            Image:
                              Description:  Image name to be used by the MariaDB instances. The supported format is `<image>:<tag>`.
                              Type:         string
                            Image Pull Policy:
                              Description:  ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
                              Enum:
                                Always
                                Never
                                IfNotPresent
                              Type:  string
                            Liveness Probe:
                              Description:  LivenessProbe to be used in the Container.
                              Properties:
                                Exec:
                                  Description:  Exec specifies the action to take.
                                  Properties:
                                    Command:
                                      Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                      Items:
                                        Type:  string
                                      Type:    array
                                  Type:        object
                                Failure Threshold:
                                  Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                                  Format:  int32
                                  Type:    integer
                                Grpc:
                                  Description:  GRPC specifies an action involving a GRPC port.
                                  Properties:
                                    Port:
                                      Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                      Format:       int32
                                      Type:         integer
                                    Service:
                                      Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                      Type:  string
                                  Required:
                                    port
                                  Type:  object
                                Http Get:
                                  Description:  HTTPGet specifies the http request to perform.
                                  Properties:
                                    Host:
                                      Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                      Type:  string
                                    Http Headers:
                                      Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                      Items:
                                        Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                        Properties:
                                          Name:
                                            Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                            Type:  string
                                          Value:
                                            Description:  The header field value
                                            Type:         string
                                        Required:
                                          name
                                          value
                                        Type:  object
                                      Type:    array
                                    Path:
                                      Description:  Path to access on the HTTP server.
                                      Type:         string
                                    Port:
                                      Any Of:
                                        Type:       integer
                                        Type:       string
                                      Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                      X - Kubernetes - Int - Or - String:  true
                                    Scheme:
                                      Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                      Type:  string
                                  Required:
                                    port
                                  Type:  object
                                Initial Delay Seconds:
                                  Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                  Format:  int32
                                  Type:    integer
                                Period Seconds:
                                  Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                                  Format:  int32
                                  Type:    integer
                                Success Threshold:
                                  Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                  Format:  int32
                                  Type:    integer
                                Tcp Socket:
                                  Description:  TCPSocket specifies an action involving a TCP port.
                                  Properties:
                                    Host:
                                      Description:  Optional: Host name to connect to, defaults to the pod IP.
                                      Type:         string
                                    Port:
                                      Any Of:
                                        Type:       integer
                                        Type:       string
                                      Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                      X - Kubernetes - Int - Or - String:  true
                                  Required:
                                    port
                                  Type:  object
                                Termination Grace Period Seconds:
                                  Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                                  Format:  int64
                                  Type:    integer
                                Timeout Seconds:
                                  Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                  Format:  int32
                                  Type:    integer
                              Type:        object
                            Readiness Probe:
                              Description:  ReadinessProbe to be used in the Container.
                              Properties:
                                Exec:
                                  Description:  Exec specifies the action to take.
                                  Properties:
                                    Command:
                                      Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                      Items:
                                        Type:  string
                                      Type:    array
                                  Type:        object
                                Failure Threshold:
                                  Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                                  Format:  int32
                                  Type:    integer
                                Grpc:
                                  Description:  GRPC specifies an action involving a GRPC port.
                                  Properties:
                                    Port:
                                      Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                      Format:       int32
                                      Type:         integer
                                    Service:
                                      Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                      Type:  string
                                  Required:
                                    port
                                  Type:  object
                                Http Get:
                                  Description:  HTTPGet specifies the http request to perform.
                                  Properties:
                                    Host:
                                      Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                      Type:  string
                                    Http Headers:
                                      Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                      Items:
                                        Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                        Properties:
                                          Name:
                                            Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                            Type:  string
                                          Value:
                                            Description:  The header field value
                                            Type:         string
                                        Required:
                                          name
                                          value
                                        Type:  object
                                      Type:    array
                                    Path:
                                      Description:  Path to access on the HTTP server.
                                      Type:         string
                                    Port:
                                      Any Of:
                                        Type:       integer
                                        Type:       string
                                      Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                      X - Kubernetes - Int - Or - String:  true
                                    Scheme:
                                      Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                      Type:  string
                                  Required:
                                    port
                                  Type:  object
                                Initial Delay Seconds:
                                  Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                  Format:  int32
                                  Type:    integer
                                Period Seconds:
                                  Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                                  Format:  int32
                                  Type:    integer
                                Success Threshold:
                                  Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                  Format:  int32
                                  Type:    integer
                                Tcp Socket:
                                  Description:  TCPSocket specifies an action involving a TCP port.
                                  Properties:
                                    Host:
                                      Description:  Optional: Host name to connect to, defaults to the pod IP.
                                      Type:         string
                                    Port:
                                      Any Of:
                                        Type:       integer
                                        Type:       string
                                      Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                      X - Kubernetes - Int - Or - String:  true
                                  Required:
                                    port
                                  Type:  object
                                Termination Grace Period Seconds:
                                  Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                                  Format:  int64
                                  Type:    integer
                                Timeout Seconds:
                                  Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                  Format:  int32
                                  Type:    integer
                              Type:        object
                            Resources:
                              Description:  Resouces describes the compute resource requirements.
                              Properties:
                                Claims:
                                  Description:  Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.


This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.


This field is immutable. It can only be set for containers.
                                  Items:
                                    Description:  ResourceClaim references one entry in PodSpec.ResourceClaims.
                                    Properties:
                                      Name:
                                        Description:  Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container.
                                        Type:  string
                                    Required:
                                      name
                                    Type:  object
                                  Type:    array
                                  X - Kubernetes - List - Map - Keys:
                                    name
                                  X - Kubernetes - List - Type:  map
                                Limits:
                                  Additional Properties:
                                    Any Of:
                                      Type:                              integer
                                      Type:                              string
                                    Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    X - Kubernetes - Int - Or - String:  true
                                  Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                  Type:  object
                                Requests:
                                  Additional Properties:
                                    Any Of:
                                      Type:                              integer
                                      Type:                              string
                                    Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    X - Kubernetes - Int - Or - String:  true
                                  Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                  Type:  object
                              Type:      object
                            Security Context:
                              Description:  SecurityContext holds security configuration that will be applied to a container.
                              Properties:
                                Allow Privilege Escalation:
                                  Description:  AllowPrivilegeEscalation controls whether a process can gain more
privileges than its parent process. This bool directly controls if
the no_new_privs flag will be set on the container process.
AllowPrivilegeEscalation is true always when the container is:
1) run as Privileged
2) has CAP_SYS_ADMIN
Note that this field cannot be set when spec.os.name is windows.
                                  Type:  boolean
                                Capabilities:
                                  Description:  The capabilities to add/drop when running containers.
Defaults to the default set of capabilities granted by the container runtime.
Note that this field cannot be set when spec.os.name is windows.
                                  Properties:
                                    Add:
                                      Description:  Added capabilities
                                      Items:
                                        Description:  Capability represent POSIX capabilities type
                                        Type:         string
                                      Type:           array
                                    Drop:
                                      Description:  Removed capabilities
                                      Items:
                                        Description:  Capability represent POSIX capabilities type
                                        Type:         string
                                      Type:           array
                                  Type:               object
                                Privileged:
                                  Description:  Run container in privileged mode.
Processes in privileged containers are essentially equivalent to root on the host.
Defaults to false.
Note that this field cannot be set when spec.os.name is windows.
                                  Type:  boolean
                                Proc Mount:
                                  Description:  procMount denotes the type of proc mount to use for the containers.
The default is DefaultProcMount which uses the container runtime defaults for
readonly paths and masked paths.
This requires the ProcMountType feature flag to be enabled.
Note that this field cannot be set when spec.os.name is windows.
                                  Type:  string
                                Read Only Root Filesystem:
                                  Description:  Whether this container has a read-only root filesystem.
Default is false.
Note that this field cannot be set when spec.os.name is windows.
                                  Type:  boolean
                                Run As Group:
                                  Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                  Format:  int64
                                  Type:    integer
                                Run As Non Root:
                                  Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                  Type:  boolean
                                Run As User:
                                  Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                  Format:  int64
                                  Type:    integer
                                Se Linux Options:
                                  Description:  The SELinux context to be applied to the container.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                  Properties:
                                    Level:
                                      Description:  Level is SELinux level label that applies to the container.
                                      Type:         string
                                    Role:
                                      Description:  Role is a SELinux role label that applies to the container.
                                      Type:         string
                                    Type:
                                      Description:  Type is a SELinux type label that applies to the container.
                                      Type:         string
                                    User:
                                      Description:  User is a SELinux user label that applies to the container.
                                      Type:         string
                                  Type:             object
                                Seccomp Profile:
                                  Description:  The seccomp options to use by this container. If seccomp options are
provided at both the pod & container level, the container options
override the pod options.
Note that this field cannot be set when spec.os.name is windows.
                                  Properties:
                                    Localhost Profile:
                                      Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                                      Type:  string
                                    Type:
                                      Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                                      Type:  string
                                  Required:
                                    type
                                  Type:  object
                                Windows Options:
                                  Description:  The Windows specific settings applied to all containers.
If unspecified, the options from the PodSecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                                  Properties:
                                    Gmsa Credential Spec:
                                      Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                                      Type:  string
                                    Gmsa Credential Spec Name:
                                      Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                                      Type:         string
                                    Host Process:
                                      Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                                      Type:  boolean
                                    Run As User Name:
                                      Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                      Type:  string
                                  Type:      object
                              Type:          object
                            Volume Mounts:
                              Description:  VolumeMounts to be used in the Container.
                              Items:
                                Description:  VolumeMount describes a mounting of a Volume within a container.
                                Properties:
                                  Mount Path:
                                    Description:  Path within the container at which the volume should be mounted.  Must
not contain ':'.
                                    Type:  string
                                  Mount Propagation:
                                    Description:  mountPropagation determines how mounts are propagated from the host
to container and the other way around.
When not set, MountPropagationNone is used.
This field is beta in 1.10.
                                    Type:  string
                                  Name:
                                    Description:  This must match the Name of a Volume.
                                    Type:         string
                                  Read Only:
                                    Description:  Mounted read-only if true, read-write otherwise (false or unspecified).
Defaults to false.
                                    Type:  boolean
                                  Sub Path:
                                    Description:  Path within the volume from which the container's volume should be mounted.
Defaults to "" (volume's root).
                                    Type:  string
                                  Sub Path Expr:
                                    Description:  Expanded path within the volume from which the container's volume should be mounted.
Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
Defaults to "" (volume's root).
SubPathExpr and SubPath are mutually exclusive.
                                    Type:  string
                                Required:
                                  mountPath
                                  name
                                Type:  object
                              Type:    array
                          Required:
                            image
                          Type:  object
                        Type:    array
                      Liveness Probe:
                        Description:  LivenessProbe to be used in the Container.
                        Properties:
                          Exec:
                            Description:  Exec specifies the action to take.
                            Properties:
                              Command:
                                Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                Items:
                                  Type:  string
                                Type:    array
                            Type:        object
                          Failure Threshold:
                            Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Grpc:
                            Description:  GRPC specifies an action involving a GRPC port.
                            Properties:
                              Port:
                                Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                Format:       int32
                                Type:         integer
                              Service:
                                Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                Type:  string
                            Required:
                              port
                            Type:  object
                          Http Get:
                            Description:  HTTPGet specifies the http request to perform.
                            Properties:
                              Host:
                                Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                Type:  string
                              Http Headers:
                                Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                Items:
                                  Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                  Properties:
                                    Name:
                                      Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                      Type:  string
                                    Value:
                                      Description:  The header field value
                                      Type:         string
                                  Required:
                                    name
                                    value
                                  Type:  object
                                Type:    array
                              Path:
                                Description:  Path to access on the HTTP server.
                                Type:         string
                              Port:
                                Any Of:
                                  Type:       integer
                                  Type:       string
                                Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                X - Kubernetes - Int - Or - String:  true
                              Scheme:
                                Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                Type:  string
                            Required:
                              port
                            Type:  object
                          Initial Delay Seconds:
                            Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                            Format:  int32
                            Type:    integer
                          Period Seconds:
                            Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Success Threshold:
                            Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Tcp Socket:
                            Description:  TCPSocket specifies an action involving a TCP port.
                            Properties:
                              Host:
                                Description:  Optional: Host name to connect to, defaults to the pod IP.
                                Type:         string
                              Port:
                                Any Of:
                                  Type:       integer
                                  Type:       string
                                Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                X - Kubernetes - Int - Or - String:  true
                            Required:
                              port
                            Type:  object
                          Termination Grace Period Seconds:
                            Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                            Format:  int64
                            Type:    integer
                          Timeout Seconds:
                            Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                            Format:  int32
                            Type:    integer
                        Type:        object
                      Node Selector:
                        Additional Properties:
                          Type:       string
                        Description:  NodeSelector to be used in the Pod.
                        Type:         object
                      Pod Metadata:
                        Description:  PodMetadata defines extra metadata for the Pod.
                        Properties:
                          Annotations:
                            Additional Properties:
                              Type:       string
                            Description:  Annotations to be added to children resources.
                            Type:         object
                          Labels:
                            Additional Properties:
                              Type:       string
                            Description:  Labels to be added to children resources.
                            Type:         object
                        Type:             object
                      Pod Security Context:
                        Description:  SecurityContext holds pod-level security attributes and common container settings.
                        Properties:
                          Fs Group:
                            Description:  A special supplemental group that applies to all containers in a pod.
Some volume types allow the Kubelet to change the ownership of that volume
to be owned by the pod:


1. The owning GID will be the FSGroup
2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
3. The permission bits are OR'd with rw-rw----


If unset, the Kubelet will not modify the ownership and permissions of any volume.
Note that this field cannot be set when spec.os.name is windows.
                            Format:  int64
                            Type:    integer
                          Fs Group Change Policy:
                            Description:  fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
before being exposed inside Pod. This field will only apply to
volume types which support fsGroup based ownership(and permissions).
It will have no effect on ephemeral volume types such as: secret, configmaps
and emptydir.
Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
Note that this field cannot be set when spec.os.name is windows.
                            Type:  string
                          Run As Group:
                            Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in SecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence
for that container.
Note that this field cannot be set when spec.os.name is windows.
                            Format:  int64
                            Type:    integer
                          Run As Non Root:
                            Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in SecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                            Type:  boolean
                          Run As User:
                            Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in SecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence
for that container.
Note that this field cannot be set when spec.os.name is windows.
                            Format:  int64
                            Type:    integer
                          Se Linux Options:
                            Description:  The SELinux context to be applied to all containers.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in SecurityContext.  If set in
both SecurityContext and PodSecurityContext, the value specified in SecurityContext
takes precedence for that container.
Note that this field cannot be set when spec.os.name is windows.
                            Properties:
                              Level:
                                Description:  Level is SELinux level label that applies to the container.
                                Type:         string
                              Role:
                                Description:  Role is a SELinux role label that applies to the container.
                                Type:         string
                              Type:
                                Description:  Type is a SELinux type label that applies to the container.
                                Type:         string
                              User:
                                Description:  User is a SELinux user label that applies to the container.
                                Type:         string
                            Type:             object
                          Seccomp Profile:
                            Description:  The seccomp options to use by the containers in this pod.
Note that this field cannot be set when spec.os.name is windows.
                            Properties:
                              Localhost Profile:
                                Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                                Type:  string
                              Type:
                                Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                                Type:  string
                            Required:
                              type
                            Type:  object
                          Supplemental Groups:
                            Description:  A list of groups applied to the first process run in each container, in addition
to the container's primary GID, the fsGroup (if specified), and group memberships
defined in the container image for the uid of the container process. If unspecified,
no additional groups are added to any container. Note that group memberships
defined in the container image for the uid of the container process are still effective,
even if they are not included in this list.
Note that this field cannot be set when spec.os.name is windows.
                            Items:
                              Format:  int64
                              Type:    integer
                            Type:      array
                          Sysctls:
                            Description:  Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
sysctls (by the container runtime) might fail to launch.
Note that this field cannot be set when spec.os.name is windows.
                            Items:
                              Description:  Sysctl defines a kernel parameter to be set
                              Properties:
                                Name:
                                  Description:  Name of a property to set
                                  Type:         string
                                Value:
                                  Description:  Value of a property to set
                                  Type:         string
                              Required:
                                name
                                value
                              Type:  object
                            Type:    array
                          Windows Options:
                            Description:  The Windows specific settings applied to all containers.
If unspecified, the options within a container's SecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                            Properties:
                              Gmsa Credential Spec:
                                Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                                Type:  string
                              Gmsa Credential Spec Name:
                                Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                                Type:         string
                              Host Process:
                                Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                                Type:  boolean
                              Run As User Name:
                                Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                Type:  string
                            Type:      object
                        Type:          object
                      Port:
                        Description:  Port where the exporter will be listening for connections.
                        Format:       int32
                        Type:         integer
                      Priority Class Name:
                        Description:  PriorityClassName to be used in the Pod.
                        Type:         string
                      Readiness Probe:
                        Description:  ReadinessProbe to be used in the Container.
                        Properties:
                          Exec:
                            Description:  Exec specifies the action to take.
                            Properties:
                              Command:
                                Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                Items:
                                  Type:  string
                                Type:    array
                            Type:        object
                          Failure Threshold:
                            Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Grpc:
                            Description:  GRPC specifies an action involving a GRPC port.
                            Properties:
                              Port:
                                Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                Format:       int32
                                Type:         integer
                              Service:
                                Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                Type:  string
                            Required:
                              port
                            Type:  object
                          Http Get:
                            Description:  HTTPGet specifies the http request to perform.
                            Properties:
                              Host:
                                Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                Type:  string
                              Http Headers:
                                Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                Items:
                                  Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                  Properties:
                                    Name:
                                      Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                      Type:  string
                                    Value:
                                      Description:  The header field value
                                      Type:         string
                                  Required:
                                    name
                                    value
                                  Type:  object
                                Type:    array
                              Path:
                                Description:  Path to access on the HTTP server.
                                Type:         string
                              Port:
                                Any Of:
                                  Type:       integer
                                  Type:       string
                                Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                X - Kubernetes - Int - Or - String:  true
                              Scheme:
                                Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                Type:  string
                            Required:
                              port
                            Type:  object
                          Initial Delay Seconds:
                            Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                            Format:  int32
                            Type:    integer
                          Period Seconds:
                            Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Success Threshold:
                            Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                            Format:  int32
                            Type:    integer
                          Tcp Socket:
                            Description:  TCPSocket specifies an action involving a TCP port.
                            Properties:
                              Host:
                                Description:  Optional: Host name to connect to, defaults to the pod IP.
                                Type:         string
                              Port:
                                Any Of:
                                  Type:       integer
                                  Type:       string
                                Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                X - Kubernetes - Int - Or - String:  true
                            Required:
                              port
                            Type:  object
                          Termination Grace Period Seconds:
                            Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                            Format:  int64
                            Type:    integer
                          Timeout Seconds:
                            Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                            Format:  int32
                            Type:    integer
                        Type:        object
                      Resources:
                        Description:  Resouces describes the compute resource requirements.
                        Properties:
                          Claims:
                            Description:  Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.


This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.


This field is immutable. It can only be set for containers.
                            Items:
                              Description:  ResourceClaim references one entry in PodSpec.ResourceClaims.
                              Properties:
                                Name:
                                  Description:  Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container.
                                  Type:  string
                              Required:
                                name
                              Type:  object
                            Type:    array
                            X - Kubernetes - List - Map - Keys:
                              name
                            X - Kubernetes - List - Type:  map
                          Limits:
                            Additional Properties:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            Type:  object
                          Requests:
                            Additional Properties:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            Type:  object
                        Type:      object
                      Security Context:
                        Description:  SecurityContext holds security configuration that will be applied to a container.
                        Properties:
                          Allow Privilege Escalation:
                            Description:  AllowPrivilegeEscalation controls whether a process can gain more
privileges than its parent process. This bool directly controls if
the no_new_privs flag will be set on the container process.
AllowPrivilegeEscalation is true always when the container is:
1) run as Privileged
2) has CAP_SYS_ADMIN
Note that this field cannot be set when spec.os.name is windows.
                            Type:  boolean
                          Capabilities:
                            Description:  The capabilities to add/drop when running containers.
Defaults to the default set of capabilities granted by the container runtime.
Note that this field cannot be set when spec.os.name is windows.
                            Properties:
                              Add:
                                Description:  Added capabilities
                                Items:
                                  Description:  Capability represent POSIX capabilities type
                                  Type:         string
                                Type:           array
                              Drop:
                                Description:  Removed capabilities
                                Items:
                                  Description:  Capability represent POSIX capabilities type
                                  Type:         string
                                Type:           array
                            Type:               object
                          Privileged:
                            Description:  Run container in privileged mode.
Processes in privileged containers are essentially equivalent to root on the host.
Defaults to false.
Note that this field cannot be set when spec.os.name is windows.
                            Type:  boolean
                          Proc Mount:
                            Description:  procMount denotes the type of proc mount to use for the containers.
The default is DefaultProcMount which uses the container runtime defaults for
readonly paths and masked paths.
This requires the ProcMountType feature flag to be enabled.
Note that this field cannot be set when spec.os.name is windows.
                            Type:  string
                          Read Only Root Filesystem:
                            Description:  Whether this container has a read-only root filesystem.
Default is false.
Note that this field cannot be set when spec.os.name is windows.
                            Type:  boolean
                          Run As Group:
                            Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                            Format:  int64
                            Type:    integer
                          Run As Non Root:
                            Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                            Type:  boolean
                          Run As User:
                            Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                            Format:  int64
                            Type:    integer
                          Se Linux Options:
                            Description:  The SELinux context to be applied to the container.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                            Properties:
                              Level:
                                Description:  Level is SELinux level label that applies to the container.
                                Type:         string
                              Role:
                                Description:  Role is a SELinux role label that applies to the container.
                                Type:         string
                              Type:
                                Description:  Type is a SELinux type label that applies to the container.
                                Type:         string
                              User:
                                Description:  User is a SELinux user label that applies to the container.
                                Type:         string
                            Type:             object
                          Seccomp Profile:
                            Description:  The seccomp options to use by this container. If seccomp options are
provided at both the pod & container level, the container options
override the pod options.
Note that this field cannot be set when spec.os.name is windows.
                            Properties:
                              Localhost Profile:
                                Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                                Type:  string
                              Type:
                                Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                                Type:  string
                            Required:
                              type
                            Type:  object
                          Windows Options:
                            Description:  The Windows specific settings applied to all containers.
If unspecified, the options from the PodSecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                            Properties:
                              Gmsa Credential Spec:
                                Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                                Type:  string
                              Gmsa Credential Spec Name:
                                Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                                Type:         string
                              Host Process:
                                Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                                Type:  boolean
                              Run As User Name:
                                Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                Type:  string
                            Type:      object
                        Type:          object
                      Service Account Name:
                        Description:  ServiceAccountName is the name of the ServiceAccount to be used by the Pods.
                        Type:         string
                      Sidecar Containers:
                        Description:  SidecarContainers to be used in the Pod.
                        Items:
                          Description:  Container object definition.
                          Properties:
                            Args:
                              Description:  Args to be used in the Container.
                              Items:
                                Type:  string
                              Type:    array
                            Command:
                              Description:  Command to be used in the Container.
                              Items:
                                Type:  string
                              Type:    array
                            Env:
                              Description:  Env represents the environment variables to be injected in a container.
                              Items:
                                Description:  EnvVar represents an environment variable present in a Container.
                                Properties:
                                  Name:
                                    Description:  Name of the environment variable. Must be a C_IDENTIFIER.
                                    Type:         string
                                  Value:
                                    Description:  Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".
                                    Type:  string
                                  Value From:
                                    Description:  Source for the environment variable's value. Cannot be used if value is not empty.
                                    Properties:
                                      Config Map Key Ref:
                                        Description:  Selects a key of a ConfigMap.
                                        Properties:
                                          Key:
                                            Description:  The key to select.
                                            Type:         string
                                          Name:
                                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                            Type:  string
                                          Optional:
                                            Description:  Specify whether the ConfigMap or its key must be defined
                                            Type:         boolean
                                        Required:
                                          key
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                      Field Ref:
                                        Description:  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                                        Properties:
                                          API Version:
                                            Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                            Type:         string
                                          Field Path:
                                            Description:  Path of the field to select in the specified API version.
                                            Type:         string
                                        Required:
                                          fieldPath
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                      Resource Field Ref:
                                        Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                                        Properties:
                                          Container Name:
                                            Description:  Container name: required for volumes, optional for env vars
                                            Type:         string
                                          Divisor:
                                            Any Of:
                                              Type:                              integer
                                              Type:                              string
                                            Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                            Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                            X - Kubernetes - Int - Or - String:  true
                                          Resource:
                                            Description:  Required: resource to select
                                            Type:         string
                                        Required:
                                          resource
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                      Secret Key Ref:
                                        Description:  Selects a key of a secret in the pod's namespace
                                        Properties:
                                          Key:
                                            Description:  The key of the secret to select from.  Must be a valid secret key.
                                            Type:         string
                                          Name:
                                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                            Type:  string
                                          Optional:
                                            Description:  Specify whether the Secret or its key must be defined
                                            Type:         boolean
                                        Required:
                                          key
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                    Type:                             object
                                Required:
                                  name
                                Type:  object
                              Type:    array
                            Env From:
                              Description:  EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
                              Items:
                                Description:  EnvFromSource represents the source of a set of ConfigMaps
                                Properties:
                                  Config Map Ref:
                                    Description:  The ConfigMap to select from
                                    Properties:
                                      Name:
                                        Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                        Type:  string
                                      Optional:
                                        Description:              Specify whether the ConfigMap must be defined
                                        Type:                     boolean
                                    Type:                         object
                                    X - Kubernetes - Map - Type:  atomic
                                  Prefix:
                                    Description:  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                                    Type:         string
                                  Secret Ref:
                                    Description:  The Secret to select from
                                    Properties:
                                      Name:
                                        Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                        Type:  string
                                      Optional:
                                        Description:              Specify whether the Secret must be defined
                                        Type:                     boolean
                                    Type:                         object
                                    X - Kubernetes - Map - Type:  atomic
                                Type:                             object
                              Type:                               array
                            Image:
                              Description:  Image name to be used by the MariaDB instances. The supported format is `<image>:<tag>`.
                              Type:         string
                            Image Pull Policy:
                              Description:  ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
                              Enum:
                                Always
                                Never
                                IfNotPresent
                              Type:  string
                            Liveness Probe:
                              Description:  LivenessProbe to be used in the Container.
                              Properties:
                                Exec:
                                  Description:  Exec specifies the action to take.
                                  Properties:
                                    Command:
                                      Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                      Items:
                                        Type:  string
                                      Type:    array
                                  Type:        object
                                Failure Threshold:
                                  Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                                  Format:  int32
                                  Type:    integer
                                Grpc:
                                  Description:  GRPC specifies an action involving a GRPC port.
                                  Properties:
                                    Port:
                                      Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                      Format:       int32
                                      Type:         integer
                                    Service:
                                      Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                      Type:  string
                                  Required:
                                    port
                                  Type:  object
                                Http Get:
                                  Description:  HTTPGet specifies the http request to perform.
                                  Properties:
                                    Host:
                                      Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                      Type:  string
                                    Http Headers:
                                      Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                      Items:
                                        Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                        Properties:
                                          Name:
                                            Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                            Type:  string
                                          Value:
                                            Description:  The header field value
                                            Type:         string
                                        Required:
                                          name
                                          value
                                        Type:  object
                                      Type:    array
                                    Path:
                                      Description:  Path to access on the HTTP server.
                                      Type:         string
                                    Port:
                                      Any Of:
                                        Type:       integer
                                        Type:       string
                                      Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                      X - Kubernetes - Int - Or - String:  true
                                    Scheme:
                                      Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                      Type:  string
                                  Required:
                                    port
                                  Type:  object
                                Initial Delay Seconds:
                                  Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                  Format:  int32
                                  Type:    integer
                                Period Seconds:
                                  Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                                  Format:  int32
                                  Type:    integer
                                Success Threshold:
                                  Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                  Format:  int32
                                  Type:    integer
                                Tcp Socket:
                                  Description:  TCPSocket specifies an action involving a TCP port.
                                  Properties:
                                    Host:
                                      Description:  Optional: Host name to connect to, defaults to the pod IP.
                                      Type:         string
                                    Port:
                                      Any Of:
                                        Type:       integer
                                        Type:       string
                                      Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                      X - Kubernetes - Int - Or - String:  true
                                  Required:
                                    port
                                  Type:  object
                                Termination Grace Period Seconds:
                                  Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                                  Format:  int64
                                  Type:    integer
                                Timeout Seconds:
                                  Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                  Format:  int32
                                  Type:    integer
                              Type:        object
                            Readiness Probe:
                              Description:  ReadinessProbe to be used in the Container.
                              Properties:
                                Exec:
                                  Description:  Exec specifies the action to take.
                                  Properties:
                                    Command:
                                      Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                      Items:
                                        Type:  string
                                      Type:    array
                                  Type:        object
                                Failure Threshold:
                                  Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                                  Format:  int32
                                  Type:    integer
                                Grpc:
                                  Description:  GRPC specifies an action involving a GRPC port.
                                  Properties:
                                    Port:
                                      Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                                      Format:       int32
                                      Type:         integer
                                    Service:
                                      Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                                      Type:  string
                                  Required:
                                    port
                                  Type:  object
                                Http Get:
                                  Description:  HTTPGet specifies the http request to perform.
                                  Properties:
                                    Host:
                                      Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                                      Type:  string
                                    Http Headers:
                                      Description:  Custom headers to set in the request. HTTP allows repeated headers.
                                      Items:
                                        Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                        Properties:
                                          Name:
                                            Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                            Type:  string
                                          Value:
                                            Description:  The header field value
                                            Type:         string
                                        Required:
                                          name
                                          value
                                        Type:  object
                                      Type:    array
                                    Path:
                                      Description:  Path to access on the HTTP server.
                                      Type:         string
                                    Port:
                                      Any Of:
                                        Type:       integer
                                        Type:       string
                                      Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                      X - Kubernetes - Int - Or - String:  true
                                    Scheme:
                                      Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                                      Type:  string
                                  Required:
                                    port
                                  Type:  object
                                Initial Delay Seconds:
                                  Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                  Format:  int32
                                  Type:    integer
                                Period Seconds:
                                  Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                                  Format:  int32
                                  Type:    integer
                                Success Threshold:
                                  Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                  Format:  int32
                                  Type:    integer
                                Tcp Socket:
                                  Description:  TCPSocket specifies an action involving a TCP port.
                                  Properties:
                                    Host:
                                      Description:  Optional: Host name to connect to, defaults to the pod IP.
                                      Type:         string
                                    Port:
                                      Any Of:
                                        Type:       integer
                                        Type:       string
                                      Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                                      X - Kubernetes - Int - Or - String:  true
                                  Required:
                                    port
                                  Type:  object
                                Termination Grace Period Seconds:
                                  Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                                  Format:  int64
                                  Type:    integer
                                Timeout Seconds:
                                  Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                  Format:  int32
                                  Type:    integer
                              Type:        object
                            Resources:
                              Description:  Resouces describes the compute resource requirements.
                              Properties:
                                Claims:
                                  Description:  Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.


This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.


This field is immutable. It can only be set for containers.
                                  Items:
                                    Description:  ResourceClaim references one entry in PodSpec.ResourceClaims.
                                    Properties:
                                      Name:
                                        Description:  Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container.
                                        Type:  string
                                    Required:
                                      name
                                    Type:  object
                                  Type:    array
                                  X - Kubernetes - List - Map - Keys:
                                    name
                                  X - Kubernetes - List - Type:  map
                                Limits:
                                  Additional Properties:
                                    Any Of:
                                      Type:                              integer
                                      Type:                              string
                                    Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    X - Kubernetes - Int - Or - String:  true
                                  Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                  Type:  object
                                Requests:
                                  Additional Properties:
                                    Any Of:
                                      Type:                              integer
                                      Type:                              string
                                    Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    X - Kubernetes - Int - Or - String:  true
                                  Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                  Type:  object
                              Type:      object
                            Security Context:
                              Description:  SecurityContext holds security configuration that will be applied to a container.
                              Properties:
                                Allow Privilege Escalation:
                                  Description:  AllowPrivilegeEscalation controls whether a process can gain more
privileges than its parent process. This bool directly controls if
the no_new_privs flag will be set on the container process.
AllowPrivilegeEscalation is true always when the container is:
1) run as Privileged
2) has CAP_SYS_ADMIN
Note that this field cannot be set when spec.os.name is windows.
                                  Type:  boolean
                                Capabilities:
                                  Description:  The capabilities to add/drop when running containers.
Defaults to the default set of capabilities granted by the container runtime.
Note that this field cannot be set when spec.os.name is windows.
                                  Properties:
                                    Add:
                                      Description:  Added capabilities
                                      Items:
                                        Description:  Capability represent POSIX capabilities type
                                        Type:         string
                                      Type:           array
                                    Drop:
                                      Description:  Removed capabilities
                                      Items:
                                        Description:  Capability represent POSIX capabilities type
                                        Type:         string
                                      Type:           array
                                  Type:               object
                                Privileged:
                                  Description:  Run container in privileged mode.
Processes in privileged containers are essentially equivalent to root on the host.
Defaults to false.
Note that this field cannot be set when spec.os.name is windows.
                                  Type:  boolean
                                Proc Mount:
                                  Description:  procMount denotes the type of proc mount to use for the containers.
The default is DefaultProcMount which uses the container runtime defaults for
readonly paths and masked paths.
This requires the ProcMountType feature flag to be enabled.
Note that this field cannot be set when spec.os.name is windows.
                                  Type:  string
                                Read Only Root Filesystem:
                                  Description:  Whether this container has a read-only root filesystem.
Default is false.
Note that this field cannot be set when spec.os.name is windows.
                                  Type:  boolean
                                Run As Group:
                                  Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                  Format:  int64
                                  Type:    integer
                                Run As Non Root:
                                  Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                  Type:  boolean
                                Run As User:
                                  Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                  Format:  int64
                                  Type:    integer
                                Se Linux Options:
                                  Description:  The SELinux context to be applied to the container.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                                  Properties:
                                    Level:
                                      Description:  Level is SELinux level label that applies to the container.
                                      Type:         string
                                    Role:
                                      Description:  Role is a SELinux role label that applies to the container.
                                      Type:         string
                                    Type:
                                      Description:  Type is a SELinux type label that applies to the container.
                                      Type:         string
                                    User:
                                      Description:  User is a SELinux user label that applies to the container.
                                      Type:         string
                                  Type:             object
                                Seccomp Profile:
                                  Description:  The seccomp options to use by this container. If seccomp options are
provided at both the pod & container level, the container options
override the pod options.
Note that this field cannot be set when spec.os.name is windows.
                                  Properties:
                                    Localhost Profile:
                                      Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                                      Type:  string
                                    Type:
                                      Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                                      Type:  string
                                  Required:
                                    type
                                  Type:  object
                                Windows Options:
                                  Description:  The Windows specific settings applied to all containers.
If unspecified, the options from the PodSecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                                  Properties:
                                    Gmsa Credential Spec:
                                      Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                                      Type:  string
                                    Gmsa Credential Spec Name:
                                      Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                                      Type:         string
                                    Host Process:
                                      Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                                      Type:  boolean
                                    Run As User Name:
                                      Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                                      Type:  string
                                  Type:      object
                              Type:          object
                            Volume Mounts:
                              Description:  VolumeMounts to be used in the Container.
                              Items:
                                Description:  VolumeMount describes a mounting of a Volume within a container.
                                Properties:
                                  Mount Path:
                                    Description:  Path within the container at which the volume should be mounted.  Must
not contain ':'.
                                    Type:  string
                                  Mount Propagation:
                                    Description:  mountPropagation determines how mounts are propagated from the host
to container and the other way around.
When not set, MountPropagationNone is used.
This field is beta in 1.10.
                                    Type:  string
                                  Name:
                                    Description:  This must match the Name of a Volume.
                                    Type:         string
                                  Read Only:
                                    Description:  Mounted read-only if true, read-write otherwise (false or unspecified).
Defaults to false.
                                    Type:  boolean
                                  Sub Path:
                                    Description:  Path within the volume from which the container's volume should be mounted.
Defaults to "" (volume's root).
                                    Type:  string
                                  Sub Path Expr:
                                    Description:  Expanded path within the volume from which the container's volume should be mounted.
Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
Defaults to "" (volume's root).
SubPathExpr and SubPath are mutually exclusive.
                                    Type:  string
                                Required:
                                  mountPath
                                  name
                                Type:  object
                              Type:    array
                          Required:
                            image
                          Type:  object
                        Type:    array
                      Tolerations:
                        Description:  Tolerations to be used in the Pod.
                        Items:
                          Description:  The pod this Toleration is attached to tolerates any taint that matches
the triple <key,value,effect> using the matching operator <operator>.
                          Properties:
                            Effect:
                              Description:  Effect indicates the taint effect to match. Empty means match all taint effects.
When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                              Type:  string
                            Key:
                              Description:  Key is the taint key that the toleration applies to. Empty means match all taint keys.
If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                              Type:  string
                            Operator:
                              Description:  Operator represents a key's relationship to the value.
Valid operators are Exists and Equal. Defaults to Equal.
Exists is equivalent to wildcard for value, so that a pod can
tolerate all taints of a particular category.
                              Type:  string
                            Toleration Seconds:
                              Description:  TolerationSeconds represents the period of time the toleration (which must be
of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
it is not set, which means tolerate the taint forever (do not evict). Zero and
negative values will be treated as 0 (evict immediately) by the system.
                              Format:  int64
                              Type:    integer
                            Value:
                              Description:  Value is the taint value the toleration matches to.
If the operator is Exists, the value should be empty, otherwise just a regular string.
                              Type:  string
                          Type:      object
                        Type:        array
                      Topology Spread Constraints:
                        Description:  TopologySpreadConstraints to be used in the Pod.
                        Items:
                          Description:  TopologySpreadConstraint specifies how to spread matching pods among the given topology.
                          Properties:
                            Label Selector:
                              Description:  LabelSelector is used to find matching pods.
Pods that match this label selector are counted to determine the number of pods
in their corresponding topology domain.
                              Properties:
                                Match Expressions:
                                  Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  Items:
                                    Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                    Properties:
                                      Key:
                                        Description:  key is the label key that the selector applies to.
                                        Type:         string
                                      Operator:
                                        Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                        Type:  string
                                      Values:
                                        Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                        Items:
                                          Type:  string
                                        Type:    array
                                    Required:
                                      key
                                      operator
                                    Type:  object
                                  Type:    array
                                Match Labels:
                                  Additional Properties:
                                    Type:       string
                                  Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  Type:                     object
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                            Match Label Keys:
                              Description:  MatchLabelKeys is a set of pod label keys to select the pods over which
spreading will be calculated. The keys are used to lookup values from the
incoming pod labels, those key-value labels are ANDed with labelSelector
to select the group of existing pods over which spreading will be calculated
for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
MatchLabelKeys cannot be set when LabelSelector isn't set.
Keys that don't exist in the incoming pod labels will
be ignored. A null or empty list means only match against labelSelector.


This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
                              Items:
                                Type:                        string
                              Type:                          array
                              X - Kubernetes - List - Type:  atomic
                            Max Skew:
                              Description:  MaxSkew describes the degree to which pods may be unevenly distributed.
When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
between the number of matching pods in the target topology and the global minimum.
The global minimum is the minimum number of matching pods in an eligible domain
or zero if the number of eligible domains is less than MinDomains.
For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
labelSelector spread as 2/2/1:
In this case, the global minimum is 1.
| zone1 | zone2 | zone3 |
|  P P  |  P P  |   P   |
- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
violate MaxSkew(1).
- if MaxSkew is 2, incoming pod can be scheduled onto any zone.
When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
to topologies that satisfy it.
It's a required field. Default value is 1 and 0 is not allowed.
                              Format:  int32
                              Type:    integer
                            Min Domains:
                              Description:  MinDomains indicates a minimum number of eligible domains.
When the number of eligible domains with matching topology keys is less than minDomains,
Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
And when the number of eligible domains with matching topology keys equals or greater than minDomains,
this value has no effect on scheduling.
As a result, when the number of eligible domains is less than minDomains,
scheduler won't schedule more than maxSkew Pods to those domains.
If value is nil, the constraint behaves as if MinDomains is equal to 1.
Valid values are integers greater than 0.
When value is not nil, WhenUnsatisfiable must be DoNotSchedule.


For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
labelSelector spread as 2/2/2:
| zone1 | zone2 | zone3 |
|  P P  |  P P  |  P P  |
The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
In this situation, new pod with the same labelSelector cannot be scheduled,
because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
it will violate MaxSkew.


This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
                              Format:  int32
                              Type:    integer
                            Node Affinity Policy:
                              Description:  NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
when calculating pod topology spread skew. Options are:
- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.


If this value is nil, the behavior is equivalent to the Honor policy.
This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
                              Type:  string
                            Node Taints Policy:
                              Description:  NodeTaintsPolicy indicates how we will treat node taints when calculating
pod topology spread skew. Options are:
- Honor: nodes without taints, along with tainted nodes for which the incoming pod
has a toleration, are included.
- Ignore: node taints are ignored. All nodes are included.


If this value is nil, the behavior is equivalent to the Ignore policy.
This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
                              Type:  string
                            Topology Key:
                              Description:  TopologyKey is the key of node labels. Nodes that have a label with this key
and identical values are considered to be in the same topology.
We consider each <key, value> as a "bucket", and try to put balanced number
of pods into each bucket.
We define a domain as a particular instance of a topology.
Also, we define an eligible domain as a domain whose nodes meet the requirements of
nodeAffinityPolicy and nodeTaintsPolicy.
e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
It's a required field.
                              Type:  string
                            When Unsatisfiable:
                              Description:  WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
the spread constraint.
- DoNotSchedule (default) tells the scheduler not to schedule it.
- ScheduleAnyway tells the scheduler to schedule the pod in any location,
  but giving higher precedence to topologies that would help reduce the
  skew.
A constraint is considered "Unsatisfiable" for an incoming pod
if and only if every possible node assignment for that pod would violate
"MaxSkew" on some topology.
For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
labelSelector spread as 3/1/1:
| zone1 | zone2 | zone3 |
| P P P |   P   |   P   |
If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
won't make it *more* imbalanced.
It's a required field.
                              Type:  string
                          Required:
                            maxSkew
                            topologyKey
                            whenUnsatisfiable
                          Type:  object
                        Type:    array
                      Volume Mounts:
                        Description:  VolumeMounts to be used in the Container.
                        Items:
                          Description:  VolumeMount describes a mounting of a Volume within a container.
                          Properties:
                            Mount Path:
                              Description:  Path within the container at which the volume should be mounted.  Must
not contain ':'.
                              Type:  string
                            Mount Propagation:
                              Description:  mountPropagation determines how mounts are propagated from the host
to container and the other way around.
When not set, MountPropagationNone is used.
This field is beta in 1.10.
                              Type:  string
                            Name:
                              Description:  This must match the Name of a Volume.
                              Type:         string
                            Read Only:
                              Description:  Mounted read-only if true, read-write otherwise (false or unspecified).
Defaults to false.
                              Type:  boolean
                            Sub Path:
                              Description:  Path within the volume from which the container's volume should be mounted.
Defaults to "" (volume's root).
                              Type:  string
                            Sub Path Expr:
                              Description:  Expanded path within the volume from which the container's volume should be mounted.
Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
Defaults to "" (volume's root).
SubPathExpr and SubPath are mutually exclusive.
                              Type:  string
                          Required:
                            mountPath
                            name
                          Type:  object
                        Type:    array
                      Volumes:
                        Description:  Volumes to be used in the Pod.
                        Items:
                          Description:  Volume represents a named volume in a pod that may be accessed by any container in the pod.
                          Properties:
                            Aws Elastic Block Store:
                              Description:  awsElasticBlockStore represents an AWS Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                              Properties:
                                Fs Type:
                                  Description:  fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
TODO: how do we prevent errors in the filesystem from compromising the machine
                                  Type:  string
                                Partition:
                                  Description:  partition is the partition in the volume that you want to mount.
If omitted, the default is to mount by volume name.
Examples: For volume /dev/sda1, you specify the partition as "1".
Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
                                  Format:  int32
                                  Type:    integer
                                Read Only:
                                  Description:  readOnly value true will force the readOnly setting in VolumeMounts.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                                  Type:  boolean
                                Volume ID:
                                  Description:  volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                                  Type:  string
                              Required:
                                volumeID
                              Type:  object
                            Azure Disk:
                              Description:  azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
                              Properties:
                                Caching Mode:
                                  Description:  cachingMode is the Host Caching mode: None, Read Only, Read Write.
                                  Type:         string
                                Disk Name:
                                  Description:  diskName is the Name of the data disk in the blob storage
                                  Type:         string
                                Disk URI:
                                  Description:  diskURI is the URI of data disk in the blob storage
                                  Type:         string
                                Fs Type:
                                  Description:  fsType is Filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                                  Type:  string
                                Kind:
                                  Description:  kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
                                  Type:         string
                                Read Only:
                                  Description:  readOnly Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                  Type:  boolean
                              Required:
                                diskName
                                diskURI
                              Type:  object
                            Azure File:
                              Description:  azureFile represents an Azure File Service mount on the host and bind mount to the pod.
                              Properties:
                                Read Only:
                                  Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                  Type:  boolean
                                Secret Name:
                                  Description:  secretName is the  name of secret that contains Azure Storage Account Name and Key
                                  Type:         string
                                Share Name:
                                  Description:  shareName is the azure share Name
                                  Type:         string
                              Required:
                                secretName
                                shareName
                              Type:  object
                            Cephfs:
                              Description:  cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
                              Properties:
                                Monitors:
                                  Description:  monitors is Required: Monitors is a collection of Ceph monitors
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                                  Items:
                                    Type:  string
                                  Type:    array
                                Path:
                                  Description:  path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
                                  Type:         string
                                Read Only:
                                  Description:  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                                  Type:  boolean
                                Secret File:
                                  Description:  secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                                  Type:  string
                                Secret Ref:
                                  Description:  secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                                  Properties:
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:                     string
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                User:
                                  Description:  user is optional: User is the rados user name, default is admin
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                                  Type:  string
                              Required:
                                monitors
                              Type:  object
                            Cinder:
                              Description:  cinder represents a cinder volume attached and mounted on kubelets host machine.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                              Properties:
                                Fs Type:
                                  Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                                  Type:  string
                                Read Only:
                                  Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                                  Type:  boolean
                                Secret Ref:
                                  Description:  secretRef is optional: points to a secret object containing parameters used to connect
to OpenStack.
                                  Properties:
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:                     string
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Volume ID:
                                  Description:  volumeID used to identify the volume in cinder.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                                  Type:  string
                              Required:
                                volumeID
                              Type:  object
                            Config Map:
                              Description:  configMap represents a configMap that should populate this volume
                              Properties:
                                Default Mode:
                                  Description:  defaultMode is optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                  Format:  int32
                                  Type:    integer
                                Items:
                                  Description:  items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                                  Items:
                                    Description:  Maps a string key to a path within a volume.
                                    Properties:
                                      Key:
                                        Description:  key is the key to project.
                                        Type:         string
                                      Mode:
                                        Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                        Format:  int32
                                        Type:    integer
                                      Path:
                                        Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                        Type:  string
                                    Required:
                                      key
                                      path
                                    Type:  object
                                  Type:    array
                                Name:
                                  Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                  Type:  string
                                Optional:
                                  Description:              optional specify whether the ConfigMap or its keys must be defined
                                  Type:                     boolean
                              Type:                         object
                              X - Kubernetes - Map - Type:  atomic
                            Csi:
                              Description:  csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
                              Properties:
                                Driver:
                                  Description:  driver is the name of the CSI driver that handles this volume.
Consult with your admin for the correct name as registered in the cluster.
                                  Type:  string
                                Fs Type:
                                  Description:  fsType to mount. Ex. "ext4", "xfs", "ntfs".
If not provided, the empty value is passed to the associated CSI driver
which will determine the default filesystem to apply.
                                  Type:  string
                                Node Publish Secret Ref:
                                  Description:  nodePublishSecretRef is a reference to the secret object containing
sensitive information to pass to the CSI driver to complete the CSI
NodePublishVolume and NodeUnpublishVolume calls.
This field is optional, and  may be empty if no secret is required. If the
secret object contains more than one secret, all secret references are passed.
                                  Properties:
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:                     string
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Read Only:
                                  Description:  readOnly specifies a read-only configuration for the volume.
Defaults to false (read/write).
                                  Type:  boolean
                                Volume Attributes:
                                  Additional Properties:
                                    Type:       string
                                  Description:  volumeAttributes stores driver-specific properties that are passed to the CSI
driver. Consult your driver's documentation for supported values.
                                  Type:  object
                              Required:
                                driver
                              Type:  object
                            Downward API:
                              Description:  downwardAPI represents downward API about the pod that should populate this volume
                              Properties:
                                Default Mode:
                                  Description:  Optional: mode bits to use on created files by default. Must be a
Optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                  Format:  int32
                                  Type:    integer
                                Items:
                                  Description:  Items is a list of downward API volume file
                                  Items:
                                    Description:  DownwardAPIVolumeFile represents information to create the file containing the pod field
                                    Properties:
                                      Field Ref:
                                        Description:  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
                                        Properties:
                                          API Version:
                                            Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                            Type:         string
                                          Field Path:
                                            Description:  Path of the field to select in the specified API version.
                                            Type:         string
                                        Required:
                                          fieldPath
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                      Mode:
                                        Description:  Optional: mode bits used to set permissions on this file, must be an octal value
between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                        Format:  int32
                                        Type:    integer
                                      Path:
                                        Description:  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
                                        Type:         string
                                      Resource Field Ref:
                                        Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                                        Properties:
                                          Container Name:
                                            Description:  Container name: required for volumes, optional for env vars
                                            Type:         string
                                          Divisor:
                                            Any Of:
                                              Type:                              integer
                                              Type:                              string
                                            Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                            Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                            X - Kubernetes - Int - Or - String:  true
                                          Resource:
                                            Description:  Required: resource to select
                                            Type:         string
                                        Required:
                                          resource
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                    Required:
                                      path
                                    Type:  object
                                  Type:    array
                              Type:        object
                            Empty Dir:
                              Description:  emptyDir represents a temporary directory that shares a pod's lifetime.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                              Properties:
                                Medium:
                                  Description:  medium represents what type of storage medium should back this directory.
The default is "" which means to use the node's default medium.
Must be an empty string (default) or Memory.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                                  Type:  string
                                Size Limit:
                                  Any Of:
                                    Type:       integer
                                    Type:       string
                                  Description:  sizeLimit is the total amount of local storage required for this EmptyDir volume.
The size limit is also applicable for memory medium.
The maximum usage on memory medium EmptyDir would be the minimum value between
the SizeLimit specified here and the sum of memory limits of all containers in a pod.
The default is nil which means that the limit is undefined.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                                  Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  X - Kubernetes - Int - Or - String:  true
                              Type:                                    object
                            Ephemeral:
                              Description:  ephemeral represents a volume that is handled by a cluster storage driver.
The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
and deleted when the pod is removed.


Use this if:
a) the volume is only needed while the pod runs,
b) features of normal volumes like restoring from snapshot or capacity
   tracking are needed,
c) the storage driver is specified through a storage class, and
d) the storage driver supports dynamic volume provisioning through
   a PersistentVolumeClaim (see EphemeralVolumeSource for more
   information on the connection between this volume type
   and PersistentVolumeClaim).


Use PersistentVolumeClaim or one of the vendor-specific
APIs for volumes that persist for longer than the lifecycle
of an individual pod.


Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
be used that way - see the documentation of the driver for
more information.


A pod can use both types of ephemeral volumes and
persistent volumes at the same time.
                              Properties:
                                Volume Claim Template:
                                  Description:  Will be used to create a stand-alone PVC to provision the volume.
The pod in which this EphemeralVolumeSource is embedded will be the
owner of the PVC, i.e. the PVC will be deleted together with the
pod.  The name of the PVC will be `<pod name>-<volume name>` where
`<volume name>` is the name from the `PodSpec.Volumes` array
entry. Pod validation will reject the pod if the concatenated name
is not valid for a PVC (for example, too long).


An existing PVC with that name that is not owned by the pod
will *not* be used for the pod to avoid using an unrelated
volume by mistake. Starting the pod is then blocked until
the unrelated PVC is removed. If such a pre-created PVC is
meant to be used by the pod, the PVC has to updated with an
owner reference to the pod once the pod exists. Normally
this should not be necessary, but it may be useful when
manually reconstructing a broken cluster.


This field is read-only and no changes will be made by Kubernetes
to the PVC after it has been created.


Required, must not be nil.
                                  Properties:
                                    Metadata:
                                      Description:  May contain labels and annotations that will be copied into the PVC
when creating it. No other fields are allowed and will be rejected during
validation.
                                      Type:  object
                                    Spec:
                                      Description:  The specification for the PersistentVolumeClaim. The entire content is
copied unchanged into the PVC that gets created from this
template. The same fields as in a PersistentVolumeClaim
are also valid here.
                                      Properties:
                                        Access Modes:
                                          Description:  accessModes contains the desired access modes the volume should have.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                                          Items:
                                            Type:  string
                                          Type:    array
                                        Data Source:
                                          Description:  dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                                          Properties:
                                            API Group:
                                              Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                              Type:  string
                                            Kind:
                                              Description:  Kind is the type of resource being referenced
                                              Type:         string
                                            Name:
                                              Description:  Name is the name of resource being referenced
                                              Type:         string
                                          Required:
                                            kind
                                            name
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Data Source Ref:
                                          Description:  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                          Properties:
                                            API Group:
                                              Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                              Type:  string
                                            Kind:
                                              Description:  Kind is the type of resource being referenced
                                              Type:         string
                                            Name:
                                              Description:  Name is the name of resource being referenced
                                              Type:         string
                                            Namespace:
                                              Description:  Namespace is the namespace of resource being referenced
Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                              Type:  string
                                          Required:
                                            kind
                                            name
                                          Type:  object
                                        Resources:
                                          Description:  resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                                          Properties:
                                            Limits:
                                              Additional Properties:
                                                Any Of:
                                                  Type:                              integer
                                                  Type:                              string
                                                Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                X - Kubernetes - Int - Or - String:  true
                                              Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                              Type:  object
                                            Requests:
                                              Additional Properties:
                                                Any Of:
                                                  Type:                              integer
                                                  Type:                              string
                                                Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                X - Kubernetes - Int - Or - String:  true
                                              Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                              Type:  object
                                          Type:      object
                                        Selector:
                                          Description:  selector is a label query over volumes to consider for binding.
                                          Properties:
                                            Match Expressions:
                                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              Items:
                                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                Properties:
                                                  Key:
                                                    Description:  key is the label key that the selector applies to.
                                                    Type:         string
                                                  Operator:
                                                    Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    Type:  string
                                                  Values:
                                                    Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                    Items:
                                                      Type:  string
                                                    Type:    array
                                                Required:
                                                  key
                                                  operator
                                                Type:  object
                                              Type:    array
                                            Match Labels:
                                              Additional Properties:
                                                Type:       string
                                              Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              Type:                     object
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Storage Class Name:
                                          Description:  storageClassName is the name of the StorageClass required by the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                                          Type:  string
                                        Volume Attributes Class Name:
                                          Description:  volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
If specified, the CSI driver will create or update the volume with the attributes defined
in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
will be set by the persistentvolume controller if it exists.
If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
exists.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
                                          Type:  string
                                        Volume Mode:
                                          Description:  volumeMode defines what type of volume is required by the claim.
Value of Filesystem is implied when not included in claim spec.
                                          Type:  string
                                        Volume Name:
                                          Description:  volumeName is the binding reference to the PersistentVolume backing this claim.
                                          Type:         string
                                      Type:             object
                                  Required:
                                    spec
                                  Type:  object
                              Type:      object
                            Fc:
                              Description:  fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
                              Properties:
                                Fs Type:
                                  Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
TODO: how do we prevent errors in the filesystem from compromising the machine
                                  Type:  string
                                Lun:
                                  Description:  lun is Optional: FC target lun number
                                  Format:       int32
                                  Type:         integer
                                Read Only:
                                  Description:  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                  Type:  boolean
                                Target WW Ns:
                                  Description:  targetWWNs is Optional: FC target worldwide names (WWNs)
                                  Items:
                                    Type:  string
                                  Type:    array
                                Wwids:
                                  Description:  wwids Optional: FC volume world wide identifiers (wwids)
Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
                                  Items:
                                    Type:  string
                                  Type:    array
                              Type:        object
                            Flex Volume:
                              Description:  flexVolume represents a generic volume resource that is
provisioned/attached using an exec based plugin.
                              Properties:
                                Driver:
                                  Description:  driver is the name of the driver to use for this volume.
                                  Type:         string
                                Fs Type:
                                  Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
                                  Type:  string
                                Options:
                                  Additional Properties:
                                    Type:       string
                                  Description:  options is Optional: this field holds extra command options if any.
                                  Type:         object
                                Read Only:
                                  Description:  readOnly is Optional: defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                  Type:  boolean
                                Secret Ref:
                                  Description:  secretRef is Optional: secretRef is reference to the secret object containing
sensitive information to pass to the plugin scripts. This may be
empty if no secret object is specified. If the secret object
contains more than one secret, all secrets are passed to the plugin
scripts.
                                  Properties:
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:                     string
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                              Required:
                                driver
                              Type:  object
                            Flocker:
                              Description:  flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
                              Properties:
                                Dataset Name:
                                  Description:  datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
should be considered as deprecated
                                  Type:  string
                                Dataset UUID:
                                  Description:  datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
                                  Type:         string
                              Type:             object
                            Gce Persistent Disk:
                              Description:  gcePersistentDisk represents a GCE Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                              Properties:
                                Fs Type:
                                  Description:  fsType is filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
TODO: how do we prevent errors in the filesystem from compromising the machine
                                  Type:  string
                                Partition:
                                  Description:  partition is the partition in the volume that you want to mount.
If omitted, the default is to mount by volume name.
Examples: For volume /dev/sda1, you specify the partition as "1".
Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                                  Format:  int32
                                  Type:    integer
                                Pd Name:
                                  Description:  pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                                  Type:  string
                                Read Only:
                                  Description:  readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                                  Type:  boolean
                              Required:
                                pdName
                              Type:  object
                            Git Repo:
                              Description:  gitRepo represents a git repository at a particular revision.
DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
into the Pod's container.
                              Properties:
                                Directory:
                                  Description:  directory is the target directory name.
Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
git repository.  Otherwise, if specified, the volume will contain the git repository in
the subdirectory with the given name.
                                  Type:  string
                                Repository:
                                  Description:  repository is the URL
                                  Type:         string
                                Revision:
                                  Description:  revision is the commit hash for the specified revision.
                                  Type:         string
                              Required:
                                repository
                              Type:  object
                            Glusterfs:
                              Description:  glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
More info: https://examples.k8s.io/volumes/glusterfs/README.md
                              Properties:
                                Endpoints:
                                  Description:  endpoints is the endpoint name that details Glusterfs topology.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                                  Type:  string
                                Path:
                                  Description:  path is the Glusterfs volume path.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                                  Type:  string
                                Read Only:
                                  Description:  readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
Defaults to false.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                                  Type:  boolean
                              Required:
                                endpoints
                                path
                              Type:  object
                            Host Path:
                              Description:  hostPath represents a pre-existing file or directory on the host
machine that is directly exposed to the container. This is generally
used for system agents or other privileged things that are allowed
to see the host machine. Most containers will NOT need this.
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
---
TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not
mount host directories as read/write.
                              Properties:
                                Path:
                                  Description:  path of the directory on the host.
If the path is a symlink, it will follow the link to the real path.
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                                  Type:  string
                                Type:
                                  Description:  type for HostPath Volume
Defaults to ""
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                                  Type:  string
                              Required:
                                path
                              Type:  object
                            Iscsi:
                              Description:  iscsi represents an ISCSI Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://examples.k8s.io/volumes/iscsi/README.md
                              Properties:
                                Chap Auth Discovery:
                                  Description:  chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
                                  Type:         boolean
                                Chap Auth Session:
                                  Description:  chapAuthSession defines whether support iSCSI Session CHAP authentication
                                  Type:         boolean
                                Fs Type:
                                  Description:  fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
TODO: how do we prevent errors in the filesystem from compromising the machine
                                  Type:  string
                                Initiator Name:
                                  Description:  initiatorName is the custom iSCSI Initiator Name.
If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
<target portal>:<volume name> will be created for the connection.
                                  Type:  string
                                Iqn:
                                  Description:  iqn is the target iSCSI Qualified Name.
                                  Type:         string
                                Iscsi Interface:
                                  Description:  iscsiInterface is the interface Name that uses an iSCSI transport.
Defaults to 'default' (tcp).
                                  Type:  string
                                Lun:
                                  Description:  lun represents iSCSI Target Lun number.
                                  Format:       int32
                                  Type:         integer
                                Portals:
                                  Description:  portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
is other than default (typically TCP ports 860 and 3260).
                                  Items:
                                    Type:  string
                                  Type:    array
                                Read Only:
                                  Description:  readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
                                  Type:  boolean
                                Secret Ref:
                                  Description:  secretRef is the CHAP Secret for iSCSI target and initiator authentication
                                  Properties:
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:                     string
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Target Portal:
                                  Description:  targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
is other than default (typically TCP ports 860 and 3260).
                                  Type:  string
                              Required:
                                iqn
                                lun
                                targetPortal
                              Type:  object
                            Name:
                              Description:  name of the volume.
Must be a DNS_LABEL and unique within the pod.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              Type:  string
                            Nfs:
                              Description:  nfs represents an NFS mount on the host that shares a pod's lifetime
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                              Properties:
                                Path:
                                  Description:  path that is exported by the NFS server.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                                  Type:  string
                                Read Only:
                                  Description:  readOnly here will force the NFS export to be mounted with read-only permissions.
Defaults to false.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                                  Type:  boolean
                                Server:
                                  Description:  server is the hostname or IP address of the NFS server.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                                  Type:  string
                              Required:
                                path
                                server
                              Type:  object
                            Persistent Volume Claim:
                              Description:  persistentVolumeClaimVolumeSource represents a reference to a
PersistentVolumeClaim in the same namespace.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                              Properties:
                                Claim Name:
                                  Description:  claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                                  Type:  string
                                Read Only:
                                  Description:  readOnly Will force the ReadOnly setting in VolumeMounts.
Default false.
                                  Type:  boolean
                              Required:
                                claimName
                              Type:  object
                            Photon Persistent Disk:
                              Description:  photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
                              Properties:
                                Fs Type:
                                  Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                                  Type:  string
                                Pd ID:
                                  Description:  pdID is the ID that identifies Photon Controller persistent disk
                                  Type:         string
                              Required:
                                pdID
                              Type:  object
                            Portworx Volume:
                              Description:  portworxVolume represents a portworx volume attached and mounted on kubelets host machine
                              Properties:
                                Fs Type:
                                  Description:  fSType represents the filesystem type to mount
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
                                  Type:  string
                                Read Only:
                                  Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                  Type:  boolean
                                Volume ID:
                                  Description:  volumeID uniquely identifies a Portworx volume
                                  Type:         string
                              Required:
                                volumeID
                              Type:  object
                            Projected:
                              Description:  projected items for all in one resources secrets, configmaps, and downward API
                              Properties:
                                Default Mode:
                                  Description:  defaultMode are the mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                  Format:  int32
                                  Type:    integer
                                Sources:
                                  Description:  sources is the list of volume projections
                                  Items:
                                    Description:  Projection that may be projected along with other supported volume types
                                    Properties:
                                      Cluster Trust Bundle:
                                        Description:  ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
of ClusterTrustBundle objects in an auto-updating file.


Alpha, gated by the ClusterTrustBundleProjection feature gate.


ClusterTrustBundle objects can either be selected by name, or by the
combination of signer name and a label selector.


Kubelet performs aggressive normalization of the PEM contents written
into the pod filesystem.  Esoteric PEM features such as inter-block
comments and block headers are stripped.  Certificates are deduplicated.
The ordering of certificates within the file is arbitrary, and Kubelet
may change the order over time.
                                        Properties:
                                          Label Selector:
                                            Description:  Select all ClusterTrustBundles that match this label selector.  Only has
effect if signerName is set.  Mutually-exclusive with name.  If unset,
interpreted as "match nothing".  If set but empty, interpreted as "match
everything".
                                            Properties:
                                              Match Expressions:
                                                Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                Items:
                                                  Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                                  Properties:
                                                    Key:
                                                      Description:  key is the label key that the selector applies to.
                                                      Type:         string
                                                    Operator:
                                                      Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                                      Type:  string
                                                    Values:
                                                      Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                                      Items:
                                                        Type:  string
                                                      Type:    array
                                                  Required:
                                                    key
                                                    operator
                                                  Type:  object
                                                Type:    array
                                              Match Labels:
                                                Additional Properties:
                                                  Type:       string
                                                Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                Type:                     object
                                            Type:                         object
                                            X - Kubernetes - Map - Type:  atomic
                                          Name:
                                            Description:  Select a single ClusterTrustBundle by object name.  Mutually-exclusive
with signerName and labelSelector.
                                            Type:  string
                                          Optional:
                                            Description:  If true, don't block pod startup if the referenced ClusterTrustBundle(s)
aren't available.  If using name, then the named ClusterTrustBundle is
allowed not to exist.  If using signerName, then the combination of
signerName and labelSelector is allowed to match zero
ClusterTrustBundles.
                                            Type:  boolean
                                          Path:
                                            Description:  Relative path from the volume root to write the bundle.
                                            Type:         string
                                          Signer Name:
                                            Description:  Select all ClusterTrustBundles that match this signer name.
Mutually-exclusive with name.  The contents of all selected
ClusterTrustBundles will be unified and deduplicated.
                                            Type:  string
                                        Required:
                                          path
                                        Type:  object
                                      Config Map:
                                        Description:  configMap information about the configMap data to project
                                        Properties:
                                          Items:
                                            Description:  items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                                            Items:
                                              Description:  Maps a string key to a path within a volume.
                                              Properties:
                                                Key:
                                                  Description:  key is the key to project.
                                                  Type:         string
                                                Mode:
                                                  Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                                  Format:  int32
                                                  Type:    integer
                                                Path:
                                                  Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                                  Type:  string
                                              Required:
                                                key
                                                path
                                              Type:  object
                                            Type:    array
                                          Name:
                                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                            Type:  string
                                          Optional:
                                            Description:              optional specify whether the ConfigMap or its keys must be defined
                                            Type:                     boolean
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                      Downward API:
                                        Description:  downwardAPI information about the downwardAPI data to project
                                        Properties:
                                          Items:
                                            Description:  Items is a list of DownwardAPIVolume file
                                            Items:
                                              Description:  DownwardAPIVolumeFile represents information to create the file containing the pod field
                                              Properties:
                                                Field Ref:
                                                  Description:  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
                                                  Properties:
                                                    API Version:
                                                      Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                                      Type:         string
                                                    Field Path:
                                                      Description:  Path of the field to select in the specified API version.
                                                      Type:         string
                                                  Required:
                                                    fieldPath
                                                  Type:                         object
                                                  X - Kubernetes - Map - Type:  atomic
                                                Mode:
                                                  Description:  Optional: mode bits used to set permissions on this file, must be an octal value
between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                                  Format:  int32
                                                  Type:    integer
                                                Path:
                                                  Description:  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
                                                  Type:         string
                                                Resource Field Ref:
                                                  Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                                                  Properties:
                                                    Container Name:
                                                      Description:  Container name: required for volumes, optional for env vars
                                                      Type:         string
                                                    Divisor:
                                                      Any Of:
                                                        Type:                              integer
                                                        Type:                              string
                                                      Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                                      Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                      X - Kubernetes - Int - Or - String:  true
                                                    Resource:
                                                      Description:  Required: resource to select
                                                      Type:         string
                                                  Required:
                                                    resource
                                                  Type:                         object
                                                  X - Kubernetes - Map - Type:  atomic
                                              Required:
                                                path
                                              Type:  object
                                            Type:    array
                                        Type:        object
                                      Secret:
                                        Description:  secret information about the secret data to project
                                        Properties:
                                          Items:
                                            Description:  items if unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                                            Items:
                                              Description:  Maps a string key to a path within a volume.
                                              Properties:
                                                Key:
                                                  Description:  key is the key to project.
                                                  Type:         string
                                                Mode:
                                                  Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                                  Format:  int32
                                                  Type:    integer
                                                Path:
                                                  Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                                  Type:  string
                                              Required:
                                                key
                                                path
                                              Type:  object
                                            Type:    array
                                          Name:
                                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                            Type:  string
                                          Optional:
                                            Description:              optional field specify whether the Secret or its key must be defined
                                            Type:                     boolean
                                        Type:                         object
                                        X - Kubernetes - Map - Type:  atomic
                                      Service Account Token:
                                        Description:  serviceAccountToken is information about the serviceAccountToken data to project
                                        Properties:
                                          Audience:
                                            Description:  audience is the intended audience of the token. A recipient of a token
must identify itself with an identifier specified in the audience of the
token, and otherwise should reject the token. The audience defaults to the
identifier of the apiserver.
                                            Type:  string
                                          Expiration Seconds:
                                            Description:  expirationSeconds is the requested duration of validity of the service
account token. As the token approaches expiration, the kubelet volume
plugin will proactively rotate the service account token. The kubelet will
start trying to rotate the token if the token is older than 80 percent of
its time to live or if the token is older than 24 hours.Defaults to 1 hour
and must be at least 10 minutes.
                                            Format:  int64
                                            Type:    integer
                                          Path:
                                            Description:  path is the path relative to the mount point of the file to project the
token into.
                                            Type:  string
                                        Required:
                                          path
                                        Type:  object
                                    Type:      object
                                  Type:        array
                              Type:            object
                            Quobyte:
                              Description:  quobyte represents a Quobyte mount on the host that shares a pod's lifetime
                              Properties:
                                Group:
                                  Description:  group to map volume access to
Default is no group
                                  Type:  string
                                Read Only:
                                  Description:  readOnly here will force the Quobyte volume to be mounted with read-only permissions.
Defaults to false.
                                  Type:  boolean
                                Registry:
                                  Description:  registry represents a single or multiple Quobyte Registry services
specified as a string as host:port pair (multiple entries are separated with commas)
which acts as the central registry for volumes
                                  Type:  string
                                Tenant:
                                  Description:  tenant owning the given Quobyte volume in the Backend
Used with dynamically provisioned Quobyte volumes, value is set by the plugin
                                  Type:  string
                                User:
                                  Description:  user to map volume access to
Defaults to serivceaccount user
                                  Type:  string
                                Volume:
                                  Description:  volume is a string that references an already created Quobyte volume by name.
                                  Type:         string
                              Required:
                                registry
                                volume
                              Type:  object
                            Rbd:
                              Description:  rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
More info: https://examples.k8s.io/volumes/rbd/README.md
                              Properties:
                                Fs Type:
                                  Description:  fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
TODO: how do we prevent errors in the filesystem from compromising the machine
                                  Type:  string
                                Image:
                                  Description:  image is the rados image name.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                  Type:  string
                                Keyring:
                                  Description:  keyring is the path to key ring for RBDUser.
Default is /etc/ceph/keyring.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                  Type:  string
                                Monitors:
                                  Description:  monitors is a collection of Ceph monitors.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                  Items:
                                    Type:  string
                                  Type:    array
                                Pool:
                                  Description:  pool is the rados pool name.
Default is rbd.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                  Type:  string
                                Read Only:
                                  Description:  readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                  Type:  boolean
                                Secret Ref:
                                  Description:  secretRef is name of the authentication secret for RBDUser. If provided
overrides keyring.
Default is nil.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                  Properties:
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:                     string
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                User:
                                  Description:  user is the rados user name.
Default is admin.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                                  Type:  string
                              Required:
                                image
                                monitors
                              Type:  object
                            Scale IO:
                              Description:  scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
                              Properties:
                                Fs Type:
                                  Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs".
Default is "xfs".
                                  Type:  string
                                Gateway:
                                  Description:  gateway is the host address of the ScaleIO API Gateway.
                                  Type:         string
                                Protection Domain:
                                  Description:  protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
                                  Type:         string
                                Read Only:
                                  Description:  readOnly Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                  Type:  boolean
                                Secret Ref:
                                  Description:  secretRef references to the secret for ScaleIO user and other
sensitive information. If this is not provided, Login operation will fail.
                                  Properties:
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:                     string
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Ssl Enabled:
                                  Description:  sslEnabled Flag enable/disable SSL communication with Gateway, default false
                                  Type:         boolean
                                Storage Mode:
                                  Description:  storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
Default is ThinProvisioned.
                                  Type:  string
                                Storage Pool:
                                  Description:  storagePool is the ScaleIO Storage Pool associated with the protection domain.
                                  Type:         string
                                System:
                                  Description:  system is the name of the storage system as configured in ScaleIO.
                                  Type:         string
                                Volume Name:
                                  Description:  volumeName is the name of a volume already created in the ScaleIO system
that is associated with this volume source.
                                  Type:  string
                              Required:
                                gateway
                                secretRef
                                system
                              Type:  object
                            Secret:
                              Description:  secret represents a secret that should populate this volume.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
                              Properties:
                                Default Mode:
                                  Description:  defaultMode is Optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values
for mode bits. Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                  Format:  int32
                                  Type:    integer
                                Items:
                                  Description:  items If unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                                  Items:
                                    Description:  Maps a string key to a path within a volume.
                                    Properties:
                                      Key:
                                        Description:  key is the key to project.
                                        Type:         string
                                      Mode:
                                        Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                        Format:  int32
                                        Type:    integer
                                      Path:
                                        Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                        Type:  string
                                    Required:
                                      key
                                      path
                                    Type:  object
                                  Type:    array
                                Optional:
                                  Description:  optional field specify whether the Secret or its keys must be defined
                                  Type:         boolean
                                Secret Name:
                                  Description:  secretName is the name of the secret in the pod's namespace to use.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
                                  Type:  string
                              Type:      object
                            Storageos:
                              Description:  storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
                              Properties:
                                Fs Type:
                                  Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                                  Type:  string
                                Read Only:
                                  Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                                  Type:  boolean
                                Secret Ref:
                                  Description:  secretRef specifies the secret to use for obtaining the StorageOS API
credentials.  If not specified, default values will be attempted.
                                  Properties:
                                    Name:
                                      Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                      Type:                     string
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Volume Name:
                                  Description:  volumeName is the human-readable name of the StorageOS volume.  Volume
names are only unique within a namespace.
                                  Type:  string
                                Volume Namespace:
                                  Description:  volumeNamespace specifies the scope of the volume within StorageOS.  If no
namespace is specified then the Pod's namespace will be used.  This allows the
Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
Set VolumeName to any name to override the default behaviour.
Set to "default" if you are not using namespaces within StorageOS.
Namespaces that do not pre-exist within StorageOS will be created.
                                  Type:  string
                              Type:      object
                            Vsphere Volume:
                              Description:  vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
                              Properties:
                                Fs Type:
                                  Description:  fsType is filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                                  Type:  string
                                Storage Policy ID:
                                  Description:  storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
                                  Type:         string
                                Storage Policy Name:
                                  Description:  storagePolicyName is the storage Policy Based Management (SPBM) profile name.
                                  Type:         string
                                Volume Path:
                                  Description:  volumePath is the path that identifies vSphere volume vmdk
                                  Type:         string
                              Required:
                                volumePath
                              Type:  object
                          Required:
                            name
                          Type:  object
                        Type:    array
                    Type:        object
                  Password Secret Key Ref:
                    Description:  PasswordSecretKeyRef is a reference to the password of the monitoring user used by the exporter.
                    Properties:
                      Generate:
                        Default:      false
                        Description:  Generate indicates whether the Secret should be generated if the Secret referenced is not present.
                        Type:         boolean
                      Key:
                        Description:  The key of the secret to select from.  Must be a valid secret key.
                        Type:         string
                      Name:
                        Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                        Type:  string
                      Optional:
                        Description:  Specify whether the Secret or its key must be defined
                        Type:         boolean
                    Required:
                      key
                    Type:                         object
                    X - Kubernetes - Map - Type:  atomic
                  Service Monitor:
                    Description:  ServiceMonitor defines the ServiceMonior object.
                    Properties:
                      Interval:
                        Description:  Interval for scraping metrics.
                        Type:         string
                      Job Label:
                        Description:  JobLabel to add to the ServiceMonitor object.
                        Type:         string
                      Prometheus Release:
                        Description:  PrometheusRelease is the release label to add to the ServiceMonitor object.
                        Type:         string
                      Scrape Timeout:
                        Description:  ScrapeTimeout defines the timeout for scraping metrics.
                        Type:         string
                    Type:             object
                  Username:
                    Description:  Username is the username of the monitoring user used by the exporter.
                    Type:         string
                Type:             object
              My Cnf:
                Description:  MyCnf allows to specify the my.cnf file mounted by Mariadb.
                Type:         string
              My Cnf Config Map Key Ref:
                Description:  MyCnfConfigMapKeyRef is a reference to the my.cnf config file provided via a ConfigMap.
If not provided, it will be defaulted with reference to a ConfigMap with the contents of the MyCnf field.
                Properties:
                  Key:
                    Description:  The key to select.
                    Type:         string
                  Name:
                    Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                    Type:  string
                  Optional:
                    Description:  Specify whether the ConfigMap or its key must be defined
                    Type:         boolean
                Required:
                  key
                Type:                         object
                X - Kubernetes - Map - Type:  atomic
              Node Selector:
                Additional Properties:
                  Type:       string
                Description:  NodeSelector to be used in the Pod.
                Type:         object
              Password Secret Key Ref:
                Description:  PasswordSecretKeyRef is a reference to the password of the initial user provided via a Secret.
                Properties:
                  Generate:
                    Default:      false
                    Description:  Generate indicates whether the Secret should be generated if the Secret referenced is not present.
                    Type:         boolean
                  Key:
                    Description:  The key of the secret to select from.  Must be a valid secret key.
                    Type:         string
                  Name:
                    Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                    Type:  string
                  Optional:
                    Description:  Specify whether the Secret or its key must be defined
                    Type:         boolean
                Required:
                  key
                Type:                         object
                X - Kubernetes - Map - Type:  atomic
              Pod Disruption Budget:
                Description:  PodDisruptionBudget defines the budget for replica availability.
                Properties:
                  Max Unavailable:
                    Any Of:
                      Type:                              integer
                      Type:                              string
                    Description:                         MaxUnavailable defines the number of maximum unavailable Pods.
                    X - Kubernetes - Int - Or - String:  true
                  Min Available:
                    Any Of:
                      Type:                              integer
                      Type:                              string
                    Description:                         MinAvailable defines the number of minimum available Pods.
                    X - Kubernetes - Int - Or - String:  true
                Type:                                    object
              Pod Metadata:
                Description:  PodMetadata defines extra metadata for the Pod.
                Properties:
                  Annotations:
                    Additional Properties:
                      Type:       string
                    Description:  Annotations to be added to children resources.
                    Type:         object
                  Labels:
                    Additional Properties:
                      Type:       string
                    Description:  Labels to be added to children resources.
                    Type:         object
                Type:             object
              Pod Security Context:
                Description:  SecurityContext holds pod-level security attributes and common container settings.
                Properties:
                  Fs Group:
                    Description:  A special supplemental group that applies to all containers in a pod.
Some volume types allow the Kubelet to change the ownership of that volume
to be owned by the pod:


1. The owning GID will be the FSGroup
2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
3. The permission bits are OR'd with rw-rw----


If unset, the Kubelet will not modify the ownership and permissions of any volume.
Note that this field cannot be set when spec.os.name is windows.
                    Format:  int64
                    Type:    integer
                  Fs Group Change Policy:
                    Description:  fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
before being exposed inside Pod. This field will only apply to
volume types which support fsGroup based ownership(and permissions).
It will have no effect on ephemeral volume types such as: secret, configmaps
and emptydir.
Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
Note that this field cannot be set when spec.os.name is windows.
                    Type:  string
                  Run As Group:
                    Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in SecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence
for that container.
Note that this field cannot be set when spec.os.name is windows.
                    Format:  int64
                    Type:    integer
                  Run As Non Root:
                    Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in SecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                    Type:  boolean
                  Run As User:
                    Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in SecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence
for that container.
Note that this field cannot be set when spec.os.name is windows.
                    Format:  int64
                    Type:    integer
                  Se Linux Options:
                    Description:  The SELinux context to be applied to all containers.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in SecurityContext.  If set in
both SecurityContext and PodSecurityContext, the value specified in SecurityContext
takes precedence for that container.
Note that this field cannot be set when spec.os.name is windows.
                    Properties:
                      Level:
                        Description:  Level is SELinux level label that applies to the container.
                        Type:         string
                      Role:
                        Description:  Role is a SELinux role label that applies to the container.
                        Type:         string
                      Type:
                        Description:  Type is a SELinux type label that applies to the container.
                        Type:         string
                      User:
                        Description:  User is a SELinux user label that applies to the container.
                        Type:         string
                    Type:             object
                  Seccomp Profile:
                    Description:  The seccomp options to use by the containers in this pod.
Note that this field cannot be set when spec.os.name is windows.
                    Properties:
                      Localhost Profile:
                        Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                        Type:  string
                      Type:
                        Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                        Type:  string
                    Required:
                      type
                    Type:  object
                  Supplemental Groups:
                    Description:  A list of groups applied to the first process run in each container, in addition
to the container's primary GID, the fsGroup (if specified), and group memberships
defined in the container image for the uid of the container process. If unspecified,
no additional groups are added to any container. Note that group memberships
defined in the container image for the uid of the container process are still effective,
even if they are not included in this list.
Note that this field cannot be set when spec.os.name is windows.
                    Items:
                      Format:  int64
                      Type:    integer
                    Type:      array
                  Sysctls:
                    Description:  Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
sysctls (by the container runtime) might fail to launch.
Note that this field cannot be set when spec.os.name is windows.
                    Items:
                      Description:  Sysctl defines a kernel parameter to be set
                      Properties:
                        Name:
                          Description:  Name of a property to set
                          Type:         string
                        Value:
                          Description:  Value of a property to set
                          Type:         string
                      Required:
                        name
                        value
                      Type:  object
                    Type:    array
                  Windows Options:
                    Description:  The Windows specific settings applied to all containers.
If unspecified, the options within a container's SecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                    Properties:
                      Gmsa Credential Spec:
                        Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                        Type:  string
                      Gmsa Credential Spec Name:
                        Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                        Type:         string
                      Host Process:
                        Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                        Type:  boolean
                      Run As User Name:
                        Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                        Type:  string
                    Type:      object
                Type:          object
              Port:
                Default:      3306
                Description:  Port where the instances will be listening for connections.
                Format:       int32
                Type:         integer
              Primary Connection:
                Description:  PrimaryConnection defines templates to configure the primary Connection object.
                Properties:
                  Health Check:
                    Description:  HealthCheck to be used in the Connection.
                    Properties:
                      Interval:
                        Description:  Interval used to perform health checks.
                        Type:         string
                      Retry Interval:
                        Description:  RetryInterval is the interval used to perform health check retries.
                        Type:         string
                    Type:             object
                  Params:
                    Additional Properties:
                      Type:       string
                    Description:  Params to be used in the Connection.
                    Type:         object
                  Port:
                    Description:  Port to connect to. If not provided, it defaults to the MariaDB port or to the first MaxScale listener.
                    Format:       int32
                    Type:         integer
                  Secret Name:
                    Description:  SecretName to be used in the Connection.
                    Type:         string
                  Secret Template:
                    Description:  SecretTemplate to be used in the Connection.
                    Properties:
                      Database Key:
                        Description:  DatabaseKey to be used in the Secret.
                        Type:         string
                      Format:
                        Description:  Format to be used in the Secret.
                        Type:         string
                      Host Key:
                        Description:  HostKey to be used in the Secret.
                        Type:         string
                      Key:
                        Description:  Key to be used in the Secret.
                        Type:         string
                      Metadata:
                        Description:  Metadata to be added to the Secret object.
                        Properties:
                          Annotations:
                            Additional Properties:
                              Type:       string
                            Description:  Annotations to be added to children resources.
                            Type:         object
                          Labels:
                            Additional Properties:
                              Type:       string
                            Description:  Labels to be added to children resources.
                            Type:         object
                        Type:             object
                      Password Key:
                        Description:  PasswordKey to be used in the Secret.
                        Type:         string
                      Port Key:
                        Description:  PortKey to be used in the Secret.
                        Type:         string
                      Username Key:
                        Description:  UsernameKey to be used in the Secret.
                        Type:         string
                    Type:             object
                  Service Name:
                    Description:  ServiceName to be used in the Connection.
                    Type:         string
                Type:             object
              Primary Service:
                Description:  PrimaryService defines templates to configure the primary Service object.
                Properties:
                  Allocate Load Balancer Node Ports:
                    Description:  AllocateLoadBalancerNodePorts Service field.
                    Type:         boolean
                  External Traffic Policy:
                    Description:  ExternalTrafficPolicy Service field.
                    Type:         string
                  Load Balancer IP:
                    Description:  LoadBalancerIP Service field.
                    Type:         string
                  Load Balancer Source Ranges:
                    Description:  LoadBalancerSourceRanges Service field.
                    Items:
                      Type:  string
                    Type:    array
                  Metadata:
                    Description:  Metadata to be added to the Service metadata.
                    Properties:
                      Annotations:
                        Additional Properties:
                          Type:       string
                        Description:  Annotations to be added to children resources.
                        Type:         object
                      Labels:
                        Additional Properties:
                          Type:       string
                        Description:  Labels to be added to children resources.
                        Type:         object
                    Type:             object
                  Session Affinity:
                    Description:  SessionAffinity Service field.
                    Type:         string
                  Type:
                    Default:      ClusterIP
                    Description:  Type is the Service type. One of `ClusterIP`, `NodePort` or `LoadBalancer`. If not defined, it defaults to `ClusterIP`.
                    Enum:
                      ClusterIP
                      NodePort
                      LoadBalancer
                    Type:  string
                Type:      object
              Priority Class Name:
                Description:  PriorityClassName to be used in the Pod.
                Type:         string
              Readiness Probe:
                Description:  ReadinessProbe to be used in the Container.
                Properties:
                  Exec:
                    Description:  Exec specifies the action to take.
                    Properties:
                      Command:
                        Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                        Items:
                          Type:  string
                        Type:    array
                    Type:        object
                  Failure Threshold:
                    Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                    Format:  int32
                    Type:    integer
                  Grpc:
                    Description:  GRPC specifies an action involving a GRPC port.
                    Properties:
                      Port:
                        Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                        Format:       int32
                        Type:         integer
                      Service:
                        Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                        Type:  string
                    Required:
                      port
                    Type:  object
                  Http Get:
                    Description:  HTTPGet specifies the http request to perform.
                    Properties:
                      Host:
                        Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                        Type:  string
                      Http Headers:
                        Description:  Custom headers to set in the request. HTTP allows repeated headers.
                        Items:
                          Description:  HTTPHeader describes a custom header to be used in HTTP probes
                          Properties:
                            Name:
                              Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                              Type:  string
                            Value:
                              Description:  The header field value
                              Type:         string
                          Required:
                            name
                            value
                          Type:  object
                        Type:    array
                      Path:
                        Description:  Path to access on the HTTP server.
                        Type:         string
                      Port:
                        Any Of:
                          Type:       integer
                          Type:       string
                        Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                        X - Kubernetes - Int - Or - String:  true
                      Scheme:
                        Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                        Type:  string
                    Required:
                      port
                    Type:  object
                  Initial Delay Seconds:
                    Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                    Format:  int32
                    Type:    integer
                  Period Seconds:
                    Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                    Format:  int32
                    Type:    integer
                  Success Threshold:
                    Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                    Format:  int32
                    Type:    integer
                  Tcp Socket:
                    Description:  TCPSocket specifies an action involving a TCP port.
                    Properties:
                      Host:
                        Description:  Optional: Host name to connect to, defaults to the pod IP.
                        Type:         string
                      Port:
                        Any Of:
                          Type:       integer
                          Type:       string
                        Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                        X - Kubernetes - Int - Or - String:  true
                    Required:
                      port
                    Type:  object
                  Termination Grace Period Seconds:
                    Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                    Format:  int64
                    Type:    integer
                  Timeout Seconds:
                    Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                    Format:  int32
                    Type:    integer
                Type:        object
              Replicas:
                Default:      1
                Description:  Replicas indicates the number of desired instances.
                Format:       int32
                Type:         integer
              Replication:
                Description:  Replication configures high availability via replication.
                Properties:
                  Enabled:
                    Description:  Enabled is a flag to enable Replication.
                    Type:         boolean
                  Primary:
                    Description:  Primary is the replication configuration for the primary node.
                    Properties:
                      Automatic Failover:
                        Description:  AutomaticFailover indicates whether the operator should automatically update PodIndex to perform an automatic primary failover.
                        Type:         boolean
                      Pod Index:
                        Description:  PodIndex is the StatefulSet index of the primary node. The user may change this field to perform a manual switchover.
                        Type:         integer
                    Type:             object
                  Probes Enabled:
                    Description:  ProbesEnabled indicates to use replication specific liveness and readiness probes.
This probes check that the primary can receive queries and that the replica has the replication thread running.
                    Type:  boolean
                  Replica:
                    Description:  ReplicaReplication is the replication configuration for the replica nodes.
                    Properties:
                      Connection Retries:
                        Description:  ConnectionRetries to be used when the replica connects to the primary.
                        Type:         integer
                      Connection Timeout:
                        Description:  ConnectionTimeout to be used when the replica connects to the primary.
                        Type:         string
                      Gtid:
                        Description:  Gtid indicates which Global Transaction ID should be used when connecting a replica to the master.
See: https://mariadb.com/kb/en/gtid/#using-current_pos-vs-slave_pos.
                        Enum:
                          CurrentPos
                          SlavePos
                        Type:  string
                      Repl Password Secret Key Ref:
                        Description:  ReplPasswordSecretKeyRef provides a reference to the Secret to use as password for the replication user.
                        Properties:
                          Generate:
                            Default:      false
                            Description:  Generate indicates whether the Secret should be generated if the Secret referenced is not present.
                            Type:         boolean
                          Key:
                            Description:  The key of the secret to select from.  Must be a valid secret key.
                            Type:         string
                          Name:
                            Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                            Type:  string
                          Optional:
                            Description:  Specify whether the Secret or its key must be defined
                            Type:         boolean
                        Required:
                          key
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Sync Timeout:
                        Description:  SyncTimeout defines the timeout for a replica to be synced with the primary when performing a primary switchover.
If the timeout is reached, the replica GTID will be reset and the switchover will continue.
                        Type:  string
                      Wait Point:
                        Description:  WaitPoint defines whether the transaction should wait for ACK before committing to the storage engine.
More info: https://mariadb.com/kb/en/semisynchronous-replication/#rpl_semi_sync_master_wait_point.
                        Enum:
                          AfterSync
                          AfterCommit
                        Type:  string
                    Type:      object
                  Sync Binlog:
                    Description:  SyncBinlog indicates whether the binary log should be synchronized to the disk after every event.
It trades off performance for consistency.
See: https://mariadb.com/kb/en/replication-and-binary-log-system-variables/#sync_binlog.
                    Type:  boolean
                Type:      object
              Resources:
                Description:  Resouces describes the compute resource requirements.
                Properties:
                  Claims:
                    Description:  Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.


This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.


This field is immutable. It can only be set for containers.
                    Items:
                      Description:  ResourceClaim references one entry in PodSpec.ResourceClaims.
                      Properties:
                        Name:
                          Description:  Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container.
                          Type:  string
                      Required:
                        name
                      Type:  object
                    Type:    array
                    X - Kubernetes - List - Map - Keys:
                      name
                    X - Kubernetes - List - Type:  map
                  Limits:
                    Additional Properties:
                      Any Of:
                        Type:                              integer
                        Type:                              string
                      Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      X - Kubernetes - Int - Or - String:  true
                    Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                    Type:  object
                  Requests:
                    Additional Properties:
                      Any Of:
                        Type:                              integer
                        Type:                              string
                      Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      X - Kubernetes - Int - Or - String:  true
                    Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                    Type:  object
                Type:      object
              Root Empty Password:
                Description:  RootEmptyPassword indicates if the root password should be empty.
                Type:         boolean
              Root Password Secret Key Ref:
                Description:  RootPasswordSecretKeyRef is a reference to a Secret key containing the root password.
                Properties:
                  Generate:
                    Default:      false
                    Description:  Generate indicates whether the Secret should be generated if the Secret referenced is not present.
                    Type:         boolean
                  Key:
                    Description:  The key of the secret to select from.  Must be a valid secret key.
                    Type:         string
                  Name:
                    Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                    Type:  string
                  Optional:
                    Description:  Specify whether the Secret or its key must be defined
                    Type:         boolean
                Required:
                  key
                Type:                         object
                X - Kubernetes - Map - Type:  atomic
              Secondary Connection:
                Description:  SecondaryConnection defines templates to configure the secondary Connection object.
                Properties:
                  Health Check:
                    Description:  HealthCheck to be used in the Connection.
                    Properties:
                      Interval:
                        Description:  Interval used to perform health checks.
                        Type:         string
                      Retry Interval:
                        Description:  RetryInterval is the interval used to perform health check retries.
                        Type:         string
                    Type:             object
                  Params:
                    Additional Properties:
                      Type:       string
                    Description:  Params to be used in the Connection.
                    Type:         object
                  Port:
                    Description:  Port to connect to. If not provided, it defaults to the MariaDB port or to the first MaxScale listener.
                    Format:       int32
                    Type:         integer
                  Secret Name:
                    Description:  SecretName to be used in the Connection.
                    Type:         string
                  Secret Template:
                    Description:  SecretTemplate to be used in the Connection.
                    Properties:
                      Database Key:
                        Description:  DatabaseKey to be used in the Secret.
                        Type:         string
                      Format:
                        Description:  Format to be used in the Secret.
                        Type:         string
                      Host Key:
                        Description:  HostKey to be used in the Secret.
                        Type:         string
                      Key:
                        Description:  Key to be used in the Secret.
                        Type:         string
                      Metadata:
                        Description:  Metadata to be added to the Secret object.
                        Properties:
                          Annotations:
                            Additional Properties:
                              Type:       string
                            Description:  Annotations to be added to children resources.
                            Type:         object
                          Labels:
                            Additional Properties:
                              Type:       string
                            Description:  Labels to be added to children resources.
                            Type:         object
                        Type:             object
                      Password Key:
                        Description:  PasswordKey to be used in the Secret.
                        Type:         string
                      Port Key:
                        Description:  PortKey to be used in the Secret.
                        Type:         string
                      Username Key:
                        Description:  UsernameKey to be used in the Secret.
                        Type:         string
                    Type:             object
                  Service Name:
                    Description:  ServiceName to be used in the Connection.
                    Type:         string
                Type:             object
              Secondary Service:
                Description:  SecondaryService defines templates to configure the secondary Service object.
                Properties:
                  Allocate Load Balancer Node Ports:
                    Description:  AllocateLoadBalancerNodePorts Service field.
                    Type:         boolean
                  External Traffic Policy:
                    Description:  ExternalTrafficPolicy Service field.
                    Type:         string
                  Load Balancer IP:
                    Description:  LoadBalancerIP Service field.
                    Type:         string
                  Load Balancer Source Ranges:
                    Description:  LoadBalancerSourceRanges Service field.
                    Items:
                      Type:  string
                    Type:    array
                  Metadata:
                    Description:  Metadata to be added to the Service metadata.
                    Properties:
                      Annotations:
                        Additional Properties:
                          Type:       string
                        Description:  Annotations to be added to children resources.
                        Type:         object
                      Labels:
                        Additional Properties:
                          Type:       string
                        Description:  Labels to be added to children resources.
                        Type:         object
                    Type:             object
                  Session Affinity:
                    Description:  SessionAffinity Service field.
                    Type:         string
                  Type:
                    Default:      ClusterIP
                    Description:  Type is the Service type. One of `ClusterIP`, `NodePort` or `LoadBalancer`. If not defined, it defaults to `ClusterIP`.
                    Enum:
                      ClusterIP
                      NodePort
                      LoadBalancer
                    Type:  string
                Type:      object
              Security Context:
                Description:  SecurityContext holds security configuration that will be applied to a container.
                Properties:
                  Allow Privilege Escalation:
                    Description:  AllowPrivilegeEscalation controls whether a process can gain more
privileges than its parent process. This bool directly controls if
the no_new_privs flag will be set on the container process.
AllowPrivilegeEscalation is true always when the container is:
1) run as Privileged
2) has CAP_SYS_ADMIN
Note that this field cannot be set when spec.os.name is windows.
                    Type:  boolean
                  Capabilities:
                    Description:  The capabilities to add/drop when running containers.
Defaults to the default set of capabilities granted by the container runtime.
Note that this field cannot be set when spec.os.name is windows.
                    Properties:
                      Add:
                        Description:  Added capabilities
                        Items:
                          Description:  Capability represent POSIX capabilities type
                          Type:         string
                        Type:           array
                      Drop:
                        Description:  Removed capabilities
                        Items:
                          Description:  Capability represent POSIX capabilities type
                          Type:         string
                        Type:           array
                    Type:               object
                  Privileged:
                    Description:  Run container in privileged mode.
Processes in privileged containers are essentially equivalent to root on the host.
Defaults to false.
Note that this field cannot be set when spec.os.name is windows.
                    Type:  boolean
                  Proc Mount:
                    Description:  procMount denotes the type of proc mount to use for the containers.
The default is DefaultProcMount which uses the container runtime defaults for
readonly paths and masked paths.
This requires the ProcMountType feature flag to be enabled.
Note that this field cannot be set when spec.os.name is windows.
                    Type:  string
                  Read Only Root Filesystem:
                    Description:  Whether this container has a read-only root filesystem.
Default is false.
Note that this field cannot be set when spec.os.name is windows.
                    Type:  boolean
                  Run As Group:
                    Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                    Format:  int64
                    Type:    integer
                  Run As Non Root:
                    Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                    Type:  boolean
                  Run As User:
                    Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                    Format:  int64
                    Type:    integer
                  Se Linux Options:
                    Description:  The SELinux context to be applied to the container.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                    Properties:
                      Level:
                        Description:  Level is SELinux level label that applies to the container.
                        Type:         string
                      Role:
                        Description:  Role is a SELinux role label that applies to the container.
                        Type:         string
                      Type:
                        Description:  Type is a SELinux type label that applies to the container.
                        Type:         string
                      User:
                        Description:  User is a SELinux user label that applies to the container.
                        Type:         string
                    Type:             object
                  Seccomp Profile:
                    Description:  The seccomp options to use by this container. If seccomp options are
provided at both the pod & container level, the container options
override the pod options.
Note that this field cannot be set when spec.os.name is windows.
                    Properties:
                      Localhost Profile:
                        Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                        Type:  string
                      Type:
                        Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                        Type:  string
                    Required:
                      type
                    Type:  object
                  Windows Options:
                    Description:  The Windows specific settings applied to all containers.
If unspecified, the options from the PodSecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                    Properties:
                      Gmsa Credential Spec:
                        Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                        Type:  string
                      Gmsa Credential Spec Name:
                        Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                        Type:         string
                      Host Process:
                        Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                        Type:  boolean
                      Run As User Name:
                        Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                        Type:  string
                    Type:      object
                Type:          object
              Service:
                Description:  Service defines templates to configure the general Service object.
                Properties:
                  Allocate Load Balancer Node Ports:
                    Description:  AllocateLoadBalancerNodePorts Service field.
                    Type:         boolean
                  External Traffic Policy:
                    Description:  ExternalTrafficPolicy Service field.
                    Type:         string
                  Load Balancer IP:
                    Description:  LoadBalancerIP Service field.
                    Type:         string
                  Load Balancer Source Ranges:
                    Description:  LoadBalancerSourceRanges Service field.
                    Items:
                      Type:  string
                    Type:    array
                  Metadata:
                    Description:  Metadata to be added to the Service metadata.
                    Properties:
                      Annotations:
                        Additional Properties:
                          Type:       string
                        Description:  Annotations to be added to children resources.
                        Type:         object
                      Labels:
                        Additional Properties:
                          Type:       string
                        Description:  Labels to be added to children resources.
                        Type:         object
                    Type:             object
                  Session Affinity:
                    Description:  SessionAffinity Service field.
                    Type:         string
                  Type:
                    Default:      ClusterIP
                    Description:  Type is the Service type. One of `ClusterIP`, `NodePort` or `LoadBalancer`. If not defined, it defaults to `ClusterIP`.
                    Enum:
                      ClusterIP
                      NodePort
                      LoadBalancer
                    Type:  string
                Type:      object
              Service Account Name:
                Description:  ServiceAccountName is the name of the ServiceAccount to be used by the Pods.
                Type:         string
              Sidecar Containers:
                Description:  SidecarContainers to be used in the Pod.
                Items:
                  Description:  Container object definition.
                  Properties:
                    Args:
                      Description:  Args to be used in the Container.
                      Items:
                        Type:  string
                      Type:    array
                    Command:
                      Description:  Command to be used in the Container.
                      Items:
                        Type:  string
                      Type:    array
                    Env:
                      Description:  Env represents the environment variables to be injected in a container.
                      Items:
                        Description:  EnvVar represents an environment variable present in a Container.
                        Properties:
                          Name:
                            Description:  Name of the environment variable. Must be a C_IDENTIFIER.
                            Type:         string
                          Value:
                            Description:  Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".
                            Type:  string
                          Value From:
                            Description:  Source for the environment variable's value. Cannot be used if value is not empty.
                            Properties:
                              Config Map Key Ref:
                                Description:  Selects a key of a ConfigMap.
                                Properties:
                                  Key:
                                    Description:  The key to select.
                                    Type:         string
                                  Name:
                                    Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                    Type:  string
                                  Optional:
                                    Description:  Specify whether the ConfigMap or its key must be defined
                                    Type:         boolean
                                Required:
                                  key
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                              Field Ref:
                                Description:  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                                Properties:
                                  API Version:
                                    Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                    Type:         string
                                  Field Path:
                                    Description:  Path of the field to select in the specified API version.
                                    Type:         string
                                Required:
                                  fieldPath
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                              Resource Field Ref:
                                Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                                Properties:
                                  Container Name:
                                    Description:  Container name: required for volumes, optional for env vars
                                    Type:         string
                                  Divisor:
                                    Any Of:
                                      Type:                              integer
                                      Type:                              string
                                    Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                    Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    X - Kubernetes - Int - Or - String:  true
                                  Resource:
                                    Description:  Required: resource to select
                                    Type:         string
                                Required:
                                  resource
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                              Secret Key Ref:
                                Description:  Selects a key of a secret in the pod's namespace
                                Properties:
                                  Key:
                                    Description:  The key of the secret to select from.  Must be a valid secret key.
                                    Type:         string
                                  Name:
                                    Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                    Type:  string
                                  Optional:
                                    Description:  Specify whether the Secret or its key must be defined
                                    Type:         boolean
                                Required:
                                  key
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                            Type:                             object
                        Required:
                          name
                        Type:  object
                      Type:    array
                    Env From:
                      Description:  EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
                      Items:
                        Description:  EnvFromSource represents the source of a set of ConfigMaps
                        Properties:
                          Config Map Ref:
                            Description:  The ConfigMap to select from
                            Properties:
                              Name:
                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                Type:  string
                              Optional:
                                Description:              Specify whether the ConfigMap must be defined
                                Type:                     boolean
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                          Prefix:
                            Description:  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                            Type:         string
                          Secret Ref:
                            Description:  The Secret to select from
                            Properties:
                              Name:
                                Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                Type:  string
                              Optional:
                                Description:              Specify whether the Secret must be defined
                                Type:                     boolean
                            Type:                         object
                            X - Kubernetes - Map - Type:  atomic
                        Type:                             object
                      Type:                               array
                    Image:
                      Description:  Image name to be used by the MariaDB instances. The supported format is `<image>:<tag>`.
                      Type:         string
                    Image Pull Policy:
                      Description:  ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
                      Enum:
                        Always
                        Never
                        IfNotPresent
                      Type:  string
                    Liveness Probe:
                      Description:  LivenessProbe to be used in the Container.
                      Properties:
                        Exec:
                          Description:  Exec specifies the action to take.
                          Properties:
                            Command:
                              Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                              Items:
                                Type:  string
                              Type:    array
                          Type:        object
                        Failure Threshold:
                          Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                          Format:  int32
                          Type:    integer
                        Grpc:
                          Description:  GRPC specifies an action involving a GRPC port.
                          Properties:
                            Port:
                              Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                              Format:       int32
                              Type:         integer
                            Service:
                              Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                              Type:  string
                          Required:
                            port
                          Type:  object
                        Http Get:
                          Description:  HTTPGet specifies the http request to perform.
                          Properties:
                            Host:
                              Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                              Type:  string
                            Http Headers:
                              Description:  Custom headers to set in the request. HTTP allows repeated headers.
                              Items:
                                Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                Properties:
                                  Name:
                                    Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                    Type:  string
                                  Value:
                                    Description:  The header field value
                                    Type:         string
                                Required:
                                  name
                                  value
                                Type:  object
                              Type:    array
                            Path:
                              Description:  Path to access on the HTTP server.
                              Type:         string
                            Port:
                              Any Of:
                                Type:       integer
                                Type:       string
                              Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                              X - Kubernetes - Int - Or - String:  true
                            Scheme:
                              Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                              Type:  string
                          Required:
                            port
                          Type:  object
                        Initial Delay Seconds:
                          Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                          Format:  int32
                          Type:    integer
                        Period Seconds:
                          Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                          Format:  int32
                          Type:    integer
                        Success Threshold:
                          Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                          Format:  int32
                          Type:    integer
                        Tcp Socket:
                          Description:  TCPSocket specifies an action involving a TCP port.
                          Properties:
                            Host:
                              Description:  Optional: Host name to connect to, defaults to the pod IP.
                              Type:         string
                            Port:
                              Any Of:
                                Type:       integer
                                Type:       string
                              Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                              X - Kubernetes - Int - Or - String:  true
                          Required:
                            port
                          Type:  object
                        Termination Grace Period Seconds:
                          Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                          Format:  int64
                          Type:    integer
                        Timeout Seconds:
                          Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                          Format:  int32
                          Type:    integer
                      Type:        object
                    Readiness Probe:
                      Description:  ReadinessProbe to be used in the Container.
                      Properties:
                        Exec:
                          Description:  Exec specifies the action to take.
                          Properties:
                            Command:
                              Description:  Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                              Items:
                                Type:  string
                              Type:    array
                          Type:        object
                        Failure Threshold:
                          Description:  Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
                          Format:  int32
                          Type:    integer
                        Grpc:
                          Description:  GRPC specifies an action involving a GRPC port.
                          Properties:
                            Port:
                              Description:  Port number of the gRPC service. Number must be in the range 1 to 65535.
                              Format:       int32
                              Type:         integer
                            Service:
                              Description:  Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


If this is not specified, the default behavior is defined by gRPC.
                              Type:  string
                          Required:
                            port
                          Type:  object
                        Http Get:
                          Description:  HTTPGet specifies the http request to perform.
                          Properties:
                            Host:
                              Description:  Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
                              Type:  string
                            Http Headers:
                              Description:  Custom headers to set in the request. HTTP allows repeated headers.
                              Items:
                                Description:  HTTPHeader describes a custom header to be used in HTTP probes
                                Properties:
                                  Name:
                                    Description:  The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                    Type:  string
                                  Value:
                                    Description:  The header field value
                                    Type:         string
                                Required:
                                  name
                                  value
                                Type:  object
                              Type:    array
                            Path:
                              Description:  Path to access on the HTTP server.
                              Type:         string
                            Port:
                              Any Of:
                                Type:       integer
                                Type:       string
                              Description:  Name or number of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                              X - Kubernetes - Int - Or - String:  true
                            Scheme:
                              Description:  Scheme to use for connecting to the host.
Defaults to HTTP.
                              Type:  string
                          Required:
                            port
                          Type:  object
                        Initial Delay Seconds:
                          Description:  Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                          Format:  int32
                          Type:    integer
                        Period Seconds:
                          Description:  How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
                          Format:  int32
                          Type:    integer
                        Success Threshold:
                          Description:  Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                          Format:  int32
                          Type:    integer
                        Tcp Socket:
                          Description:  TCPSocket specifies an action involving a TCP port.
                          Properties:
                            Host:
                              Description:  Optional: Host name to connect to, defaults to the pod IP.
                              Type:         string
                            Port:
                              Any Of:
                                Type:       integer
                                Type:       string
                              Description:  Number or name of the port to access on the container.
Number must be in the range 1 to 65535.
Name must be an IANA_SVC_NAME.
                              X - Kubernetes - Int - Or - String:  true
                          Required:
                            port
                          Type:  object
                        Termination Grace Period Seconds:
                          Description:  Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                          Format:  int64
                          Type:    integer
                        Timeout Seconds:
                          Description:  Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                          Format:  int32
                          Type:    integer
                      Type:        object
                    Resources:
                      Description:  Resouces describes the compute resource requirements.
                      Properties:
                        Claims:
                          Description:  Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.


This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.


This field is immutable. It can only be set for containers.
                          Items:
                            Description:  ResourceClaim references one entry in PodSpec.ResourceClaims.
                            Properties:
                              Name:
                                Description:  Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container.
                                Type:  string
                            Required:
                              name
                            Type:  object
                          Type:    array
                          X - Kubernetes - List - Map - Keys:
                            name
                          X - Kubernetes - List - Type:  map
                        Limits:
                          Additional Properties:
                            Any Of:
                              Type:                              integer
                              Type:                              string
                            Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            X - Kubernetes - Int - Or - String:  true
                          Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                          Type:  object
                        Requests:
                          Additional Properties:
                            Any Of:
                              Type:                              integer
                              Type:                              string
                            Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            X - Kubernetes - Int - Or - String:  true
                          Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                          Type:  object
                      Type:      object
                    Security Context:
                      Description:  SecurityContext holds security configuration that will be applied to a container.
                      Properties:
                        Allow Privilege Escalation:
                          Description:  AllowPrivilegeEscalation controls whether a process can gain more
privileges than its parent process. This bool directly controls if
the no_new_privs flag will be set on the container process.
AllowPrivilegeEscalation is true always when the container is:
1) run as Privileged
2) has CAP_SYS_ADMIN
Note that this field cannot be set when spec.os.name is windows.
                          Type:  boolean
                        Capabilities:
                          Description:  The capabilities to add/drop when running containers.
Defaults to the default set of capabilities granted by the container runtime.
Note that this field cannot be set when spec.os.name is windows.
                          Properties:
                            Add:
                              Description:  Added capabilities
                              Items:
                                Description:  Capability represent POSIX capabilities type
                                Type:         string
                              Type:           array
                            Drop:
                              Description:  Removed capabilities
                              Items:
                                Description:  Capability represent POSIX capabilities type
                                Type:         string
                              Type:           array
                          Type:               object
                        Privileged:
                          Description:  Run container in privileged mode.
Processes in privileged containers are essentially equivalent to root on the host.
Defaults to false.
Note that this field cannot be set when spec.os.name is windows.
                          Type:  boolean
                        Proc Mount:
                          Description:  procMount denotes the type of proc mount to use for the containers.
The default is DefaultProcMount which uses the container runtime defaults for
readonly paths and masked paths.
This requires the ProcMountType feature flag to be enabled.
Note that this field cannot be set when spec.os.name is windows.
                          Type:  string
                        Read Only Root Filesystem:
                          Description:  Whether this container has a read-only root filesystem.
Default is false.
Note that this field cannot be set when spec.os.name is windows.
                          Type:  boolean
                        Run As Group:
                          Description:  The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                          Format:  int64
                          Type:    integer
                        Run As Non Root:
                          Description:  Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                          Type:  boolean
                        Run As User:
                          Description:  The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                          Format:  int64
                          Type:    integer
                        Se Linux Options:
                          Description:  The SELinux context to be applied to the container.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
                          Properties:
                            Level:
                              Description:  Level is SELinux level label that applies to the container.
                              Type:         string
                            Role:
                              Description:  Role is a SELinux role label that applies to the container.
                              Type:         string
                            Type:
                              Description:  Type is a SELinux type label that applies to the container.
                              Type:         string
                            User:
                              Description:  User is a SELinux user label that applies to the container.
                              Type:         string
                          Type:             object
                        Seccomp Profile:
                          Description:  The seccomp options to use by this container. If seccomp options are
provided at both the pod & container level, the container options
override the pod options.
Note that this field cannot be set when spec.os.name is windows.
                          Properties:
                            Localhost Profile:
                              Description:  localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
                              Type:  string
                            Type:
                              Description:  type indicates which kind of seccomp profile will be applied.
Valid options are:


Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
                              Type:  string
                          Required:
                            type
                          Type:  object
                        Windows Options:
                          Description:  The Windows specific settings applied to all containers.
If unspecified, the options from the PodSecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
                          Properties:
                            Gmsa Credential Spec:
                              Description:  GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
                              Type:  string
                            Gmsa Credential Spec Name:
                              Description:  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                              Type:         string
                            Host Process:
                              Description:  HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
                              Type:  boolean
                            Run As User Name:
                              Description:  The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
                              Type:  string
                          Type:      object
                      Type:          object
                    Volume Mounts:
                      Description:  VolumeMounts to be used in the Container.
                      Items:
                        Description:  VolumeMount describes a mounting of a Volume within a container.
                        Properties:
                          Mount Path:
                            Description:  Path within the container at which the volume should be mounted.  Must
not contain ':'.
                            Type:  string
                          Mount Propagation:
                            Description:  mountPropagation determines how mounts are propagated from the host
to container and the other way around.
When not set, MountPropagationNone is used.
This field is beta in 1.10.
                            Type:  string
                          Name:
                            Description:  This must match the Name of a Volume.
                            Type:         string
                          Read Only:
                            Description:  Mounted read-only if true, read-write otherwise (false or unspecified).
Defaults to false.
                            Type:  boolean
                          Sub Path:
                            Description:  Path within the volume from which the container's volume should be mounted.
Defaults to "" (volume's root).
                            Type:  string
                          Sub Path Expr:
                            Description:  Expanded path within the volume from which the container's volume should be mounted.
Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
Defaults to "" (volume's root).
SubPathExpr and SubPath are mutually exclusive.
                            Type:  string
                        Required:
                          mountPath
                          name
                        Type:  object
                      Type:    array
                  Required:
                    image
                  Type:  object
                Type:    array
              Storage:
                Description:  Storage defines the storage options to be used for provisioning the PVCs mounted by MariaDB.
                Properties:
                  Ephemeral:
                    Description:  Ephemeral indicates whether to use ephemeral storage in the PVCs. It is only compatible with non HA MariaDBs.
                    Type:         boolean
                  Resize In Use Volumes:
                    Description:  ResizeInUseVolumes indicates whether the PVCs can be resized. The 'StorageClassName' used should have 'allowVolumeExpansion' set to 'true' to allow resizing.
It defaults to true.
                    Type:  boolean
                  Size:
                    Any Of:
                      Type:                              integer
                      Type:                              string
                    Description:                         Size of the PVCs to be mounted by MariaDB. Required if not provided in 'VolumeClaimTemplate'. It superseeds the storage size specified in 'VolumeClaimTemplate'.
                    Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    X - Kubernetes - Int - Or - String:  true
                  Storage Class Name:
                    Description:  StorageClassName to be used to provision the PVCS. It superseeds the 'StorageClassName' specified in 'VolumeClaimTemplate'.
If not provided, the default 'StorageClass' configured in the cluster is used.
                    Type:  string
                  Volume Claim Template:
                    Description:  VolumeClaimTemplate provides a template to define the PVCs.
                    Properties:
                      Access Modes:
                        Description:  accessModes contains the desired access modes the volume should have.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                        Items:
                          Type:  string
                        Type:    array
                      Data Source:
                        Description:  dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                        Properties:
                          API Group:
                            Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                            Type:  string
                          Kind:
                            Description:  Kind is the type of resource being referenced
                            Type:         string
                          Name:
                            Description:  Name is the name of resource being referenced
                            Type:         string
                        Required:
                          kind
                          name
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Data Source Ref:
                        Description:  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                        Properties:
                          API Group:
                            Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                            Type:  string
                          Kind:
                            Description:  Kind is the type of resource being referenced
                            Type:         string
                          Name:
                            Description:  Name is the name of resource being referenced
                            Type:         string
                          Namespace:
                            Description:  Namespace is the namespace of resource being referenced
Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                            Type:  string
                        Required:
                          kind
                          name
                        Type:  object
                      Metadata:
                        Description:  Metadata to be added to the PVC metadata.
                        Properties:
                          Annotations:
                            Additional Properties:
                              Type:       string
                            Description:  Annotations to be added to children resources.
                            Type:         object
                          Labels:
                            Additional Properties:
                              Type:       string
                            Description:  Labels to be added to children resources.
                            Type:         object
                        Type:             object
                      Resources:
                        Description:  resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                        Properties:
                          Limits:
                            Additional Properties:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            Type:  object
                          Requests:
                            Additional Properties:
                              Any Of:
                                Type:                              integer
                                Type:                              string
                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              X - Kubernetes - Int - Or - String:  true
                            Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            Type:  object
                        Type:      object
                      Selector:
                        Description:  selector is a label query over volumes to consider for binding.
                        Properties:
                          Match Expressions:
                            Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                            Items:
                              Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                              Properties:
                                Key:
                                  Description:  key is the label key that the selector applies to.
                                  Type:         string
                                Operator:
                                  Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                  Type:  string
                                Values:
                                  Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                  Items:
                                    Type:  string
                                  Type:    array
                              Required:
                                key
                                operator
                              Type:  object
                            Type:    array
                          Match Labels:
                            Additional Properties:
                              Type:       string
                            Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                            Type:                     object
                        Type:                         object
                        X - Kubernetes - Map - Type:  atomic
                      Storage Class Name:
                        Description:  storageClassName is the name of the StorageClass required by the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                        Type:  string
                      Volume Attributes Class Name:
                        Description:  volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
If specified, the CSI driver will create or update the volume with the attributes defined
in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
will be set by the persistentvolume controller if it exists.
If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
exists.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
                        Type:  string
                      Volume Mode:
                        Description:  volumeMode defines what type of volume is required by the claim.
Value of Filesystem is implied when not included in claim spec.
                        Type:  string
                      Volume Name:
                        Description:  volumeName is the binding reference to the PersistentVolume backing this claim.
                        Type:         string
                    Type:             object
                  Wait For Volume Resize:
                    Description:  WaitForVolumeResize indicates whether to wait for the PVCs to be resized before marking the MariaDB object as ready. This will block other operations such as cluster recovery while the resize is in progress.
It defaults to true.
                    Type:  boolean
                Type:      object
              Tolerations:
                Description:  Tolerations to be used in the Pod.
                Items:
                  Description:  The pod this Toleration is attached to tolerates any taint that matches
the triple <key,value,effect> using the matching operator <operator>.
                  Properties:
                    Effect:
                      Description:  Effect indicates the taint effect to match. Empty means match all taint effects.
When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                      Type:  string
                    Key:
                      Description:  Key is the taint key that the toleration applies to. Empty means match all taint keys.
If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                      Type:  string
                    Operator:
                      Description:  Operator represents a key's relationship to the value.
Valid operators are Exists and Equal. Defaults to Equal.
Exists is equivalent to wildcard for value, so that a pod can
tolerate all taints of a particular category.
                      Type:  string
                    Toleration Seconds:
                      Description:  TolerationSeconds represents the period of time the toleration (which must be
of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
it is not set, which means tolerate the taint forever (do not evict). Zero and
negative values will be treated as 0 (evict immediately) by the system.
                      Format:  int64
                      Type:    integer
                    Value:
                      Description:  Value is the taint value the toleration matches to.
If the operator is Exists, the value should be empty, otherwise just a regular string.
                      Type:  string
                  Type:      object
                Type:        array
              Topology Spread Constraints:
                Description:  TopologySpreadConstraints to be used in the Pod.
                Items:
                  Description:  TopologySpreadConstraint specifies how to spread matching pods among the given topology.
                  Properties:
                    Label Selector:
                      Description:  LabelSelector is used to find matching pods.
Pods that match this label selector are counted to determine the number of pods
in their corresponding topology domain.
                      Properties:
                        Match Expressions:
                          Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                          Items:
                            Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                            Properties:
                              Key:
                                Description:  key is the label key that the selector applies to.
                                Type:         string
                              Operator:
                                Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                Type:  string
                              Values:
                                Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                Items:
                                  Type:  string
                                Type:    array
                            Required:
                              key
                              operator
                            Type:  object
                          Type:    array
                        Match Labels:
                          Additional Properties:
                            Type:       string
                          Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                          Type:                     object
                      Type:                         object
                      X - Kubernetes - Map - Type:  atomic
                    Match Label Keys:
                      Description:  MatchLabelKeys is a set of pod label keys to select the pods over which
spreading will be calculated. The keys are used to lookup values from the
incoming pod labels, those key-value labels are ANDed with labelSelector
to select the group of existing pods over which spreading will be calculated
for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
MatchLabelKeys cannot be set when LabelSelector isn't set.
Keys that don't exist in the incoming pod labels will
be ignored. A null or empty list means only match against labelSelector.


This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
                      Items:
                        Type:                        string
                      Type:                          array
                      X - Kubernetes - List - Type:  atomic
                    Max Skew:
                      Description:  MaxSkew describes the degree to which pods may be unevenly distributed.
When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
between the number of matching pods in the target topology and the global minimum.
The global minimum is the minimum number of matching pods in an eligible domain
or zero if the number of eligible domains is less than MinDomains.
For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
labelSelector spread as 2/2/1:
In this case, the global minimum is 1.
| zone1 | zone2 | zone3 |
|  P P  |  P P  |   P   |
- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
violate MaxSkew(1).
- if MaxSkew is 2, incoming pod can be scheduled onto any zone.
When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
to topologies that satisfy it.
It's a required field. Default value is 1 and 0 is not allowed.
                      Format:  int32
                      Type:    integer
                    Min Domains:
                      Description:  MinDomains indicates a minimum number of eligible domains.
When the number of eligible domains with matching topology keys is less than minDomains,
Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
And when the number of eligible domains with matching topology keys equals or greater than minDomains,
this value has no effect on scheduling.
As a result, when the number of eligible domains is less than minDomains,
scheduler won't schedule more than maxSkew Pods to those domains.
If value is nil, the constraint behaves as if MinDomains is equal to 1.
Valid values are integers greater than 0.
When value is not nil, WhenUnsatisfiable must be DoNotSchedule.


For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
labelSelector spread as 2/2/2:
| zone1 | zone2 | zone3 |
|  P P  |  P P  |  P P  |
The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
In this situation, new pod with the same labelSelector cannot be scheduled,
because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
it will violate MaxSkew.


This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
                      Format:  int32
                      Type:    integer
                    Node Affinity Policy:
                      Description:  NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
when calculating pod topology spread skew. Options are:
- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.


If this value is nil, the behavior is equivalent to the Honor policy.
This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
                      Type:  string
                    Node Taints Policy:
                      Description:  NodeTaintsPolicy indicates how we will treat node taints when calculating
pod topology spread skew. Options are:
- Honor: nodes without taints, along with tainted nodes for which the incoming pod
has a toleration, are included.
- Ignore: node taints are ignored. All nodes are included.


If this value is nil, the behavior is equivalent to the Ignore policy.
This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
                      Type:  string
                    Topology Key:
                      Description:  TopologyKey is the key of node labels. Nodes that have a label with this key
and identical values are considered to be in the same topology.
We consider each <key, value> as a "bucket", and try to put balanced number
of pods into each bucket.
We define a domain as a particular instance of a topology.
Also, we define an eligible domain as a domain whose nodes meet the requirements of
nodeAffinityPolicy and nodeTaintsPolicy.
e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
It's a required field.
                      Type:  string
                    When Unsatisfiable:
                      Description:  WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
the spread constraint.
- DoNotSchedule (default) tells the scheduler not to schedule it.
- ScheduleAnyway tells the scheduler to schedule the pod in any location,
  but giving higher precedence to topologies that would help reduce the
  skew.
A constraint is considered "Unsatisfiable" for an incoming pod
if and only if every possible node assignment for that pod would violate
"MaxSkew" on some topology.
For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
labelSelector spread as 3/1/1:
| zone1 | zone2 | zone3 |
| P P P |   P   |   P   |
If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
won't make it *more* imbalanced.
It's a required field.
                      Type:  string
                  Required:
                    maxSkew
                    topologyKey
                    whenUnsatisfiable
                  Type:  object
                Type:    array
              Update Strategy:
                Description:  PodDisruptionBudget defines the update strategy for the StatefulSet object.
                Properties:
                  Rolling Update:
                    Description:  RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
                    Properties:
                      Max Unavailable:
                        Any Of:
                          Type:       integer
                          Type:       string
                        Description:  The maximum number of pods that can be unavailable during the update.
Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
Absolute number is calculated from percentage by rounding up. This can not be 0.
Defaults to 1. This field is alpha-level and is only honored by servers that enable the
MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to
Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it
will be counted towards MaxUnavailable.
                        X - Kubernetes - Int - Or - String:  true
                      Partition:
                        Description:  Partition indicates the ordinal at which the StatefulSet should be partitioned
for updates. During a rolling update, all pods from ordinal Replicas-1 to
Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched.
This is helpful in being able to do a canary based deployment. The default value is 0.
                        Format:  int32
                        Type:    integer
                    Type:        object
                  Type:
                    Description:  Type indicates the type of the StatefulSetUpdateStrategy.
Default is RollingUpdate.
                    Type:  string
                Type:      object
              Username:
                Description:  Username is the username of the user to be created on bootstrap.
                Type:         string
              Volume Mounts:
                Description:  VolumeMounts to be used in the Container.
                Items:
                  Description:  VolumeMount describes a mounting of a Volume within a container.
                  Properties:
                    Mount Path:
                      Description:  Path within the container at which the volume should be mounted.  Must
not contain ':'.
                      Type:  string
                    Mount Propagation:
                      Description:  mountPropagation determines how mounts are propagated from the host
to container and the other way around.
When not set, MountPropagationNone is used.
This field is beta in 1.10.
                      Type:  string
                    Name:
                      Description:  This must match the Name of a Volume.
                      Type:         string
                    Read Only:
                      Description:  Mounted read-only if true, read-write otherwise (false or unspecified).
Defaults to false.
                      Type:  boolean
                    Sub Path:
                      Description:  Path within the volume from which the container's volume should be mounted.
Defaults to "" (volume's root).
                      Type:  string
                    Sub Path Expr:
                      Description:  Expanded path within the volume from which the container's volume should be mounted.
Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
Defaults to "" (volume's root).
SubPathExpr and SubPath are mutually exclusive.
                      Type:  string
                  Required:
                    mountPath
                    name
                  Type:  object
                Type:    array
              Volumes:
                Description:  Volumes to be used in the Pod.
                Items:
                  Description:  Volume represents a named volume in a pod that may be accessed by any container in the pod.
                  Properties:
                    Aws Elastic Block Store:
                      Description:  awsElasticBlockStore represents an AWS Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                      Properties:
                        Fs Type:
                          Description:  fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
TODO: how do we prevent errors in the filesystem from compromising the machine
                          Type:  string
                        Partition:
                          Description:  partition is the partition in the volume that you want to mount.
If omitted, the default is to mount by volume name.
Examples: For volume /dev/sda1, you specify the partition as "1".
Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
                          Format:  int32
                          Type:    integer
                        Read Only:
                          Description:  readOnly value true will force the readOnly setting in VolumeMounts.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                          Type:  boolean
                        Volume ID:
                          Description:  volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                          Type:  string
                      Required:
                        volumeID
                      Type:  object
                    Azure Disk:
                      Description:  azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
                      Properties:
                        Caching Mode:
                          Description:  cachingMode is the Host Caching mode: None, Read Only, Read Write.
                          Type:         string
                        Disk Name:
                          Description:  diskName is the Name of the data disk in the blob storage
                          Type:         string
                        Disk URI:
                          Description:  diskURI is the URI of data disk in the blob storage
                          Type:         string
                        Fs Type:
                          Description:  fsType is Filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                          Type:  string
                        Kind:
                          Description:  kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
                          Type:         string
                        Read Only:
                          Description:  readOnly Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                          Type:  boolean
                      Required:
                        diskName
                        diskURI
                      Type:  object
                    Azure File:
                      Description:  azureFile represents an Azure File Service mount on the host and bind mount to the pod.
                      Properties:
                        Read Only:
                          Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                          Type:  boolean
                        Secret Name:
                          Description:  secretName is the  name of secret that contains Azure Storage Account Name and Key
                          Type:         string
                        Share Name:
                          Description:  shareName is the azure share Name
                          Type:         string
                      Required:
                        secretName
                        shareName
                      Type:  object
                    Cephfs:
                      Description:  cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
                      Properties:
                        Monitors:
                          Description:  monitors is Required: Monitors is a collection of Ceph monitors
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                          Items:
                            Type:  string
                          Type:    array
                        Path:
                          Description:  path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
                          Type:         string
                        Read Only:
                          Description:  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                          Type:  boolean
                        Secret File:
                          Description:  secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                          Type:  string
                        Secret Ref:
                          Description:  secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                          Properties:
                            Name:
                              Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                              Type:                     string
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                        User:
                          Description:  user is optional: User is the rados user name, default is admin
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                          Type:  string
                      Required:
                        monitors
                      Type:  object
                    Cinder:
                      Description:  cinder represents a cinder volume attached and mounted on kubelets host machine.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                      Properties:
                        Fs Type:
                          Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                          Type:  string
                        Read Only:
                          Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                          Type:  boolean
                        Secret Ref:
                          Description:  secretRef is optional: points to a secret object containing parameters used to connect
to OpenStack.
                          Properties:
                            Name:
                              Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                              Type:                     string
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                        Volume ID:
                          Description:  volumeID used to identify the volume in cinder.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                          Type:  string
                      Required:
                        volumeID
                      Type:  object
                    Config Map:
                      Description:  configMap represents a configMap that should populate this volume
                      Properties:
                        Default Mode:
                          Description:  defaultMode is optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                          Format:  int32
                          Type:    integer
                        Items:
                          Description:  items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                          Items:
                            Description:  Maps a string key to a path within a volume.
                            Properties:
                              Key:
                                Description:  key is the key to project.
                                Type:         string
                              Mode:
                                Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                Format:  int32
                                Type:    integer
                              Path:
                                Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                Type:  string
                            Required:
                              key
                              path
                            Type:  object
                          Type:    array
                        Name:
                          Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                          Type:  string
                        Optional:
                          Description:              optional specify whether the ConfigMap or its keys must be defined
                          Type:                     boolean
                      Type:                         object
                      X - Kubernetes - Map - Type:  atomic
                    Csi:
                      Description:  csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
                      Properties:
                        Driver:
                          Description:  driver is the name of the CSI driver that handles this volume.
Consult with your admin for the correct name as registered in the cluster.
                          Type:  string
                        Fs Type:
                          Description:  fsType to mount. Ex. "ext4", "xfs", "ntfs".
If not provided, the empty value is passed to the associated CSI driver
which will determine the default filesystem to apply.
                          Type:  string
                        Node Publish Secret Ref:
                          Description:  nodePublishSecretRef is a reference to the secret object containing
sensitive information to pass to the CSI driver to complete the CSI
NodePublishVolume and NodeUnpublishVolume calls.
This field is optional, and  may be empty if no secret is required. If the
secret object contains more than one secret, all secret references are passed.
                          Properties:
                            Name:
                              Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                              Type:                     string
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                        Read Only:
                          Description:  readOnly specifies a read-only configuration for the volume.
Defaults to false (read/write).
                          Type:  boolean
                        Volume Attributes:
                          Additional Properties:
                            Type:       string
                          Description:  volumeAttributes stores driver-specific properties that are passed to the CSI
driver. Consult your driver's documentation for supported values.
                          Type:  object
                      Required:
                        driver
                      Type:  object
                    Downward API:
                      Description:  downwardAPI represents downward API about the pod that should populate this volume
                      Properties:
                        Default Mode:
                          Description:  Optional: mode bits to use on created files by default. Must be a
Optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                          Format:  int32
                          Type:    integer
                        Items:
                          Description:  Items is a list of downward API volume file
                          Items:
                            Description:  DownwardAPIVolumeFile represents information to create the file containing the pod field
                            Properties:
                              Field Ref:
                                Description:  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
                                Properties:
                                  API Version:
                                    Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                    Type:         string
                                  Field Path:
                                    Description:  Path of the field to select in the specified API version.
                                    Type:         string
                                Required:
                                  fieldPath
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                              Mode:
                                Description:  Optional: mode bits used to set permissions on this file, must be an octal value
between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                Format:  int32
                                Type:    integer
                              Path:
                                Description:  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
                                Type:         string
                              Resource Field Ref:
                                Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                                Properties:
                                  Container Name:
                                    Description:  Container name: required for volumes, optional for env vars
                                    Type:         string
                                  Divisor:
                                    Any Of:
                                      Type:                              integer
                                      Type:                              string
                                    Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                    Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    X - Kubernetes - Int - Or - String:  true
                                  Resource:
                                    Description:  Required: resource to select
                                    Type:         string
                                Required:
                                  resource
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                            Required:
                              path
                            Type:  object
                          Type:    array
                      Type:        object
                    Empty Dir:
                      Description:  emptyDir represents a temporary directory that shares a pod's lifetime.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                      Properties:
                        Medium:
                          Description:  medium represents what type of storage medium should back this directory.
The default is "" which means to use the node's default medium.
Must be an empty string (default) or Memory.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                          Type:  string
                        Size Limit:
                          Any Of:
                            Type:       integer
                            Type:       string
                          Description:  sizeLimit is the total amount of local storage required for this EmptyDir volume.
The size limit is also applicable for memory medium.
The maximum usage on memory medium EmptyDir would be the minimum value between
the SizeLimit specified here and the sum of memory limits of all containers in a pod.
The default is nil which means that the limit is undefined.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                          Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          X - Kubernetes - Int - Or - String:  true
                      Type:                                    object
                    Ephemeral:
                      Description:  ephemeral represents a volume that is handled by a cluster storage driver.
The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
and deleted when the pod is removed.


Use this if:
a) the volume is only needed while the pod runs,
b) features of normal volumes like restoring from snapshot or capacity
   tracking are needed,
c) the storage driver is specified through a storage class, and
d) the storage driver supports dynamic volume provisioning through
   a PersistentVolumeClaim (see EphemeralVolumeSource for more
   information on the connection between this volume type
   and PersistentVolumeClaim).


Use PersistentVolumeClaim or one of the vendor-specific
APIs for volumes that persist for longer than the lifecycle
of an individual pod.


Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
be used that way - see the documentation of the driver for
more information.


A pod can use both types of ephemeral volumes and
persistent volumes at the same time.
                      Properties:
                        Volume Claim Template:
                          Description:  Will be used to create a stand-alone PVC to provision the volume.
The pod in which this EphemeralVolumeSource is embedded will be the
owner of the PVC, i.e. the PVC will be deleted together with the
pod.  The name of the PVC will be `<pod name>-<volume name>` where
`<volume name>` is the name from the `PodSpec.Volumes` array
entry. Pod validation will reject the pod if the concatenated name
is not valid for a PVC (for example, too long).


An existing PVC with that name that is not owned by the pod
will *not* be used for the pod to avoid using an unrelated
volume by mistake. Starting the pod is then blocked until
the unrelated PVC is removed. If such a pre-created PVC is
meant to be used by the pod, the PVC has to updated with an
owner reference to the pod once the pod exists. Normally
this should not be necessary, but it may be useful when
manually reconstructing a broken cluster.


This field is read-only and no changes will be made by Kubernetes
to the PVC after it has been created.


Required, must not be nil.
                          Properties:
                            Metadata:
                              Description:  May contain labels and annotations that will be copied into the PVC
when creating it. No other fields are allowed and will be rejected during
validation.
                              Type:  object
                            Spec:
                              Description:  The specification for the PersistentVolumeClaim. The entire content is
copied unchanged into the PVC that gets created from this
template. The same fields as in a PersistentVolumeClaim
are also valid here.
                              Properties:
                                Access Modes:
                                  Description:  accessModes contains the desired access modes the volume should have.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                                  Items:
                                    Type:  string
                                  Type:    array
                                Data Source:
                                  Description:  dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                                  Properties:
                                    API Group:
                                      Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                      Type:  string
                                    Kind:
                                      Description:  Kind is the type of resource being referenced
                                      Type:         string
                                    Name:
                                      Description:  Name is the name of resource being referenced
                                      Type:         string
                                  Required:
                                    kind
                                    name
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Data Source Ref:
                                  Description:  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                  Properties:
                                    API Group:
                                      Description:  APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
                                      Type:  string
                                    Kind:
                                      Description:  Kind is the type of resource being referenced
                                      Type:         string
                                    Name:
                                      Description:  Name is the name of resource being referenced
                                      Type:         string
                                    Namespace:
                                      Description:  Namespace is the namespace of resource being referenced
Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                      Type:  string
                                  Required:
                                    kind
                                    name
                                  Type:  object
                                Resources:
                                  Description:  resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                                  Properties:
                                    Limits:
                                      Additional Properties:
                                        Any Of:
                                          Type:                              integer
                                          Type:                              string
                                        Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        X - Kubernetes - Int - Or - String:  true
                                      Description:                           Limits describes the maximum amount of compute resources allowed.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                      Type:  object
                                    Requests:
                                      Additional Properties:
                                        Any Of:
                                          Type:                              integer
                                          Type:                              string
                                        Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        X - Kubernetes - Int - Or - String:  true
                                      Description:                           Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
otherwise to an implementation-defined value. Requests cannot exceed Limits.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                      Type:  object
                                  Type:      object
                                Selector:
                                  Description:  selector is a label query over volumes to consider for binding.
                                  Properties:
                                    Match Expressions:
                                      Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      Items:
                                        Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                        Properties:
                                          Key:
                                            Description:  key is the label key that the selector applies to.
                                            Type:         string
                                          Operator:
                                            Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                            Type:  string
                                          Values:
                                            Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                            Items:
                                              Type:  string
                                            Type:    array
                                        Required:
                                          key
                                          operator
                                        Type:  object
                                      Type:    array
                                    Match Labels:
                                      Additional Properties:
                                        Type:       string
                                      Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      Type:                     object
                                  Type:                         object
                                  X - Kubernetes - Map - Type:  atomic
                                Storage Class Name:
                                  Description:  storageClassName is the name of the StorageClass required by the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                                  Type:  string
                                Volume Attributes Class Name:
                                  Description:  volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
If specified, the CSI driver will create or update the volume with the attributes defined
in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
will be set by the persistentvolume controller if it exists.
If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
exists.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
                                  Type:  string
                                Volume Mode:
                                  Description:  volumeMode defines what type of volume is required by the claim.
Value of Filesystem is implied when not included in claim spec.
                                  Type:  string
                                Volume Name:
                                  Description:  volumeName is the binding reference to the PersistentVolume backing this claim.
                                  Type:         string
                              Type:             object
                          Required:
                            spec
                          Type:  object
                      Type:      object
                    Fc:
                      Description:  fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
                      Properties:
                        Fs Type:
                          Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
TODO: how do we prevent errors in the filesystem from compromising the machine
                          Type:  string
                        Lun:
                          Description:  lun is Optional: FC target lun number
                          Format:       int32
                          Type:         integer
                        Read Only:
                          Description:  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                          Type:  boolean
                        Target WW Ns:
                          Description:  targetWWNs is Optional: FC target worldwide names (WWNs)
                          Items:
                            Type:  string
                          Type:    array
                        Wwids:
                          Description:  wwids Optional: FC volume world wide identifiers (wwids)
Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
                          Items:
                            Type:  string
                          Type:    array
                      Type:        object
                    Flex Volume:
                      Description:  flexVolume represents a generic volume resource that is
provisioned/attached using an exec based plugin.
                      Properties:
                        Driver:
                          Description:  driver is the name of the driver to use for this volume.
                          Type:         string
                        Fs Type:
                          Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
                          Type:  string
                        Options:
                          Additional Properties:
                            Type:       string
                          Description:  options is Optional: this field holds extra command options if any.
                          Type:         object
                        Read Only:
                          Description:  readOnly is Optional: defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                          Type:  boolean
                        Secret Ref:
                          Description:  secretRef is Optional: secretRef is reference to the secret object containing
sensitive information to pass to the plugin scripts. This may be
empty if no secret object is specified. If the secret object
contains more than one secret, all secrets are passed to the plugin
scripts.
                          Properties:
                            Name:
                              Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                              Type:                     string
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                      Required:
                        driver
                      Type:  object
                    Flocker:
                      Description:  flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
                      Properties:
                        Dataset Name:
                          Description:  datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
should be considered as deprecated
                          Type:  string
                        Dataset UUID:
                          Description:  datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
                          Type:         string
                      Type:             object
                    Gce Persistent Disk:
                      Description:  gcePersistentDisk represents a GCE Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                      Properties:
                        Fs Type:
                          Description:  fsType is filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
TODO: how do we prevent errors in the filesystem from compromising the machine
                          Type:  string
                        Partition:
                          Description:  partition is the partition in the volume that you want to mount.
If omitted, the default is to mount by volume name.
Examples: For volume /dev/sda1, you specify the partition as "1".
Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                          Format:  int32
                          Type:    integer
                        Pd Name:
                          Description:  pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                          Type:  string
                        Read Only:
                          Description:  readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                          Type:  boolean
                      Required:
                        pdName
                      Type:  object
                    Git Repo:
                      Description:  gitRepo represents a git repository at a particular revision.
DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
into the Pod's container.
                      Properties:
                        Directory:
                          Description:  directory is the target directory name.
Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
git repository.  Otherwise, if specified, the volume will contain the git repository in
the subdirectory with the given name.
                          Type:  string
                        Repository:
                          Description:  repository is the URL
                          Type:         string
                        Revision:
                          Description:  revision is the commit hash for the specified revision.
                          Type:         string
                      Required:
                        repository
                      Type:  object
                    Glusterfs:
                      Description:  glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
More info: https://examples.k8s.io/volumes/glusterfs/README.md
                      Properties:
                        Endpoints:
                          Description:  endpoints is the endpoint name that details Glusterfs topology.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                          Type:  string
                        Path:
                          Description:  path is the Glusterfs volume path.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                          Type:  string
                        Read Only:
                          Description:  readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
Defaults to false.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                          Type:  boolean
                      Required:
                        endpoints
                        path
                      Type:  object
                    Host Path:
                      Description:  hostPath represents a pre-existing file or directory on the host
machine that is directly exposed to the container. This is generally
used for system agents or other privileged things that are allowed
to see the host machine. Most containers will NOT need this.
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
---
TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not
mount host directories as read/write.
                      Properties:
                        Path:
                          Description:  path of the directory on the host.
If the path is a symlink, it will follow the link to the real path.
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                          Type:  string
                        Type:
                          Description:  type for HostPath Volume
Defaults to ""
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                          Type:  string
                      Required:
                        path
                      Type:  object
                    Iscsi:
                      Description:  iscsi represents an ISCSI Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://examples.k8s.io/volumes/iscsi/README.md
                      Properties:
                        Chap Auth Discovery:
                          Description:  chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
                          Type:         boolean
                        Chap Auth Session:
                          Description:  chapAuthSession defines whether support iSCSI Session CHAP authentication
                          Type:         boolean
                        Fs Type:
                          Description:  fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
TODO: how do we prevent errors in the filesystem from compromising the machine
                          Type:  string
                        Initiator Name:
                          Description:  initiatorName is the custom iSCSI Initiator Name.
If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
<target portal>:<volume name> will be created for the connection.
                          Type:  string
                        Iqn:
                          Description:  iqn is the target iSCSI Qualified Name.
                          Type:         string
                        Iscsi Interface:
                          Description:  iscsiInterface is the interface Name that uses an iSCSI transport.
Defaults to 'default' (tcp).
                          Type:  string
                        Lun:
                          Description:  lun represents iSCSI Target Lun number.
                          Format:       int32
                          Type:         integer
                        Portals:
                          Description:  portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
is other than default (typically TCP ports 860 and 3260).
                          Items:
                            Type:  string
                          Type:    array
                        Read Only:
                          Description:  readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
                          Type:  boolean
                        Secret Ref:
                          Description:  secretRef is the CHAP Secret for iSCSI target and initiator authentication
                          Properties:
                            Name:
                              Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                              Type:                     string
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                        Target Portal:
                          Description:  targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
is other than default (typically TCP ports 860 and 3260).
                          Type:  string
                      Required:
                        iqn
                        lun
                        targetPortal
                      Type:  object
                    Name:
                      Description:  name of the volume.
Must be a DNS_LABEL and unique within the pod.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      Type:  string
                    Nfs:
                      Description:  nfs represents an NFS mount on the host that shares a pod's lifetime
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                      Properties:
                        Path:
                          Description:  path that is exported by the NFS server.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                          Type:  string
                        Read Only:
                          Description:  readOnly here will force the NFS export to be mounted with read-only permissions.
Defaults to false.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                          Type:  boolean
                        Server:
                          Description:  server is the hostname or IP address of the NFS server.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                          Type:  string
                      Required:
                        path
                        server
                      Type:  object
                    Persistent Volume Claim:
                      Description:  persistentVolumeClaimVolumeSource represents a reference to a
PersistentVolumeClaim in the same namespace.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                      Properties:
                        Claim Name:
                          Description:  claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                          Type:  string
                        Read Only:
                          Description:  readOnly Will force the ReadOnly setting in VolumeMounts.
Default false.
                          Type:  boolean
                      Required:
                        claimName
                      Type:  object
                    Photon Persistent Disk:
                      Description:  photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
                      Properties:
                        Fs Type:
                          Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                          Type:  string
                        Pd ID:
                          Description:  pdID is the ID that identifies Photon Controller persistent disk
                          Type:         string
                      Required:
                        pdID
                      Type:  object
                    Portworx Volume:
                      Description:  portworxVolume represents a portworx volume attached and mounted on kubelets host machine
                      Properties:
                        Fs Type:
                          Description:  fSType represents the filesystem type to mount
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
                          Type:  string
                        Read Only:
                          Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                          Type:  boolean
                        Volume ID:
                          Description:  volumeID uniquely identifies a Portworx volume
                          Type:         string
                      Required:
                        volumeID
                      Type:  object
                    Projected:
                      Description:  projected items for all in one resources secrets, configmaps, and downward API
                      Properties:
                        Default Mode:
                          Description:  defaultMode are the mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                          Format:  int32
                          Type:    integer
                        Sources:
                          Description:  sources is the list of volume projections
                          Items:
                            Description:  Projection that may be projected along with other supported volume types
                            Properties:
                              Cluster Trust Bundle:
                                Description:  ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
of ClusterTrustBundle objects in an auto-updating file.


Alpha, gated by the ClusterTrustBundleProjection feature gate.


ClusterTrustBundle objects can either be selected by name, or by the
combination of signer name and a label selector.


Kubelet performs aggressive normalization of the PEM contents written
into the pod filesystem.  Esoteric PEM features such as inter-block
comments and block headers are stripped.  Certificates are deduplicated.
The ordering of certificates within the file is arbitrary, and Kubelet
may change the order over time.
                                Properties:
                                  Label Selector:
                                    Description:  Select all ClusterTrustBundles that match this label selector.  Only has
effect if signerName is set.  Mutually-exclusive with name.  If unset,
interpreted as "match nothing".  If set but empty, interpreted as "match
everything".
                                    Properties:
                                      Match Expressions:
                                        Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                        Items:
                                          Description:  A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
                                          Properties:
                                            Key:
                                              Description:  key is the label key that the selector applies to.
                                              Type:         string
                                            Operator:
                                              Description:  operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.
                                              Type:  string
                                            Values:
                                              Description:  values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
                                              Items:
                                                Type:  string
                                              Type:    array
                                          Required:
                                            key
                                            operator
                                          Type:  object
                                        Type:    array
                                      Match Labels:
                                        Additional Properties:
                                          Type:       string
                                        Description:  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
                                        Type:                     object
                                    Type:                         object
                                    X - Kubernetes - Map - Type:  atomic
                                  Name:
                                    Description:  Select a single ClusterTrustBundle by object name.  Mutually-exclusive
with signerName and labelSelector.
                                    Type:  string
                                  Optional:
                                    Description:  If true, don't block pod startup if the referenced ClusterTrustBundle(s)
aren't available.  If using name, then the named ClusterTrustBundle is
allowed not to exist.  If using signerName, then the combination of
signerName and labelSelector is allowed to match zero
ClusterTrustBundles.
                                    Type:  boolean
                                  Path:
                                    Description:  Relative path from the volume root to write the bundle.
                                    Type:         string
                                  Signer Name:
                                    Description:  Select all ClusterTrustBundles that match this signer name.
Mutually-exclusive with name.  The contents of all selected
ClusterTrustBundles will be unified and deduplicated.
                                    Type:  string
                                Required:
                                  path
                                Type:  object
                              Config Map:
                                Description:  configMap information about the configMap data to project
                                Properties:
                                  Items:
                                    Description:  items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                                    Items:
                                      Description:  Maps a string key to a path within a volume.
                                      Properties:
                                        Key:
                                          Description:  key is the key to project.
                                          Type:         string
                                        Mode:
                                          Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                          Format:  int32
                                          Type:    integer
                                        Path:
                                          Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                          Type:  string
                                      Required:
                                        key
                                        path
                                      Type:  object
                                    Type:    array
                                  Name:
                                    Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                    Type:  string
                                  Optional:
                                    Description:              optional specify whether the ConfigMap or its keys must be defined
                                    Type:                     boolean
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                              Downward API:
                                Description:  downwardAPI information about the downwardAPI data to project
                                Properties:
                                  Items:
                                    Description:  Items is a list of DownwardAPIVolume file
                                    Items:
                                      Description:  DownwardAPIVolumeFile represents information to create the file containing the pod field
                                      Properties:
                                        Field Ref:
                                          Description:  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
                                          Properties:
                                            API Version:
                                              Description:  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                              Type:         string
                                            Field Path:
                                              Description:  Path of the field to select in the specified API version.
                                              Type:         string
                                          Required:
                                            fieldPath
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                        Mode:
                                          Description:  Optional: mode bits used to set permissions on this file, must be an octal value
between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                          Format:  int32
                                          Type:    integer
                                        Path:
                                          Description:  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
                                          Type:         string
                                        Resource Field Ref:
                                          Description:  Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                                          Properties:
                                            Container Name:
                                              Description:  Container name: required for volumes, optional for env vars
                                              Type:         string
                                            Divisor:
                                              Any Of:
                                                Type:                              integer
                                                Type:                              string
                                              Description:                         Specifies the output format of the exposed resources, defaults to "1"
                                              Pattern:                             ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                              X - Kubernetes - Int - Or - String:  true
                                            Resource:
                                              Description:  Required: resource to select
                                              Type:         string
                                          Required:
                                            resource
                                          Type:                         object
                                          X - Kubernetes - Map - Type:  atomic
                                      Required:
                                        path
                                      Type:  object
                                    Type:    array
                                Type:        object
                              Secret:
                                Description:  secret information about the secret data to project
                                Properties:
                                  Items:
                                    Description:  items if unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                                    Items:
                                      Description:  Maps a string key to a path within a volume.
                                      Properties:
                                        Key:
                                          Description:  key is the key to project.
                                          Type:         string
                                        Mode:
                                          Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                          Format:  int32
                                          Type:    integer
                                        Path:
                                          Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                          Type:  string
                                      Required:
                                        key
                                        path
                                      Type:  object
                                    Type:    array
                                  Name:
                                    Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                                    Type:  string
                                  Optional:
                                    Description:              optional field specify whether the Secret or its key must be defined
                                    Type:                     boolean
                                Type:                         object
                                X - Kubernetes - Map - Type:  atomic
                              Service Account Token:
                                Description:  serviceAccountToken is information about the serviceAccountToken data to project
                                Properties:
                                  Audience:
                                    Description:  audience is the intended audience of the token. A recipient of a token
must identify itself with an identifier specified in the audience of the
token, and otherwise should reject the token. The audience defaults to the
identifier of the apiserver.
                                    Type:  string
                                  Expiration Seconds:
                                    Description:  expirationSeconds is the requested duration of validity of the service
account token. As the token approaches expiration, the kubelet volume
plugin will proactively rotate the service account token. The kubelet will
start trying to rotate the token if the token is older than 80 percent of
its time to live or if the token is older than 24 hours.Defaults to 1 hour
and must be at least 10 minutes.
                                    Format:  int64
                                    Type:    integer
                                  Path:
                                    Description:  path is the path relative to the mount point of the file to project the
token into.
                                    Type:  string
                                Required:
                                  path
                                Type:  object
                            Type:      object
                          Type:        array
                      Type:            object
                    Quobyte:
                      Description:  quobyte represents a Quobyte mount on the host that shares a pod's lifetime
                      Properties:
                        Group:
                          Description:  group to map volume access to
Default is no group
                          Type:  string
                        Read Only:
                          Description:  readOnly here will force the Quobyte volume to be mounted with read-only permissions.
Defaults to false.
                          Type:  boolean
                        Registry:
                          Description:  registry represents a single or multiple Quobyte Registry services
specified as a string as host:port pair (multiple entries are separated with commas)
which acts as the central registry for volumes
                          Type:  string
                        Tenant:
                          Description:  tenant owning the given Quobyte volume in the Backend
Used with dynamically provisioned Quobyte volumes, value is set by the plugin
                          Type:  string
                        User:
                          Description:  user to map volume access to
Defaults to serivceaccount user
                          Type:  string
                        Volume:
                          Description:  volume is a string that references an already created Quobyte volume by name.
                          Type:         string
                      Required:
                        registry
                        volume
                      Type:  object
                    Rbd:
                      Description:  rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
More info: https://examples.k8s.io/volumes/rbd/README.md
                      Properties:
                        Fs Type:
                          Description:  fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
TODO: how do we prevent errors in the filesystem from compromising the machine
                          Type:  string
                        Image:
                          Description:  image is the rados image name.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                          Type:  string
                        Keyring:
                          Description:  keyring is the path to key ring for RBDUser.
Default is /etc/ceph/keyring.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                          Type:  string
                        Monitors:
                          Description:  monitors is a collection of Ceph monitors.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                          Items:
                            Type:  string
                          Type:    array
                        Pool:
                          Description:  pool is the rados pool name.
Default is rbd.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                          Type:  string
                        Read Only:
                          Description:  readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                          Type:  boolean
                        Secret Ref:
                          Description:  secretRef is name of the authentication secret for RBDUser. If provided
overrides keyring.
Default is nil.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                          Properties:
                            Name:
                              Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                              Type:                     string
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                        User:
                          Description:  user is the rados user name.
Default is admin.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                          Type:  string
                      Required:
                        image
                        monitors
                      Type:  object
                    Scale IO:
                      Description:  scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
                      Properties:
                        Fs Type:
                          Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs".
Default is "xfs".
                          Type:  string
                        Gateway:
                          Description:  gateway is the host address of the ScaleIO API Gateway.
                          Type:         string
                        Protection Domain:
                          Description:  protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
                          Type:         string
                        Read Only:
                          Description:  readOnly Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                          Type:  boolean
                        Secret Ref:
                          Description:  secretRef references to the secret for ScaleIO user and other
sensitive information. If this is not provided, Login operation will fail.
                          Properties:
                            Name:
                              Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                              Type:                     string
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                        Ssl Enabled:
                          Description:  sslEnabled Flag enable/disable SSL communication with Gateway, default false
                          Type:         boolean
                        Storage Mode:
                          Description:  storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
Default is ThinProvisioned.
                          Type:  string
                        Storage Pool:
                          Description:  storagePool is the ScaleIO Storage Pool associated with the protection domain.
                          Type:         string
                        System:
                          Description:  system is the name of the storage system as configured in ScaleIO.
                          Type:         string
                        Volume Name:
                          Description:  volumeName is the name of a volume already created in the ScaleIO system
that is associated with this volume source.
                          Type:  string
                      Required:
                        gateway
                        secretRef
                        system
                      Type:  object
                    Secret:
                      Description:  secret represents a secret that should populate this volume.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
                      Properties:
                        Default Mode:
                          Description:  defaultMode is Optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values
for mode bits. Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                          Format:  int32
                          Type:    integer
                        Items:
                          Description:  items If unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
                          Items:
                            Description:  Maps a string key to a path within a volume.
                            Properties:
                              Key:
                                Description:  key is the key to project.
                                Type:         string
                              Mode:
                                Description:  mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
                                Format:  int32
                                Type:    integer
                              Path:
                                Description:  path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
                                Type:  string
                            Required:
                              key
                              path
                            Type:  object
                          Type:    array
                        Optional:
                          Description:  optional field specify whether the Secret or its keys must be defined
                          Type:         boolean
                        Secret Name:
                          Description:  secretName is the name of the secret in the pod's namespace to use.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
                          Type:  string
                      Type:      object
                    Storageos:
                      Description:  storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
                      Properties:
                        Fs Type:
                          Description:  fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                          Type:  string
                        Read Only:
                          Description:  readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
                          Type:  boolean
                        Secret Ref:
                          Description:  secretRef specifies the secret to use for obtaining the StorageOS API
credentials.  If not specified, default values will be attempted.
                          Properties:
                            Name:
                              Description:  Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
                              Type:                     string
                          Type:                         object
                          X - Kubernetes - Map - Type:  atomic
                        Volume Name:
                          Description:  volumeName is the human-readable name of the StorageOS volume.  Volume
names are only unique within a namespace.
                          Type:  string
                        Volume Namespace:
                          Description:  volumeNamespace specifies the scope of the volume within StorageOS.  If no
namespace is specified then the Pod's namespace will be used.  This allows the
Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
Set VolumeName to any name to override the default behaviour.
Set to "default" if you are not using namespaces within StorageOS.
Namespaces that do not pre-exist within StorageOS will be created.
                          Type:  string
                      Type:      object
                    Vsphere Volume:
                      Description:  vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
                      Properties:
                        Fs Type:
                          Description:  fsType is filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                          Type:  string
                        Storage Policy ID:
                          Description:  storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
                          Type:         string
                        Storage Policy Name:
                          Description:  storagePolicyName is the storage Policy Based Management (SPBM) profile name.
                          Type:         string
                        Volume Path:
                          Description:  volumePath is the path that identifies vSphere volume vmdk
                          Type:         string
                      Required:
                        volumePath
                      Type:  object
                  Required:
                    name
                  Type:  object
                Type:    array
            Type:        object
          Status:
            Description:  MariaDBStatus defines the observed state of MariaDB
            Properties:
              Conditions:
                Description:  Conditions for the Mariadb object.
                Items:
                  Description:  Condition contains details for one aspect of the current state of this API Resource.
---
This struct is intended for direct use as an array at the field path .status.conditions.  For example,


  type FooStatus struct{
      // Represents the observations of a foo's current state.
      // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
      // +patchMergeKey=type
      // +patchStrategy=merge
      // +listType=map
      // +listMapKey=type
      Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`


      // other fields
  }
                  Properties:
                    Last Transition Time:
                      Description:  lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      Format:  date-time
                      Type:    string
                    Message:
                      Description:  message is a human readable message indicating details about the transition.
This may be an empty string.
                      Max Length:  32768
                      Type:        string
                    Observed Generation:
                      Description:  observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.
                      Format:   int64
                      Minimum:  0
                      Type:     integer
                    Reason:
                      Description:  reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.
                      Max Length:  1024
                      Min Length:  1
                      Pattern:     ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      Type:        string
                    Status:
                      Description:  status of the condition, one of True, False, Unknown.
                      Enum:
                        True
                        False
                        Unknown
                      Type:  string
                    Type:
                      Description:  type of condition in CamelCase or in foo.example.com/CamelCase.
---
Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
useful (see .node.status.conditions), the ability to deconflict is important.
The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      Max Length:  316
                      Pattern:     ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      Type:        string
                  Required:
                    lastTransitionTime
                    message
                    reason
                    status
                    type
                  Type:  object
                Type:    array
              Current Primary:
                Description:  CurrentPrimary is the primary Pod.
                Type:         string
              Current Primary Pod Index:
                Description:  CurrentPrimaryPodIndex is the primary Pod index.
                Type:         integer
              Galera Recovery:
                Description:  GaleraRecovery is the Galera recovery current state.
                Properties:
                  Bootstrap:
                    Description:  Bootstrap indicates when and in which Pod the cluster bootstrap process has been performed.
                    Properties:
                      Pod:
                        Type:  string
                      Time:
                        Format:  date-time
                        Type:    string
                    Type:        object
                  Pods Restarted:
                    Description:  PodsRestarted that the Pods have been restarted after the cluster bootstrap.
                    Type:         boolean
                  Recovered:
                    Additional Properties:
                      Properties:
                        Seqno:
                          Type:  integer
                        Uuid:
                          Type:  string
                      Required:
                        seqno
                        uuid
                      Type:       object
                    Description:  State is a per Pod representation of the sequence recovery process.
                    Type:         object
                  State:
                    Additional Properties:
                      Properties:
                        Safe To Bootstrap:
                          Type:  boolean
                        Seqno:
                          Type:  integer
                        Uuid:
                          Type:  string
                        Version:
                          Type:  string
                      Required:
                        safeToBootstrap
                        seqno
                        uuid
                        version
                      Type:       object
                    Description:  State is a per Pod representation of the Galera state file (grastate.dat).
                    Type:         object
                Type:             object
              Replicas:
                Description:  Replicas indicates the number of current instances.
                Format:       int32
                Type:         integer
              Replication Status:
                Additional Properties:
                  Type:       string
                Description:  ReplicationStatus is the replication current state for each Pod.
                Type:         object
            Type:             object
        Required:
          spec
        Type:  object
    Served:    true
    Storage:   true
    Subresources:
      Scale:
        Spec Replicas Path:    .spec.replicas
        Status Replicas Path:  .status.replicas
      Status:
Status:
  Accepted Names:
    Kind:       MariaDB
    List Kind:  MariaDBList
    Plural:     mariadbs
    Short Names:
      mdb
    Singular:  mariadb
  Conditions:
    Last Transition Time:  2024-06-04T16:40:19Z
    Message:               no conflicts found
    Reason:                NoConflicts
    Status:                True
    Type:                  NamesAccepted
    Last Transition Time:  2024-06-04T16:40:21Z
    Message:               the initial names have been accepted
    Reason:                InitialNamesAccepted
    Status:                True
    Type:                  Established
  Stored Versions:
    v1alpha1
Events:  <none>

